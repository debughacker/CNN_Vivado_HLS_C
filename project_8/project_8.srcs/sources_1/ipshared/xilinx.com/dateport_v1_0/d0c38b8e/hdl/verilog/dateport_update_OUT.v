// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dateport_update_OUT (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_d_address0,
        output_d_ce0,
        output_d_q0,
        output_dwei_address0,
        output_dwei_ce0,
        output_dwei_we0,
        output_dwei_d0,
        output_dwei_q0,
        C5_y_address0,
        C5_y_ce0,
        C5_y_q0,
        output_dbias_address0,
        output_dbias_ce0,
        output_dbias_we0,
        output_dbias_d0,
        output_dbias_q0
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 22'b1;
parameter    ap_ST_st2_fsm_1 = 22'b10;
parameter    ap_ST_st3_fsm_2 = 22'b100;
parameter    ap_ST_st4_fsm_3 = 22'b1000;
parameter    ap_ST_st5_fsm_4 = 22'b10000;
parameter    ap_ST_st6_fsm_5 = 22'b100000;
parameter    ap_ST_st7_fsm_6 = 22'b1000000;
parameter    ap_ST_st8_fsm_7 = 22'b10000000;
parameter    ap_ST_st9_fsm_8 = 22'b100000000;
parameter    ap_ST_st10_fsm_9 = 22'b1000000000;
parameter    ap_ST_st11_fsm_10 = 22'b10000000000;
parameter    ap_ST_st12_fsm_11 = 22'b100000000000;
parameter    ap_ST_st13_fsm_12 = 22'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 22'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 22'b100000000000000;
parameter    ap_ST_st16_fsm_15 = 22'b1000000000000000;
parameter    ap_ST_st17_fsm_16 = 22'b10000000000000000;
parameter    ap_ST_st18_fsm_17 = 22'b100000000000000000;
parameter    ap_ST_st19_fsm_18 = 22'b1000000000000000000;
parameter    ap_ST_st20_fsm_19 = 22'b10000000000000000000;
parameter    ap_ST_st21_fsm_20 = 22'b100000000000000000000;
parameter    ap_ST_st22_fsm_21 = 22'b1000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_14 = 32'b10100;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv32_15 = 32'b10101;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv4_A = 4'b1010;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv5_1E = 5'b11110;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] output_d_address0;
output   output_d_ce0;
input  [31:0] output_d_q0;
output  [8:0] output_dwei_address0;
output   output_dwei_ce0;
output   output_dwei_we0;
output  [31:0] output_dwei_d0;
input  [31:0] output_dwei_q0;
output  [4:0] C5_y_address0;
output   C5_y_ce0;
input  [31:0] C5_y_q0;
output  [3:0] output_dbias_address0;
output   output_dbias_ce0;
output   output_dbias_we0;
output  [31:0] output_dbias_d0;
input  [31:0] output_dbias_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] output_d_address0;
reg output_d_ce0;
reg[8:0] output_dwei_address0;
reg output_dwei_ce0;
reg output_dwei_we0;
reg C5_y_ce0;
reg[3:0] output_dbias_address0;
reg output_dbias_ce0;
reg output_dbias_we0;
(* fsm_encoding = "none" *) reg   [21:0] ap_CS_fsm = 22'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_40;
reg   [31:0] reg_135;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_79;
reg    ap_sig_cseq_ST_st16_fsm_15;
reg    ap_sig_bdd_86;
wire   [31:0] grp_fu_126_p2;
reg   [31:0] reg_141;
reg    ap_sig_cseq_ST_st13_fsm_12;
reg    ap_sig_bdd_96;
reg    ap_sig_cseq_ST_st21_fsm_20;
reg    ap_sig_bdd_103;
wire   [3:0] i_20_fu_153_p2;
reg   [3:0] i_20_reg_245;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_113;
wire   [0:0] exitcond2_fu_147_p2;
wire   [8:0] tmp_trn_cast_fu_164_p1;
reg   [8:0] tmp_trn_cast_reg_255;
wire   [4:0] j_17_fu_174_p2;
reg   [4:0] j_17_reg_263;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_130;
wire   [8:0] output_dwei_addr2_fu_215_p2;
reg   [8:0] output_dwei_addr2_reg_268;
wire   [0:0] exitcond1_fu_168_p2;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_145;
reg   [8:0] output_dwei_addr_reg_283;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_bdd_154;
reg   [31:0] output_dwei_load_reg_288;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_bdd_162;
wire   [31:0] grp_fu_130_p2;
reg   [31:0] tmp_106_reg_293;
wire   [3:0] i_21_fu_230_p2;
reg   [3:0] i_21_reg_301;
reg    ap_sig_cseq_ST_st15_fsm_14;
reg    ap_sig_bdd_173;
reg   [3:0] output_dbias_addr_reg_306;
wire   [0:0] exitcond_fu_224_p2;
reg   [31:0] output_dbias_load_reg_316;
reg   [3:0] i_reg_92;
reg   [4:0] j_reg_104;
reg    ap_sig_cseq_ST_st14_fsm_13;
reg    ap_sig_bdd_198;
reg   [3:0] i_1_reg_115;
reg    ap_sig_cseq_ST_st22_fsm_21;
reg    ap_sig_bdd_208;
wire   [63:0] tmp_fu_159_p1;
wire   [63:0] tmp_105_fu_180_p1;
wire   [63:0] tmp_207_fu_220_p1;
wire   [63:0] tmp_s_fu_236_p1;
reg   [31:0] grp_fu_126_p0;
reg   [31:0] grp_fu_126_p1;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_bdd_228;
reg    ap_sig_cseq_ST_st17_fsm_16;
reg    ap_sig_bdd_235;
wire   [31:0] grp_fu_130_p0;
wire   [31:0] grp_fu_130_p1;
wire   [7:0] tmp_205_fu_185_p3;
wire   [5:0] tmp_206_fu_197_p3;
wire   [8:0] p_shl3_cast_fu_205_p1;
wire   [8:0] p_shl_cast_fu_193_p1;
wire   [8:0] output_dwei_addr1_fu_209_p2;
wire    grp_fu_126_ce;
wire    grp_fu_130_ce;
reg   [21:0] ap_NS_fsm;


dateport_fadd_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dateport_fadd_32ns_32ns_32_5_full_dsp_U101(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_126_p0 ),
    .din1( grp_fu_126_p1 ),
    .ce( grp_fu_126_ce ),
    .dout( grp_fu_126_p2 )
);

dateport_fmul_32ns_32ns_32_4_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dateport_fmul_32ns_32ns_32_4_max_dsp_U102(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_130_p0 ),
    .din1( grp_fu_130_p1 ),
    .ce( grp_fu_130_ce ),
    .dout( grp_fu_130_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond2_fu_147_p2 == ap_const_lv1_0))) begin
        i_1_reg_115 <= ap_const_lv4_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st22_fsm_21)) begin
        i_1_reg_115 <= i_21_reg_301;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_lv1_0 == exitcond1_fu_168_p2))) begin
        i_reg_92 <= i_20_reg_245;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_92 <= ap_const_lv4_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        j_reg_104 <= ap_const_lv5_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13)) begin
        j_reg_104 <= j_17_reg_263;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        i_20_reg_245 <= i_20_fu_153_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14)) begin
        i_21_reg_301 <= i_21_fu_230_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        j_17_reg_263 <= j_17_fu_174_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14) & (ap_const_lv1_0 == exitcond_fu_224_p2))) begin
        output_dbias_addr_reg_306 <= tmp_s_fu_236_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15)) begin
        output_dbias_load_reg_316 <= output_dbias_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == exitcond1_fu_168_p2))) begin
        output_dwei_addr2_reg_268 <= output_dwei_addr2_fu_215_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        output_dwei_addr_reg_283 <= tmp_207_fu_220_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        output_dwei_load_reg_288 <= output_dwei_q0;
        tmp_106_reg_293 <= grp_fu_130_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) | (ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15))) begin
        reg_135 <= output_d_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12) | (ap_const_logic_1 == ap_sig_cseq_ST_st21_fsm_20))) begin
        reg_141 <= grp_fu_126_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        tmp_trn_cast_reg_255[3 : 0] <= tmp_trn_cast_fu_164_p1[3 : 0];
    end
end

/// C5_y_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        C5_y_ce0 = ap_const_logic_1;
    end else begin
        C5_y_ce0 = ap_const_logic_0;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st15_fsm_14 or exitcond_fu_224_p2)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14) & ~(ap_const_lv1_0 == exitcond_fu_224_p2)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st15_fsm_14 or exitcond_fu_224_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14) & ~(ap_const_lv1_0 == exitcond_fu_224_p2))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st13_fsm_12 assign process. ///
always @ (ap_sig_bdd_96)
begin
    if (ap_sig_bdd_96) begin
        ap_sig_cseq_ST_st13_fsm_12 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st13_fsm_12 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st14_fsm_13 assign process. ///
always @ (ap_sig_bdd_198)
begin
    if (ap_sig_bdd_198) begin
        ap_sig_cseq_ST_st14_fsm_13 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st14_fsm_13 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st15_fsm_14 assign process. ///
always @ (ap_sig_bdd_173)
begin
    if (ap_sig_bdd_173) begin
        ap_sig_cseq_ST_st15_fsm_14 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st15_fsm_14 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st16_fsm_15 assign process. ///
always @ (ap_sig_bdd_86)
begin
    if (ap_sig_bdd_86) begin
        ap_sig_cseq_ST_st16_fsm_15 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st16_fsm_15 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st17_fsm_16 assign process. ///
always @ (ap_sig_bdd_235)
begin
    if (ap_sig_bdd_235) begin
        ap_sig_cseq_ST_st17_fsm_16 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st17_fsm_16 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_40)
begin
    if (ap_sig_bdd_40) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st21_fsm_20 assign process. ///
always @ (ap_sig_bdd_103)
begin
    if (ap_sig_bdd_103) begin
        ap_sig_cseq_ST_st21_fsm_20 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st21_fsm_20 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st22_fsm_21 assign process. ///
always @ (ap_sig_bdd_208)
begin
    if (ap_sig_bdd_208) begin
        ap_sig_cseq_ST_st22_fsm_21 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st22_fsm_21 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_113)
begin
    if (ap_sig_bdd_113) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_79)
begin
    if (ap_sig_bdd_79) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_130)
begin
    if (ap_sig_bdd_130) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st5_fsm_4 assign process. ///
always @ (ap_sig_bdd_145)
begin
    if (ap_sig_bdd_145) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st7_fsm_6 assign process. ///
always @ (ap_sig_bdd_154)
begin
    if (ap_sig_bdd_154) begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st8_fsm_7 assign process. ///
always @ (ap_sig_bdd_162)
begin
    if (ap_sig_bdd_162) begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st9_fsm_8 assign process. ///
always @ (ap_sig_bdd_228)
begin
    if (ap_sig_bdd_228) begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_0;
    end
end

/// grp_fu_126_p0 assign process. ///
always @ (output_dwei_load_reg_288 or output_dbias_load_reg_316 or ap_sig_cseq_ST_st9_fsm_8 or ap_sig_cseq_ST_st17_fsm_16)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st17_fsm_16)) begin
        grp_fu_126_p0 = output_dbias_load_reg_316;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        grp_fu_126_p0 = output_dwei_load_reg_288;
    end else begin
        grp_fu_126_p0 = 'bx;
    end
end

/// grp_fu_126_p1 assign process. ///
always @ (reg_135 or tmp_106_reg_293 or ap_sig_cseq_ST_st9_fsm_8 or ap_sig_cseq_ST_st17_fsm_16)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st17_fsm_16)) begin
        grp_fu_126_p1 = reg_135;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        grp_fu_126_p1 = tmp_106_reg_293;
    end else begin
        grp_fu_126_p1 = 'bx;
    end
end

/// output_d_address0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st15_fsm_14 or tmp_fu_159_p1 or tmp_s_fu_236_p1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14)) begin
        output_d_address0 = tmp_s_fu_236_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_d_address0 = tmp_fu_159_p1;
    end else begin
        output_d_address0 = 'bx;
    end
end

/// output_d_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st15_fsm_14)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) | (ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14))) begin
        output_d_ce0 = ap_const_logic_1;
    end else begin
        output_d_ce0 = ap_const_logic_0;
    end
end

/// output_dbias_address0 assign process. ///
always @ (ap_sig_cseq_ST_st15_fsm_14 or output_dbias_addr_reg_306 or ap_sig_cseq_ST_st22_fsm_21 or tmp_s_fu_236_p1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st22_fsm_21)) begin
        output_dbias_address0 = output_dbias_addr_reg_306;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14)) begin
        output_dbias_address0 = tmp_s_fu_236_p1;
    end else begin
        output_dbias_address0 = 'bx;
    end
end

/// output_dbias_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st15_fsm_14 or ap_sig_cseq_ST_st22_fsm_21)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14) | (ap_const_logic_1 == ap_sig_cseq_ST_st22_fsm_21))) begin
        output_dbias_ce0 = ap_const_logic_1;
    end else begin
        output_dbias_ce0 = ap_const_logic_0;
    end
end

/// output_dbias_we0 assign process. ///
always @ (ap_sig_cseq_ST_st22_fsm_21)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st22_fsm_21)) begin
        output_dbias_we0 = ap_const_logic_1;
    end else begin
        output_dbias_we0 = ap_const_logic_0;
    end
end

/// output_dwei_address0 assign process. ///
always @ (output_dwei_addr_reg_283 or ap_sig_cseq_ST_st7_fsm_6 or ap_sig_cseq_ST_st14_fsm_13 or tmp_207_fu_220_p1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13)) begin
        output_dwei_address0 = output_dwei_addr_reg_283;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        output_dwei_address0 = tmp_207_fu_220_p1;
    end else begin
        output_dwei_address0 = 'bx;
    end
end

/// output_dwei_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st7_fsm_6 or ap_sig_cseq_ST_st14_fsm_13)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) | (ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13))) begin
        output_dwei_ce0 = ap_const_logic_1;
    end else begin
        output_dwei_ce0 = ap_const_logic_0;
    end
end

/// output_dwei_we0 assign process. ///
always @ (ap_sig_cseq_ST_st14_fsm_13)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13)) begin
        output_dwei_we0 = ap_const_logic_1;
    end else begin
        output_dwei_we0 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or exitcond2_fu_147_p2 or exitcond1_fu_168_p2 or exitcond_fu_224_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(exitcond2_fu_147_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st15_fsm_14;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : 
        begin
            if ((ap_const_lv1_0 == exitcond1_fu_168_p2)) begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : 
        begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : 
        begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : 
        begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : 
        begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st15_fsm_14 : 
        begin
            if (~(ap_const_lv1_0 == exitcond_fu_224_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st16_fsm_15;
            end
        end
        ap_ST_st16_fsm_15 : 
        begin
            ap_NS_fsm = ap_ST_st17_fsm_16;
        end
        ap_ST_st17_fsm_16 : 
        begin
            ap_NS_fsm = ap_ST_st18_fsm_17;
        end
        ap_ST_st18_fsm_17 : 
        begin
            ap_NS_fsm = ap_ST_st19_fsm_18;
        end
        ap_ST_st19_fsm_18 : 
        begin
            ap_NS_fsm = ap_ST_st20_fsm_19;
        end
        ap_ST_st20_fsm_19 : 
        begin
            ap_NS_fsm = ap_ST_st21_fsm_20;
        end
        ap_ST_st21_fsm_20 : 
        begin
            ap_NS_fsm = ap_ST_st22_fsm_21;
        end
        ap_ST_st22_fsm_21 : 
        begin
            ap_NS_fsm = ap_ST_st15_fsm_14;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign C5_y_address0 = tmp_105_fu_180_p1;

/// ap_sig_bdd_103 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_103 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_14]);
end

/// ap_sig_bdd_113 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_113 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_130 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_130 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_145 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_145 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

/// ap_sig_bdd_154 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_154 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end

/// ap_sig_bdd_162 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_162 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end

/// ap_sig_bdd_173 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_173 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_E]);
end

/// ap_sig_bdd_198 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_198 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_D]);
end

/// ap_sig_bdd_208 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_208 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_15]);
end

/// ap_sig_bdd_228 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_228 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end

/// ap_sig_bdd_235 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_235 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_10]);
end

/// ap_sig_bdd_40 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_40 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_79 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_79 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_86 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_86 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_F]);
end

/// ap_sig_bdd_96 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_96 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_C]);
end
assign exitcond1_fu_168_p2 = (j_reg_104 == ap_const_lv5_1E? 1'b1: 1'b0);
assign exitcond2_fu_147_p2 = (i_reg_92 == ap_const_lv4_A? 1'b1: 1'b0);
assign exitcond_fu_224_p2 = (i_1_reg_115 == ap_const_lv4_A? 1'b1: 1'b0);
assign grp_fu_126_ce = ap_const_logic_1;
assign grp_fu_130_ce = ap_const_logic_1;
assign grp_fu_130_p0 = C5_y_q0;
assign grp_fu_130_p1 = reg_135;
assign i_20_fu_153_p2 = (i_reg_92 + ap_const_lv4_1);
assign i_21_fu_230_p2 = (i_1_reg_115 + ap_const_lv4_1);
assign j_17_fu_174_p2 = (j_reg_104 + ap_const_lv5_1);
assign output_dbias_d0 = reg_141;
assign output_dwei_addr1_fu_209_p2 = (p_shl3_cast_fu_205_p1 + p_shl_cast_fu_193_p1);
assign output_dwei_addr2_fu_215_p2 = (output_dwei_addr1_fu_209_p2 + tmp_trn_cast_reg_255);
assign output_dwei_d0 = reg_141;
assign p_shl3_cast_fu_205_p1 = tmp_206_fu_197_p3;
assign p_shl_cast_fu_193_p1 = tmp_205_fu_185_p3;
assign tmp_105_fu_180_p1 = j_reg_104;
assign tmp_205_fu_185_p3 = {{j_reg_104}, {ap_const_lv3_0}};
assign tmp_206_fu_197_p3 = {{j_reg_104}, {ap_const_lv1_0}};
assign tmp_207_fu_220_p1 = output_dwei_addr2_reg_268;
assign tmp_fu_159_p1 = i_reg_92;
assign tmp_s_fu_236_p1 = i_1_reg_115;
assign tmp_trn_cast_fu_164_p1 = i_reg_92;
always @ (posedge ap_clk)
begin
    tmp_trn_cast_reg_255[8:4] <= 5'b00000;
end



endmodule //dateport_update_OUT

