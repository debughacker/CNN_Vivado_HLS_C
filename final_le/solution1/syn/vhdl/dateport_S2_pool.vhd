-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dateport_S2_pool is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    C1_y_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    C1_y_ce0 : OUT STD_LOGIC;
    C1_y_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C1_y_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    C1_y_ce1 : OUT STD_LOGIC;
    C1_y_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    S2_y_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    S2_y_ce0 : OUT STD_LOGIC;
    S2_y_we0 : OUT STD_LOGIC;
    S2_y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of dateport_S2_pool is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (23 downto 0) := "000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (23 downto 0) := "000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (23 downto 0) := "000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (23 downto 0) := "000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (23 downto 0) := "000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (23 downto 0) := "000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (23 downto 0) := "000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (23 downto 0) := "000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (23 downto 0) := "000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (23 downto 0) := "001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (23 downto 0) := "010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_3E800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111110100000000000000000000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_42 : BOOLEAN;
    signal reg_151 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_69 : BOOLEAN;
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_76 : BOOLEAN;
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_84 : BOOLEAN;
    signal grp_fu_141_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_158 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st20_fsm_19 : STD_LOGIC;
    signal ap_sig_bdd_94 : BOOLEAN;
    signal i_1_fu_170_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_479 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_104 : BOOLEAN;
    signal C1_y_addr1_cast_fu_206_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal C1_y_addr1_cast_reg_484 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal S2_y_addr1_cast_fu_240_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal S2_y_addr1_cast_reg_490 : STD_LOGIC_VECTOR (8 downto 0);
    signal C1_y_addr3_fu_289_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C1_y_addr3_reg_498 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_121 : BOOLEAN;
    signal tmp_s_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal C1_y_addr9_fu_328_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C1_y_addr9_reg_504 : STD_LOGIC_VECTOR (31 downto 0);
    signal S2_y_addr3_fu_377_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal S2_y_addr3_reg_510 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_138 : BOOLEAN;
    signal tmp_9_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal C1_y_addr7_fu_423_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C1_y_addr7_reg_528 : STD_LOGIC_VECTOR (31 downto 0);
    signal C1_y_addr4_fu_428_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C1_y_addr4_reg_533 : STD_LOGIC_VECTOR (31 downto 0);
    signal S2_y_addr4_fu_447_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal S2_y_addr4_reg_538 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_fu_452_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_1_reg_543 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_1_fu_458_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal C1_y_load_1_reg_553 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_165 : BOOLEAN;
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_174 : BOOLEAN;
    signal i_reg_107 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_118 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_reg_130 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st24_fsm_23 : STD_LOGIC;
    signal ap_sig_bdd_193 : BOOLEAN;
    signal tmp_30_fu_398_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_31_fu_418_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_fu_464_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_33_fu_468_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_34_fu_472_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_145_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_141_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_141_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_212 : BOOLEAN;
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_219 : BOOLEAN;
    signal ap_sig_cseq_ST_st16_fsm_15 : STD_LOGIC;
    signal ap_sig_bdd_226 : BOOLEAN;
    signal grp_fu_145_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_145_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st21_fsm_20 : STD_LOGIC;
    signal ap_sig_bdd_237 : BOOLEAN;
    signal tmp_fu_176_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_fu_188_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl1_cast_fu_184_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl2_cast_fu_196_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal C1_y_addr1_fu_200_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_22_fu_210_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_23_fu_222_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_218_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl3_cast_fu_230_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal S2_y_addr1_fu_234_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_trn_cast_fu_256_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal C1_y_addr2_fu_260_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_24_fu_265_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_25_fu_277_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl4_fu_273_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl5_fu_285_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_250_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_6_trn6_cast_fu_295_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal C1_y_addr8_fu_299_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_26_fu_304_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_27_fu_316_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl6_fu_312_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl7_fu_324_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_334_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_trn_cast_fu_344_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal S2_y_addr2_fu_348_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_29_fu_353_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_35_fu_365_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl8_fu_361_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl9_fu_373_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_trn_fu_389_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal C1_y_addr5_fu_393_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_403_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_12_trn_fu_409_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal C1_y_addr6_fu_413_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_433_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_18_trn_fu_443_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_141_ce : STD_LOGIC;
    signal grp_fu_145_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (23 downto 0);

    component dateport_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dateport_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    dateport_fadd_32ns_32ns_32_5_full_dsp_U8 : component dateport_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_141_p0,
        din1 => grp_fu_141_p1,
        ce => grp_fu_141_ce,
        dout => grp_fu_141_p2);

    dateport_fmul_32ns_32ns_32_4_max_dsp_U9 : component dateport_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_145_p0,
        din1 => grp_fu_145_p1,
        ce => grp_fu_145_ce,
        dout => grp_fu_145_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- i_reg_107 assign process. --
    i_reg_107_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_s_fu_244_p2))) then 
                i_reg_107 <= i_1_reg_479;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_107 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- j_reg_118 assign process. --
    j_reg_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_164_p2 = ap_const_lv1_0))) then 
                j_reg_118 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = tmp_9_fu_383_p2))) then 
                j_reg_118 <= j_1_fu_458_p2;
            end if; 
        end if;
    end process;

    -- k_reg_130 assign process. --
    k_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = tmp_s_fu_244_p2)))) then 
                k_reg_130 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
                k_reg_130 <= k_1_reg_543;
            end if; 
        end if;
    end process;

    -- reg_151 assign process. --
    reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
                reg_151 <= C1_y_q1;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9))) then 
                reg_151 <= C1_y_q0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_164_p2 = ap_const_lv1_0))) then
                    C1_y_addr1_cast_reg_484(9 downto 2) <= C1_y_addr1_cast_fu_206_p1(9 downto 2);
                    S2_y_addr1_cast_reg_490(8 downto 1) <= S2_y_addr1_cast_fu_240_p1(8 downto 1);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = tmp_s_fu_244_p2)))) then
                    C1_y_addr3_reg_498(31 downto 2) <= C1_y_addr3_fu_289_p2(31 downto 2);
                    C1_y_addr9_reg_504(31 downto 3) <= C1_y_addr9_fu_328_p2(31 downto 3);
                    S2_y_addr3_reg_510(31 downto 1) <= S2_y_addr3_fu_377_p2(31 downto 1);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_9_fu_383_p2)))) then
                    C1_y_addr4_reg_533(31 downto 1) <= C1_y_addr4_fu_428_p2(31 downto 1);
                C1_y_addr7_reg_528 <= C1_y_addr7_fu_423_p2;
                S2_y_addr4_reg_538 <= S2_y_addr4_fu_447_p2;
                k_1_reg_543 <= k_1_fu_452_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                C1_y_load_1_reg_553 <= C1_y_q1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_1_reg_479 <= i_1_fu_170_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19))) then
                reg_158 <= grp_fu_141_p2;
            end if;
        end if;
    end process;
    C1_y_addr1_cast_reg_484(1 downto 0) <= "00";
    S2_y_addr1_cast_reg_490(0) <= '0';
    C1_y_addr3_reg_498(1 downto 0) <= "00";
    C1_y_addr9_reg_504(2 downto 0) <= "100";
    S2_y_addr3_reg_510(0) <= '0';
    C1_y_addr4_reg_533(0) <= '1';

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_fu_164_p2, tmp_s_fu_244_p2, tmp_9_fu_383_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond_fu_164_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_lv1_0 = tmp_s_fu_244_p2))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st4_fsm_3 => 
                if ((ap_const_lv1_0 = tmp_9_fu_383_p2)) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
        C1_y_addr1_cast_fu_206_p1 <= std_logic_vector(resize(signed(C1_y_addr1_fu_200_p2),10));

    C1_y_addr1_fu_200_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_184_p1) - unsigned(p_shl2_cast_fu_196_p1));
    C1_y_addr2_fu_260_p2 <= std_logic_vector(unsigned(tmp_4_trn_cast_fu_256_p1) + unsigned(C1_y_addr1_cast_reg_484));
    C1_y_addr3_fu_289_p2 <= std_logic_vector(signed(p_shl4_fu_273_p1) - signed(p_shl5_fu_285_p1));
    C1_y_addr4_fu_428_p2 <= std_logic_vector(signed(C1_y_addr9_reg_504) + signed(tmp_12_trn_fu_409_p1));
    C1_y_addr5_fu_393_p2 <= std_logic_vector(signed(C1_y_addr3_reg_498) + signed(tmp_10_trn_fu_389_p1));
    C1_y_addr6_fu_413_p2 <= std_logic_vector(signed(C1_y_addr3_reg_498) + signed(tmp_12_trn_fu_409_p1));
    C1_y_addr7_fu_423_p2 <= std_logic_vector(signed(C1_y_addr9_reg_504) + signed(tmp_10_trn_fu_389_p1));
    C1_y_addr8_fu_299_p2 <= std_logic_vector(unsigned(tmp_6_trn6_cast_fu_295_p1) + unsigned(C1_y_addr1_cast_reg_484));
    C1_y_addr9_fu_328_p2 <= std_logic_vector(signed(p_shl6_fu_312_p1) - signed(p_shl7_fu_324_p1));

    -- C1_y_address0 assign process. --
    C1_y_address0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st9_fsm_8, tmp_30_fu_398_p1, tmp_32_fu_464_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            C1_y_address0 <= tmp_32_fu_464_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            C1_y_address0 <= tmp_30_fu_398_p1(13 - 1 downto 0);
        else 
            C1_y_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    -- C1_y_address1 assign process. --
    C1_y_address1_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st14_fsm_13, tmp_31_fu_418_p1, tmp_33_fu_468_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            C1_y_address1 <= tmp_33_fu_468_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            C1_y_address1 <= tmp_31_fu_418_p1(13 - 1 downto 0);
        else 
            C1_y_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    -- C1_y_ce0 assign process. --
    C1_y_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            C1_y_ce0 <= ap_const_logic_1;
        else 
            C1_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- C1_y_ce1 assign process. --
    C1_y_ce1_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then 
            C1_y_ce1 <= ap_const_logic_1;
        else 
            C1_y_ce1 <= ap_const_logic_0;
        end if; 
    end process;

        S2_y_addr1_cast_fu_240_p1 <= std_logic_vector(resize(signed(S2_y_addr1_fu_234_p2),9));

    S2_y_addr1_fu_234_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_218_p1) - unsigned(p_shl3_cast_fu_230_p1));
    S2_y_addr2_fu_348_p2 <= std_logic_vector(unsigned(tmp_8_trn_cast_fu_344_p1) + unsigned(S2_y_addr1_cast_reg_490));
    S2_y_addr3_fu_377_p2 <= std_logic_vector(signed(p_shl8_fu_361_p1) - signed(p_shl9_fu_373_p1));
    S2_y_addr4_fu_447_p2 <= std_logic_vector(signed(S2_y_addr3_reg_510) + signed(tmp_18_trn_fu_443_p1));
    S2_y_address0 <= tmp_34_fu_472_p1(11 - 1 downto 0);

    -- S2_y_ce0 assign process. --
    S2_y_ce0_assign_proc : process(ap_sig_cseq_ST_st24_fsm_23)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
            S2_y_ce0 <= ap_const_logic_1;
        else 
            S2_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    S2_y_d0 <= grp_fu_145_p2;

    -- S2_y_we0 assign process. --
    S2_y_we0_assign_proc : process(ap_sig_cseq_ST_st24_fsm_23)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23))) then 
            S2_y_we0 <= ap_const_logic_1;
        else 
            S2_y_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_164_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_fu_164_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_164_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_fu_164_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_104 assign process. --
    ap_sig_bdd_104_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_104 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_121 assign process. --
    ap_sig_bdd_121_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_121 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_138 assign process. --
    ap_sig_bdd_138_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_138 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_165 assign process. --
    ap_sig_bdd_165_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_165 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_174 assign process. --
    ap_sig_bdd_174_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_174 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_193 assign process. --
    ap_sig_bdd_193_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_193 <= (ap_const_lv1_1 = ap_CS_fsm(23 downto 23));
    end process;


    -- ap_sig_bdd_212 assign process. --
    ap_sig_bdd_212_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_212 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_219 assign process. --
    ap_sig_bdd_219_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_219 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_226 assign process. --
    ap_sig_bdd_226_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_226 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    -- ap_sig_bdd_237 assign process. --
    ap_sig_bdd_237_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_237 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    -- ap_sig_bdd_42 assign process. --
    ap_sig_bdd_42_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_42 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_69 assign process. --
    ap_sig_bdd_69_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_69 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_76 assign process. --
    ap_sig_bdd_76_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_76 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_84 assign process. --
    ap_sig_bdd_84_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_84 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_94 assign process. --
    ap_sig_bdd_94_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_94 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_76)
    begin
        if (ap_sig_bdd_76) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_10 assign process. --
    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_bdd_219)
    begin
        if (ap_sig_bdd_219) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_13 assign process. --
    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_bdd_174)
    begin
        if (ap_sig_bdd_174) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st15_fsm_14 assign process. --
    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_bdd_84)
    begin
        if (ap_sig_bdd_84) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st16_fsm_15 assign process. --
    ap_sig_cseq_ST_st16_fsm_15_assign_proc : process(ap_sig_bdd_226)
    begin
        if (ap_sig_bdd_226) then 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_42)
    begin
        if (ap_sig_bdd_42) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st20_fsm_19 assign process. --
    ap_sig_cseq_ST_st20_fsm_19_assign_proc : process(ap_sig_bdd_94)
    begin
        if (ap_sig_bdd_94) then 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st21_fsm_20 assign process. --
    ap_sig_cseq_ST_st21_fsm_20_assign_proc : process(ap_sig_bdd_237)
    begin
        if (ap_sig_bdd_237) then 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st24_fsm_23 assign process. --
    ap_sig_cseq_ST_st24_fsm_23_assign_proc : process(ap_sig_bdd_193)
    begin
        if (ap_sig_bdd_193) then 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_104)
    begin
        if (ap_sig_bdd_104) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_121)
    begin
        if (ap_sig_bdd_121) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_138)
    begin
        if (ap_sig_bdd_138) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_69)
    begin
        if (ap_sig_bdd_69) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_212)
    begin
        if (ap_sig_bdd_212) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_165)
    begin
        if (ap_sig_bdd_165) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_164_p2 <= "1" when (i_reg_107 = ap_const_lv3_6) else "0";
    grp_fu_141_ce <= ap_const_logic_1;

    -- grp_fu_141_p0 assign process. --
    grp_fu_141_p0_assign_proc : process(reg_151, reg_158, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st16_fsm_15)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15))) then 
            grp_fu_141_p0 <= reg_158;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            grp_fu_141_p0 <= reg_151;
        else 
            grp_fu_141_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_141_p1 assign process. --
    grp_fu_141_p1_assign_proc : process(reg_151, C1_y_load_1_reg_553, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st16_fsm_15)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15))) then 
            grp_fu_141_p1 <= reg_151;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            grp_fu_141_p1 <= C1_y_load_1_reg_553;
        else 
            grp_fu_141_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_145_ce <= ap_const_logic_1;
    grp_fu_145_p0 <= reg_158;
    grp_fu_145_p1 <= ap_const_lv32_3E800000;
    i_1_fu_170_p2 <= std_logic_vector(unsigned(i_reg_107) + unsigned(ap_const_lv3_1));
    j_1_fu_458_p2 <= std_logic_vector(unsigned(j_reg_118) + unsigned(ap_const_lv5_2));
    k_1_fu_452_p2 <= std_logic_vector(unsigned(k_reg_130) + unsigned(ap_const_lv5_2));
    p_shl1_cast_fu_184_p1 <= std_logic_vector(resize(unsigned(tmp_fu_176_p3),9));
    p_shl2_cast_fu_196_p1 <= std_logic_vector(resize(unsigned(tmp_21_fu_188_p3),9));
    p_shl3_cast_fu_230_p1 <= std_logic_vector(resize(unsigned(tmp_23_fu_222_p3),8));
        p_shl4_fu_273_p1 <= std_logic_vector(resize(signed(tmp_24_fu_265_p3),32));

        p_shl5_fu_285_p1 <= std_logic_vector(resize(signed(tmp_25_fu_277_p3),32));

        p_shl6_fu_312_p1 <= std_logic_vector(resize(signed(tmp_26_fu_304_p3),32));

        p_shl7_fu_324_p1 <= std_logic_vector(resize(signed(tmp_27_fu_316_p3),32));

        p_shl8_fu_361_p1 <= std_logic_vector(resize(signed(tmp_29_fu_353_p3),32));

        p_shl9_fu_373_p1 <= std_logic_vector(resize(signed(tmp_35_fu_365_p3),32));

    p_shl_cast_fu_218_p1 <= std_logic_vector(resize(unsigned(tmp_22_fu_210_p3),8));
    tmp_10_trn_fu_389_p1 <= std_logic_vector(resize(unsigned(k_reg_130),32));
    tmp_11_fu_403_p2 <= (k_reg_130 or ap_const_lv5_1);
    tmp_12_trn_fu_409_p1 <= std_logic_vector(resize(unsigned(tmp_11_fu_403_p2),32));
    tmp_17_fu_433_p4 <= k_reg_130(4 downto 1);
    tmp_18_trn_fu_443_p1 <= std_logic_vector(resize(unsigned(tmp_17_fu_433_p4),32));
    tmp_21_fu_188_p3 <= (i_reg_107 & ap_const_lv2_0);
    tmp_22_fu_210_p3 <= (i_reg_107 & ap_const_lv4_0);
    tmp_23_fu_222_p3 <= (i_reg_107 & ap_const_lv1_0);
    tmp_24_fu_265_p3 <= (C1_y_addr2_fu_260_p2 & ap_const_lv5_0);
    tmp_25_fu_277_p3 <= (C1_y_addr2_fu_260_p2 & ap_const_lv2_0);
    tmp_26_fu_304_p3 <= (C1_y_addr8_fu_299_p2 & ap_const_lv5_0);
    tmp_27_fu_316_p3 <= (C1_y_addr8_fu_299_p2 & ap_const_lv2_0);
    tmp_28_fu_334_p4 <= j_reg_118(4 downto 1);
    tmp_29_fu_353_p3 <= (S2_y_addr2_fu_348_p2 & ap_const_lv4_0);
    tmp_30_fu_398_p1 <= std_logic_vector(resize(unsigned(C1_y_addr5_fu_393_p2),64));
    tmp_31_fu_418_p1 <= std_logic_vector(resize(unsigned(C1_y_addr6_fu_413_p2),64));
    tmp_32_fu_464_p1 <= std_logic_vector(resize(unsigned(C1_y_addr7_reg_528),64));
    tmp_33_fu_468_p1 <= std_logic_vector(resize(unsigned(C1_y_addr4_reg_533),64));
    tmp_34_fu_472_p1 <= std_logic_vector(resize(unsigned(S2_y_addr4_reg_538),64));
    tmp_35_fu_365_p3 <= (S2_y_addr2_fu_348_p2 & ap_const_lv1_0);
    tmp_4_trn_cast_fu_256_p1 <= std_logic_vector(resize(unsigned(j_reg_118),10));
    tmp_5_fu_250_p2 <= (j_reg_118 or ap_const_lv5_1);
    tmp_6_trn6_cast_fu_295_p1 <= std_logic_vector(resize(unsigned(tmp_5_fu_250_p2),10));
    tmp_8_trn_cast_fu_344_p1 <= std_logic_vector(resize(unsigned(tmp_28_fu_334_p4),9));
    tmp_9_fu_383_p2 <= "1" when (unsigned(k_reg_130) < unsigned(ap_const_lv5_1C)) else "0";
    tmp_fu_176_p3 <= (i_reg_107 & ap_const_lv5_0);
    tmp_s_fu_244_p2 <= "1" when (unsigned(j_reg_118) < unsigned(ap_const_lv5_1C)) else "0";
end behav;
