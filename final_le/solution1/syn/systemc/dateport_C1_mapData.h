// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __dateport_C1_mapData_H__
#define __dateport_C1_mapData_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct dateport_C1_mapData_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 150;
  static const unsigned AddressWidth = 8;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> we0;
sc_core::sc_in<sc_lv<DataWidth> > d0;
sc_core::sc_in <sc_lv<AddressWidth> > address1;
sc_core::sc_in <sc_logic> ce1;
sc_core::sc_out <sc_lv<DataWidth> > q1;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(dateport_C1_mapData_ram) {
        ram[0] = "0b00111011101110000000100110101101";
        ram[1] = "0b00111010101101001000111010110000";
        ram[2] = "0b00111100000100110011000100001101";
        ram[3] = "0b10111011110100000011010110110111";
        ram[4] = "0b00111011110010010000101100110001";
        ram[5] = "0b00111100000011001100001011110100";
        ram[6] = "0b00111100001110110110001011000010";
        ram[7] = "0b00111011000000010100010101111001";
        ram[8] = "0b00111011110001000001011100000001";
        ram[9] = "0b10111100111110011001011000100000";
        ram[10] = "0b00111001111111100111101111110100";
        ram[11] = "0b10111011011011101110110110001100";
        ram[12] = "0b00111011100110000001111100100110";
        ram[13] = "0b00111100001111010001110101110010";
        ram[14] = "0b00111100101000101000000011010100";
        ram[15] = "0b10111100000000011010010110000110";
        ram[16] = "0b00111011101110010000101110110000";
        ram[17] = "0b00111100001010110010000100000101";
        ram[18] = "0b00111100101101001001011110111001";
        ram[19] = "0b00111011111011110010110011011010";
        ram[20] = "0b00111100100001111100000101001101";
        ram[21] = "0b00111010111111100100001010000001";
        ram[22] = "0b10111100000001101011101111101011";
        ram[23] = "0b10111011101110011101011110111011";
        ram[24] = "0b00111100100011001100100110100000";
        ram[25] = "0b10111011001100100010010001011111";
        ram[26] = "0b00111100010000100000111000001110";
        ram[27] = "0b10111010101000011111000010001010";
        ram[28] = "0b00111100101011011010100001101111";
        ram[29] = "0b00111011010000001101101110100000";
        ram[30] = "0b10111001010001011111111000000010";
        ram[31] = "0b00111100101001001000111110001011";
        ram[32] = "0b10111011010110011111100110110000";
        ram[33] = "0b10111010000101010100011011101110";
        ram[34] = "0b10111011111110010111000111010110";
        ram[35] = "0b10111011001101011111111001111011";
        ram[36] = "0b10111001001110000101011110110101";
        ram[37] = "0b10111010111110100111001101110000";
        ram[38] = "0b10111010111010111011111000101101";
        ram[39] = "0b10111100001101110111111000011100";
        ram[40] = "0b00111100001100110001111101011100";
        ram[41] = "0b10111100100000110000000111000011";
        ram[42] = "0b00111100001100011010000010111110";
        ram[43] = "0b10111010111011101000100100111111";
        ram[44] = "0b00111100000000000101011101111110";
        ram[45] = "0b10111011011010000011110110111111";
        ram[46] = "0b00111011101010011000111001110111";
        ram[47] = "0b10111011001100101110000001111100";
        ram[48] = "0b10111011101000001001101001101001";
        ram[49] = "0b10111011110111001100001000100001";
        ram[50] = "0b00111011111101010010010010110110";
        ram[51] = "0b00111010100010000110010111100011";
        ram[52] = "0b10111011000111110000001001110010";
        ram[53] = "0b10111011110100111000101000000101";
        ram[54] = "0b10111100011011010011010000000100";
        ram[55] = "0b00111011110111101000001001111001";
        ram[56] = "0b10111100100100111011111011010001";
        ram[57] = "0b10111100100010000010011111001110";
        ram[58] = "0b00111010100011100110011101010111";
        ram[59] = "0b10111010000110000101001111001111";
        ram[60] = "0b10111100010000010110111001111111";
        ram[61] = "0b10111011010101001011110011100100";
        ram[62] = "0b00111100101001110110011101111110";
        ram[63] = "0b00111011011101110000001100000010";
        ram[64] = "0b00111100110110101100101001000000";
        ram[65] = "0b00111100000101101000001101101000";
        ram[66] = "0b00111010101110100011000100011011";
        ram[67] = "0b00111011110001110000011111000101";
        ram[68] = "0b10111011101000001001111010000000";
        ram[69] = "0b10111010000111010101001101111101";
        ram[70] = "0b00111100011010001001100111011111";
        ram[71] = "0b00111010101110001011111100001101";
        ram[72] = "0b10111100011001100111111111101111";
        ram[73] = "0b10111011111001001001000110111011";
        ram[74] = "0b00111100010001001100001001011001";
        ram[75] = "0b00111001101110101000111110011010";
        ram[76] = "0b10111011101011110011001110001101";
        ram[77] = "0b10111011111101101010100100100110";
        ram[78] = "0b10111011001001000011110001000110";
        ram[79] = "0b00111011011101101010111111110111";
        ram[80] = "0b10111011001100010010011000000110";
        ram[81] = "0b00111011011011110111110001011000";
        ram[82] = "0b10111100100110110110100110010011";
        ram[83] = "0b10111100001111111111011111010110";
        ram[84] = "0b00111100011111110111110110110110";
        ram[85] = "0b10111011010001000111101010000101";
        ram[86] = "0b00111011110100011110100100010100";
        ram[87] = "0b10111100000001111010000001011011";
        ram[88] = "0b10111100001000100111110010100011";
        ram[89] = "0b00111100010001101100100100100110";
        ram[90] = "0b10111100001111111110001011100110";
        ram[91] = "0b10111001110000100001011100100111";
        ram[92] = "0b10111011100111000001101100011110";
        ram[93] = "0b10111011000001101000100111010111";
        ram[94] = "0b00111100000110101100001110110110";
        ram[95] = "0b00111011101110100011000101010011";
        ram[96] = "0b00111100100000110001111001111000";
        ram[97] = "0b00111100001010011010000100111011";
        ram[98] = "0b10111100000111011100111100010011";
        ram[99] = "0b00111011110111011001011100010001";
        ram[100] = "0b10111100100000101000101010000100";
        ram[101] = "0b10111011110110111010101001100111";
        ram[102] = "0b00111100100100000011100001001110";
        ram[103] = "0b10111100000011100011100100100100";
        ram[104] = "0b00111000101001111010010100010000";
        ram[105] = "0b10111010110011010111000110110100";
        ram[106] = "0b10111011101100011001101010110100";
        ram[107] = "0b00111011010001110001100110011100";
        ram[108] = "0b00111100001000001100110100110000";
        ram[109] = "0b10111100010110011011011100101010";
        ram[110] = "0b10111100000000000110100011111010";
        ram[111] = "0b00111100101110110101100001000001";
        ram[112] = "0b10111100110010010011111111011010";
        ram[113] = "0b10111100100000010010100100100001";
        ram[114] = "0b10111010111100111111000010110111";
        ram[115] = "0b10111011110001100101101010001011";
        ram[116] = "0b10111100010101111001010011001111";
        ram[117] = "0b10111100010011100011111101001101";
        ram[118] = "0b00111011111011111011110001100010";
        ram[119] = "0b00111011001101110111100100011010";
        ram[120] = "0b10111100011000101001000010010101";
        ram[121] = "0b00111010111001101000000001110101";
        ram[122] = "0b10111100010101010111100010011110";
        ram[123] = "0b10111001110011000000101000101111";
        ram[124] = "0b00111100001000000110011101010000";
        ram[125] = "0b00111100001100110011001010101111";
        ram[126] = "0b10111100011101111110111000011111";
        ram[127] = "0b10111011111111100101110101110011";
        ram[128] = "0b00111011110111101000000000110110";
        ram[129] = "0b10111100001000101000011101101001";
        ram[130] = "0b10111100100010011000001000100010";
        ram[131] = "0b00111100001001000010000001011010";
        ram[132] = "0b00111100000111010110101101111101";
        ram[133] = "0b00111100101010101110110010100010";
        ram[134] = "0b00111011100110101100010010011010";
        ram[135] = "0b00111100000010011110001011110010";
        ram[136] = "0b10111100100100101001000001000010";
        ram[137] = "0b10111100011011010111011111001110";
        ram[138] = "0b00111011000000000111110000010011";
        ram[139] = "0b00111100000010010011111010011111";
        ram[140] = "0b00111100110001010110110110011000";
        ram[141] = "0b00111011010111111001000011101110";
        ram[142] = "0b10111100011111011000100010011001";
        ram[143] = "0b00111011010111110101111000101111";
        ram[144] = "0b00111011101001100110100110100100";
        ram[145] = "0b10111100001110001010110001101100";
        ram[146] = "0b10111010100011110000101111010101";
        ram[147] = "0b00111100011000100000011010001001";
        ram[148] = "0b00111011101101100011100100111100";
        ram[149] = "0b00111010111100001011000111110110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();


SC_METHOD(prc_write_1);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
        if (we0.read() == sc_dt::Log_1) 
        {
           if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
           {
              ram[address0.read().to_uint()] = d0.read(); 
              q0 = d0.read();
           }
           else
              q0 = sc_lv<DataWidth>();
        }
        else {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
        }
    }
}


void prc_write_1()
{
    if (ce1.read() == sc_dt::Log_1) 
    {
            if(address1.read().is_01() && address1.read().to_uint()<AddressRange)
              q1 = ram[address1.read().to_uint()];
            else
              q1 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(dateport_C1_mapData) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 150;
static const unsigned AddressWidth = 8;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> we0;
sc_core::sc_in<sc_lv<DataWidth> > d0;
sc_core::sc_in <sc_lv<AddressWidth> > address1;
sc_core::sc_in<sc_logic> ce1;
sc_core::sc_out <sc_lv<DataWidth> > q1;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


dateport_C1_mapData_ram* meminst;


SC_CTOR(dateport_C1_mapData) {
meminst = new dateport_C1_mapData_ram("dateport_C1_mapData_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);
meminst->we0(we0);
meminst->d0(d0);

meminst->address1(address1);
meminst->ce1(ce1);
meminst->q1(q1);

meminst->reset(reset);
meminst->clk(clk);
}
~dateport_C1_mapData() {
    delete meminst;
}


};//endmodule
#endif
