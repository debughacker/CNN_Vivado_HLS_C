// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dateport_DC5_layer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        C5_d_address0,
        C5_d_ce0,
        C5_d_we0,
        C5_d_d0,
        C5_d_q0,
        output_d_address0,
        output_d_ce0,
        output_d_q0,
        output_wei_address0,
        output_wei_ce0,
        output_wei_q0,
        C5_v_address0,
        C5_v_ce0,
        C5_v_q0,
        C5_bias_address0,
        C5_bias_ce0,
        C5_bias_q0
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 25'b1;
parameter    ap_ST_st2_fsm_1 = 25'b10;
parameter    ap_ST_st3_fsm_2 = 25'b100;
parameter    ap_ST_st4_fsm_3 = 25'b1000;
parameter    ap_ST_st5_fsm_4 = 25'b10000;
parameter    ap_ST_st6_fsm_5 = 25'b100000;
parameter    ap_ST_st7_fsm_6 = 25'b1000000;
parameter    ap_ST_st8_fsm_7 = 25'b10000000;
parameter    ap_ST_st9_fsm_8 = 25'b100000000;
parameter    ap_ST_st10_fsm_9 = 25'b1000000000;
parameter    ap_ST_st11_fsm_10 = 25'b10000000000;
parameter    ap_ST_st12_fsm_11 = 25'b100000000000;
parameter    ap_ST_st13_fsm_12 = 25'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 25'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 25'b100000000000000;
parameter    ap_ST_st16_fsm_15 = 25'b1000000000000000;
parameter    ap_ST_st17_fsm_16 = 25'b10000000000000000;
parameter    ap_ST_st18_fsm_17 = 25'b100000000000000000;
parameter    ap_ST_st19_fsm_18 = 25'b1000000000000000000;
parameter    ap_ST_st20_fsm_19 = 25'b10000000000000000000;
parameter    ap_ST_st21_fsm_20 = 25'b100000000000000000000;
parameter    ap_ST_st22_fsm_21 = 25'b1000000000000000000000;
parameter    ap_ST_st23_fsm_22 = 25'b10000000000000000000000;
parameter    ap_ST_st24_fsm_23 = 25'b100000000000000000000000;
parameter    ap_ST_st25_fsm_24 = 25'b1000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_15 = 32'b10101;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_14 = 32'b10100;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv32_18 = 32'b11000;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv5_1E = 5'b11110;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv4_A = 4'b1010;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv8_FF = 8'b11111111;
parameter    ap_const_lv23_0 = 23'b00000000000000000000000;
parameter    ap_const_lv32_3F800000 = 32'b111111100000000000000000000000;
parameter    ap_const_lv5_2 = 5'b10;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] C5_d_address0;
output   C5_d_ce0;
output   C5_d_we0;
output  [31:0] C5_d_d0;
input  [31:0] C5_d_q0;
output  [3:0] output_d_address0;
output   output_d_ce0;
input  [31:0] output_d_q0;
output  [8:0] output_wei_address0;
output   output_wei_ce0;
input  [31:0] output_wei_q0;
output  [4:0] C5_v_address0;
output   C5_v_ce0;
input  [31:0] C5_v_q0;
output  [4:0] C5_bias_address0;
output   C5_bias_ce0;
input  [31:0] C5_bias_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] C5_d_address0;
reg C5_d_ce0;
reg C5_d_we0;
reg[31:0] C5_d_d0;
reg output_d_ce0;
reg output_wei_ce0;
reg C5_v_ce0;
reg C5_bias_ce0;
(* fsm_encoding = "none" *) reg   [24:0] ap_CS_fsm = 25'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_43;
reg   [31:0] reg_170;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_bdd_86;
reg    ap_sig_cseq_ST_st22_fsm_21;
reg    ap_sig_bdd_93;
wire   [31:0] grp_fu_153_p2;
reg   [31:0] reg_176;
reg    ap_sig_cseq_ST_st13_fsm_12;
reg    ap_sig_bdd_103;
reg    ap_sig_cseq_ST_st20_fsm_19;
reg    ap_sig_bdd_110;
wire   [4:0] i_11_fu_188_p2;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_120;
wire   [4:0] i_2_fu_205_p2;
reg   [4:0] i_2_reg_338;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_129;
wire   [63:0] tmp_s_fu_211_p1;
reg   [63:0] tmp_s_reg_343;
wire   [0:0] exitcond1_fu_199_p2;
reg   [4:0] C5_d_addr_1_reg_349;
wire   [8:0] output_wei_addr1_fu_240_p2;
reg   [8:0] output_wei_addr1_reg_354;
wire   [3:0] j_8_fu_252_p2;
reg   [3:0] j_8_reg_362;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_148;
wire   [0:0] exitcond_fu_246_p2;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_169;
wire   [31:0] grp_fu_157_p2;
reg   [31:0] tmp_46_reg_397;
reg   [31:0] C5_v_load_reg_402;
reg    ap_sig_cseq_ST_st15_fsm_14;
reg    ap_sig_bdd_180;
reg   [31:0] C5_bias_load_reg_407;
wire   [0:0] tmp_39_fu_313_p2;
reg   [0:0] tmp_39_reg_412;
reg    ap_sig_cseq_ST_st21_fsm_20;
reg    ap_sig_bdd_190;
wire   [31:0] p_0_i_fu_319_p3;
reg   [4:0] i_reg_120;
wire   [0:0] exitcond2_fu_182_p2;
reg   [4:0] i_1_reg_131;
reg    ap_sig_cseq_ST_st25_fsm_24;
reg    ap_sig_bdd_210;
reg   [3:0] j_reg_142;
reg    ap_sig_cseq_ST_st14_fsm_13;
reg    ap_sig_bdd_221;
wire   [63:0] tmp_fu_194_p1;
wire   [63:0] tmp_45_fu_258_p1;
wire   [63:0] tmp_93_fu_272_p1;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_bdd_233;
reg   [31:0] grp_fu_153_p0;
reg   [31:0] grp_fu_153_p1;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_bdd_250;
reg    ap_sig_cseq_ST_st16_fsm_15;
reg    ap_sig_bdd_257;
reg   [31:0] grp_fu_157_p0;
reg   [31:0] grp_fu_157_p1;
wire   [31:0] tmp_38_fu_165_p0;
wire   [31:0] tmp_38_fu_165_p1;
wire   [7:0] tmp_91_fu_216_p3;
wire   [5:0] tmp_92_fu_228_p3;
wire   [8:0] p_shl3_cast_fu_236_p1;
wire   [8:0] p_shl_cast_fu_224_p1;
wire   [8:0] tmp_66_trn_cast_fu_263_p1;
wire   [8:0] output_wei_addr2_fu_267_p2;
wire   [31:0] temp_to_int_fu_277_p1;
wire   [7:0] tmp_35_fu_281_p4;
wire   [22:0] tmp_82_fu_291_p1;
wire   [0:0] notrhs_fu_301_p2;
wire   [0:0] notlhs_fu_295_p2;
wire   [0:0] tmp_37_fu_307_p2;
wire   [0:0] tmp_38_fu_165_p2;
wire    grp_fu_153_ce;
wire    grp_fu_157_ce;
wire   [4:0] tmp_38_fu_165_opcode;
reg   [24:0] ap_NS_fsm;


dateport_fadd_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dateport_fadd_32ns_32ns_32_5_full_dsp_U41(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_153_p0 ),
    .din1( grp_fu_153_p1 ),
    .ce( grp_fu_153_ce ),
    .dout( grp_fu_153_p2 )
);

dateport_fmul_32ns_32ns_32_4_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dateport_fmul_32ns_32ns_32_4_max_dsp_U42(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_157_p0 ),
    .din1( grp_fu_157_p1 ),
    .ce( grp_fu_157_ce ),
    .dout( grp_fu_157_p2 )
);

dateport_fcmp_32ns_32ns_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
dateport_fcmp_32ns_32ns_1_1_U43(
    .din0( tmp_38_fu_165_p0 ),
    .din1( tmp_38_fu_165_p1 ),
    .opcode( tmp_38_fu_165_opcode ),
    .dout( tmp_38_fu_165_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_lv1_0 == exitcond2_fu_182_p2))) begin
        i_1_reg_131 <= ap_const_lv5_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st25_fsm_24)) begin
        i_1_reg_131 <= i_2_reg_338;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (ap_const_lv1_0 == exitcond2_fu_182_p2))) begin
        i_reg_120 <= i_11_fu_188_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_120 <= ap_const_lv5_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (exitcond1_fu_199_p2 == ap_const_lv1_0))) begin
        j_reg_142 <= ap_const_lv4_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13)) begin
        j_reg_142 <= j_8_reg_362;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14)) begin
        C5_bias_load_reg_407 <= C5_bias_q0;
        C5_v_load_reg_402 <= C5_v_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (exitcond1_fu_199_p2 == ap_const_lv1_0))) begin
        C5_d_addr_1_reg_349 <= tmp_s_fu_211_p1;
        output_wei_addr1_reg_354[8 : 1] <= output_wei_addr1_fu_240_p2[8 : 1];
        tmp_s_reg_343[4 : 0] <= tmp_s_fu_211_p1[4 : 0];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        i_2_reg_338 <= i_2_fu_205_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        j_8_reg_362 <= j_8_fu_252_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) | (ap_const_logic_1 == ap_sig_cseq_ST_st22_fsm_21))) begin
        reg_170 <= C5_d_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12) | (ap_const_logic_1 == ap_sig_cseq_ST_st20_fsm_19))) begin
        reg_176 <= grp_fu_153_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st21_fsm_20)) begin
        tmp_39_reg_412 <= tmp_39_fu_313_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        tmp_46_reg_397 <= grp_fu_157_p2;
    end
end

/// C5_bias_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        C5_bias_ce0 = ap_const_logic_1;
    end else begin
        C5_bias_ce0 = ap_const_logic_0;
    end
end

/// C5_d_address0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or C5_d_addr_1_reg_349 or ap_sig_cseq_ST_st21_fsm_20 or ap_sig_cseq_ST_st25_fsm_24 or ap_sig_cseq_ST_st14_fsm_13 or tmp_fu_194_p1 or ap_sig_cseq_ST_st7_fsm_6)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        C5_d_address0 = tmp_fu_194_p1;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st21_fsm_20) | (ap_const_logic_1 == ap_sig_cseq_ST_st25_fsm_24) | (ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13) | (ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6))) begin
        C5_d_address0 = C5_d_addr_1_reg_349;
    end else begin
        C5_d_address0 = 'bx;
    end
end

/// C5_d_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st21_fsm_20 or ap_sig_cseq_ST_st25_fsm_24 or ap_sig_cseq_ST_st14_fsm_13 or ap_sig_cseq_ST_st7_fsm_6)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) | (ap_const_logic_1 == ap_sig_cseq_ST_st21_fsm_20) | (ap_const_logic_1 == ap_sig_cseq_ST_st25_fsm_24) | (ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13) | (ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6))) begin
        C5_d_ce0 = ap_const_logic_1;
    end else begin
        C5_d_ce0 = ap_const_logic_0;
    end
end

/// C5_d_d0 assign process. ///
always @ (reg_176 or ap_sig_cseq_ST_st2_fsm_1 or grp_fu_157_p2 or ap_sig_cseq_ST_st25_fsm_24 or ap_sig_cseq_ST_st14_fsm_13)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st25_fsm_24)) begin
        C5_d_d0 = grp_fu_157_p2;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13)) begin
        C5_d_d0 = reg_176;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        C5_d_d0 = ap_const_lv32_0;
    end else begin
        C5_d_d0 = 'bx;
    end
end

/// C5_d_we0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond2_fu_182_p2 or ap_sig_cseq_ST_st25_fsm_24 or ap_sig_cseq_ST_st14_fsm_13)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (ap_const_lv1_0 == exitcond2_fu_182_p2)) | (ap_const_logic_1 == ap_sig_cseq_ST_st25_fsm_24) | (ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13))) begin
        C5_d_we0 = ap_const_logic_1;
    end else begin
        C5_d_we0 = ap_const_logic_0;
    end
end

/// C5_v_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        C5_v_ce0 = ap_const_logic_1;
    end else begin
        C5_v_ce0 = ap_const_logic_0;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st3_fsm_2 or exitcond1_fu_199_p2)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(exitcond1_fu_199_p2 == ap_const_lv1_0)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2 or exitcond1_fu_199_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(exitcond1_fu_199_p2 == ap_const_lv1_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st13_fsm_12 assign process. ///
always @ (ap_sig_bdd_103)
begin
    if (ap_sig_bdd_103) begin
        ap_sig_cseq_ST_st13_fsm_12 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st13_fsm_12 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st14_fsm_13 assign process. ///
always @ (ap_sig_bdd_221)
begin
    if (ap_sig_bdd_221) begin
        ap_sig_cseq_ST_st14_fsm_13 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st14_fsm_13 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st15_fsm_14 assign process. ///
always @ (ap_sig_bdd_180)
begin
    if (ap_sig_bdd_180) begin
        ap_sig_cseq_ST_st15_fsm_14 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st15_fsm_14 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st16_fsm_15 assign process. ///
always @ (ap_sig_bdd_257)
begin
    if (ap_sig_bdd_257) begin
        ap_sig_cseq_ST_st16_fsm_15 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st16_fsm_15 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_43)
begin
    if (ap_sig_bdd_43) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st20_fsm_19 assign process. ///
always @ (ap_sig_bdd_110)
begin
    if (ap_sig_bdd_110) begin
        ap_sig_cseq_ST_st20_fsm_19 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st20_fsm_19 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st21_fsm_20 assign process. ///
always @ (ap_sig_bdd_190)
begin
    if (ap_sig_bdd_190) begin
        ap_sig_cseq_ST_st21_fsm_20 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st21_fsm_20 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st22_fsm_21 assign process. ///
always @ (ap_sig_bdd_93)
begin
    if (ap_sig_bdd_93) begin
        ap_sig_cseq_ST_st22_fsm_21 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st22_fsm_21 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st25_fsm_24 assign process. ///
always @ (ap_sig_bdd_210)
begin
    if (ap_sig_bdd_210) begin
        ap_sig_cseq_ST_st25_fsm_24 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st25_fsm_24 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_120)
begin
    if (ap_sig_bdd_120) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_129)
begin
    if (ap_sig_bdd_129) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_148)
begin
    if (ap_sig_bdd_148) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st5_fsm_4 assign process. ///
always @ (ap_sig_bdd_169)
begin
    if (ap_sig_bdd_169) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st7_fsm_6 assign process. ///
always @ (ap_sig_bdd_233)
begin
    if (ap_sig_bdd_233) begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st8_fsm_7 assign process. ///
always @ (ap_sig_bdd_86)
begin
    if (ap_sig_bdd_86) begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st9_fsm_8 assign process. ///
always @ (ap_sig_bdd_250)
begin
    if (ap_sig_bdd_250) begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_0;
    end
end

/// grp_fu_153_p0 assign process. ///
always @ (reg_170 or C5_v_load_reg_402 or ap_sig_cseq_ST_st9_fsm_8 or ap_sig_cseq_ST_st16_fsm_15)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15)) begin
        grp_fu_153_p0 = C5_v_load_reg_402;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        grp_fu_153_p0 = reg_170;
    end else begin
        grp_fu_153_p0 = 'bx;
    end
end

/// grp_fu_153_p1 assign process. ///
always @ (tmp_46_reg_397 or C5_bias_load_reg_407 or ap_sig_cseq_ST_st9_fsm_8 or ap_sig_cseq_ST_st16_fsm_15)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15)) begin
        grp_fu_153_p1 = C5_bias_load_reg_407;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        grp_fu_153_p1 = tmp_46_reg_397;
    end else begin
        grp_fu_153_p1 = 'bx;
    end
end

/// grp_fu_157_p0 assign process. ///
always @ (C5_d_q0 or output_d_q0 or ap_sig_cseq_ST_st22_fsm_21 or ap_sig_cseq_ST_st5_fsm_4)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st22_fsm_21)) begin
        grp_fu_157_p0 = C5_d_q0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        grp_fu_157_p0 = output_d_q0;
    end else begin
        grp_fu_157_p0 = 'bx;
    end
end

/// grp_fu_157_p1 assign process. ///
always @ (output_wei_q0 or ap_sig_cseq_ST_st22_fsm_21 or ap_sig_cseq_ST_st5_fsm_4 or p_0_i_fu_319_p3)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st22_fsm_21)) begin
        grp_fu_157_p1 = p_0_i_fu_319_p3;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        grp_fu_157_p1 = output_wei_q0;
    end else begin
        grp_fu_157_p1 = 'bx;
    end
end

/// output_d_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        output_d_ce0 = ap_const_logic_1;
    end else begin
        output_d_ce0 = ap_const_logic_0;
    end
end

/// output_wei_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        output_wei_ce0 = ap_const_logic_1;
    end else begin
        output_wei_ce0 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or exitcond1_fu_199_p2 or exitcond_fu_246_p2 or exitcond2_fu_182_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if ((ap_const_lv1_0 == exitcond2_fu_182_p2)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if (~(exitcond1_fu_199_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st4_fsm_3 : 
        begin
            if (~(ap_const_lv1_0 == exitcond_fu_246_p2)) begin
                ap_NS_fsm = ap_ST_st15_fsm_14;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : 
        begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : 
        begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : 
        begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : 
        begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st15_fsm_14 : 
        begin
            ap_NS_fsm = ap_ST_st16_fsm_15;
        end
        ap_ST_st16_fsm_15 : 
        begin
            ap_NS_fsm = ap_ST_st17_fsm_16;
        end
        ap_ST_st17_fsm_16 : 
        begin
            ap_NS_fsm = ap_ST_st18_fsm_17;
        end
        ap_ST_st18_fsm_17 : 
        begin
            ap_NS_fsm = ap_ST_st19_fsm_18;
        end
        ap_ST_st19_fsm_18 : 
        begin
            ap_NS_fsm = ap_ST_st20_fsm_19;
        end
        ap_ST_st20_fsm_19 : 
        begin
            ap_NS_fsm = ap_ST_st21_fsm_20;
        end
        ap_ST_st21_fsm_20 : 
        begin
            ap_NS_fsm = ap_ST_st22_fsm_21;
        end
        ap_ST_st22_fsm_21 : 
        begin
            ap_NS_fsm = ap_ST_st23_fsm_22;
        end
        ap_ST_st23_fsm_22 : 
        begin
            ap_NS_fsm = ap_ST_st24_fsm_23;
        end
        ap_ST_st24_fsm_23 : 
        begin
            ap_NS_fsm = ap_ST_st25_fsm_24;
        end
        ap_ST_st25_fsm_24 : 
        begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign C5_bias_address0 = tmp_s_reg_343;
assign C5_v_address0 = tmp_s_reg_343;

/// ap_sig_bdd_103 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_103 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_C]);
end

/// ap_sig_bdd_110 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_110 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_13]);
end

/// ap_sig_bdd_120 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_120 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_129 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_129 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_148 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_148 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_169 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_169 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

/// ap_sig_bdd_180 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_180 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_E]);
end

/// ap_sig_bdd_190 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_190 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_14]);
end

/// ap_sig_bdd_210 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_210 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_18]);
end

/// ap_sig_bdd_221 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_221 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_D]);
end

/// ap_sig_bdd_233 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_233 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end

/// ap_sig_bdd_250 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_250 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end

/// ap_sig_bdd_257 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_257 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_F]);
end

/// ap_sig_bdd_43 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_43 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_86 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_86 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end

/// ap_sig_bdd_93 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_93 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_15]);
end
assign exitcond1_fu_199_p2 = (i_1_reg_131 == ap_const_lv5_1E? 1'b1: 1'b0);
assign exitcond2_fu_182_p2 = (i_reg_120 == ap_const_lv5_1E? 1'b1: 1'b0);
assign exitcond_fu_246_p2 = (j_reg_142 == ap_const_lv4_A? 1'b1: 1'b0);
assign grp_fu_153_ce = ap_const_logic_1;
assign grp_fu_157_ce = ap_const_logic_1;
assign i_11_fu_188_p2 = (i_reg_120 + ap_const_lv5_1);
assign i_2_fu_205_p2 = (i_1_reg_131 + ap_const_lv5_1);
assign j_8_fu_252_p2 = (j_reg_142 + ap_const_lv4_1);
assign notlhs_fu_295_p2 = (tmp_35_fu_281_p4 != ap_const_lv8_FF? 1'b1: 1'b0);
assign notrhs_fu_301_p2 = (tmp_82_fu_291_p1 == ap_const_lv23_0? 1'b1: 1'b0);
assign output_d_address0 = tmp_45_fu_258_p1;
assign output_wei_addr1_fu_240_p2 = (p_shl3_cast_fu_236_p1 + p_shl_cast_fu_224_p1);
assign output_wei_addr2_fu_267_p2 = (tmp_66_trn_cast_fu_263_p1 + output_wei_addr1_reg_354);
assign output_wei_address0 = tmp_93_fu_272_p1;
assign p_0_i_fu_319_p3 = ((tmp_39_reg_412[0:0]===1'b1)? ap_const_lv32_3F800000: ap_const_lv32_0);
assign p_shl3_cast_fu_236_p1 = tmp_92_fu_228_p3;
assign p_shl_cast_fu_224_p1 = tmp_91_fu_216_p3;
assign temp_to_int_fu_277_p1 = reg_176;
assign tmp_35_fu_281_p4 = {{temp_to_int_fu_277_p1[ap_const_lv32_1E : ap_const_lv32_17]}};
assign tmp_37_fu_307_p2 = (notrhs_fu_301_p2 | notlhs_fu_295_p2);
assign tmp_38_fu_165_opcode = ap_const_lv5_2;
assign tmp_38_fu_165_p0 = reg_176;
assign tmp_38_fu_165_p1 = ap_const_lv32_0;
assign tmp_39_fu_313_p2 = (tmp_37_fu_307_p2 & tmp_38_fu_165_p2);
assign tmp_45_fu_258_p1 = j_reg_142;
assign tmp_66_trn_cast_fu_263_p1 = j_reg_142;
assign tmp_82_fu_291_p1 = temp_to_int_fu_277_p1[22:0];
assign tmp_91_fu_216_p3 = {{i_1_reg_131}, {ap_const_lv3_0}};
assign tmp_92_fu_228_p3 = {{i_1_reg_131}, {ap_const_lv1_0}};
assign tmp_93_fu_272_p1 = output_wei_addr2_fu_267_p2;
assign tmp_fu_194_p1 = i_reg_120;
assign tmp_s_fu_211_p1 = i_1_reg_131;
always @ (posedge ap_clk)
begin
    tmp_s_reg_343[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    output_wei_addr1_reg_354[0] <= 1'b0;
end



endmodule //dateport_DC5_layer

