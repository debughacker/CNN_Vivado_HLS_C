-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dateport_update_C5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    S4_y_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    S4_y_ce0 : OUT STD_LOGIC;
    S4_y_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    S4_y_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    S4_y_ce1 : OUT STD_LOGIC;
    S4_y_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    C5_dmapData_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    C5_dmapData_ce0 : OUT STD_LOGIC;
    C5_dmapData_we0 : OUT STD_LOGIC;
    C5_dmapData_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C5_dmapData_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C5_d_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    C5_d_ce0 : OUT STD_LOGIC;
    C5_d_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C5_dbias_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    C5_dbias_ce0 : OUT STD_LOGIC;
    C5_dbias_we0 : OUT STD_LOGIC;
    C5_dbias_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C5_dbias_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of dateport_update_C5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000100";
    constant ap_ST_pp0_stg0_fsm_3 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000001000";
    constant ap_ST_pp0_stg1_fsm_4 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000010000";
    constant ap_ST_pp0_stg2_fsm_5 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000100000";
    constant ap_ST_st11_fsm_6 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001000000";
    constant ap_ST_st12_fsm_7 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000010000000";
    constant ap_ST_st13_fsm_8 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000100000000";
    constant ap_ST_st14_fsm_9 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000001000000000";
    constant ap_ST_st15_fsm_10 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000010000000000";
    constant ap_ST_st16_fsm_11 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000100000000000";
    constant ap_ST_st17_fsm_12 : STD_LOGIC_VECTOR (23 downto 0) := "000000000001000000000000";
    constant ap_ST_st18_fsm_13 : STD_LOGIC_VECTOR (23 downto 0) := "000000000010000000000000";
    constant ap_ST_st19_fsm_14 : STD_LOGIC_VECTOR (23 downto 0) := "000000000100000000000000";
    constant ap_ST_st20_fsm_15 : STD_LOGIC_VECTOR (23 downto 0) := "000000001000000000000000";
    constant ap_ST_st21_fsm_16 : STD_LOGIC_VECTOR (23 downto 0) := "000000010000000000000000";
    constant ap_ST_st22_fsm_17 : STD_LOGIC_VECTOR (23 downto 0) := "000000100000000000000000";
    constant ap_ST_st23_fsm_18 : STD_LOGIC_VECTOR (23 downto 0) := "000001000000000000000000";
    constant ap_ST_st24_fsm_19 : STD_LOGIC_VECTOR (23 downto 0) := "000010000000000000000000";
    constant ap_ST_st25_fsm_20 : STD_LOGIC_VECTOR (23 downto 0) := "000100000000000000000000";
    constant ap_ST_st26_fsm_21 : STD_LOGIC_VECTOR (23 downto 0) := "001000000000000000000000";
    constant ap_ST_st27_fsm_22 : STD_LOGIC_VECTOR (23 downto 0) := "010000000000000000000000";
    constant ap_ST_st28_fsm_23 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv9_1E0 : STD_LOGIC_VECTOR (8 downto 0) := "111100000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_42 : BOOLEAN;
    signal k_reg_263 : STD_LOGIC_VECTOR (2 downto 0);
    signal reg_325 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_86 : BOOLEAN;
    signal ap_sig_cseq_ST_st22_fsm_17 : STD_LOGIC;
    signal ap_sig_bdd_93 : BOOLEAN;
    signal grp_fu_307_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_332 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st19_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_103 : BOOLEAN;
    signal ap_sig_cseq_ST_st27_fsm_22 : STD_LOGIC;
    signal ap_sig_bdd_110 : BOOLEAN;
    signal indvar_flatten_next_fu_344_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten_next_reg_732 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_120 : BOOLEAN;
    signal j_mid2_fu_356_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_mid2_reg_737 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_flatten_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_mid2_fu_370_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_mid2_reg_745 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_154_trn_cast1_fu_383_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_154_trn_cast1_reg_756 : STD_LOGIC_VECTOR (9 downto 0);
    signal S4_y_addr9_fu_400_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal S4_y_addr9_reg_761 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond4_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_reg_766 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_143 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond4_reg_766_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_16_fu_412_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_16_reg_770 : STD_LOGIC_VECTOR (2 downto 0);
    signal S4_y_addr2_fu_447_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal S4_y_addr2_reg_775 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr16_fu_470_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_addr16_reg_787 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_ppstg_p_addr16_reg_787_pp0_it1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_pp0_stg1_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_174 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg2_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_189 : BOOLEAN;
    signal C5_dmapData_addr3_fu_593_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C5_dmapData_addr3_reg_841 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_204 : BOOLEAN;
    signal k_17_fu_605_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_17_reg_849 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_213 : BOOLEAN;
    signal C5_dmapData_addr5_fu_632_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C5_dmapData_addr5_reg_854 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond2_fu_599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_addr_fu_654_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_addr_reg_859 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_16_fu_660_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal m_fu_671_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal m_reg_872 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_233 : BOOLEAN;
    signal C5_dmapData_addr_reg_877 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond1_fu_665_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal C5_dmapData_load_reg_887 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_248 : BOOLEAN;
    signal tmp_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_69_reg_892 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_19_fu_717_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_19_reg_900 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st21_fsm_16 : STD_LOGIC;
    signal ap_sig_bdd_259 : BOOLEAN;
    signal C5_dbias_addr_reg_905 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_fu_711_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal C5_dbias_load_reg_915 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_ce0 : STD_LOGIC;
    signal tmp_we0 : STD_LOGIC;
    signal tmp_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_ce1 : STD_LOGIC;
    signal tmp_we1 : STD_LOGIC;
    signal tmp_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_reg_230 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_reg_241 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_252 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_phi_fu_267_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_1_reg_274 : STD_LOGIC_VECTOR (2 downto 0);
    signal m_1_reg_285 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st20_fsm_15 : STD_LOGIC;
    signal ap_sig_bdd_313 : BOOLEAN;
    signal i_1_reg_296 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st28_fsm_23 : STD_LOGIC;
    signal ap_sig_bdd_322 : BOOLEAN;
    signal tmp_s_fu_378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_191_fu_453_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_194_fu_482_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_196_fu_492_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_198_fu_502_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_200_fu_512_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_193_fu_517_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_195_fu_526_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_197_fu_536_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_199_fu_546_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_201_fu_556_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_203_fu_686_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_204_fu_706_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_98_fu_723_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_311_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_317_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_307_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_307_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st15_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_380 : BOOLEAN;
    signal ap_sig_cseq_ST_st23_fsm_18 : STD_LOGIC;
    signal ap_sig_bdd_387 : BOOLEAN;
    signal grp_fu_311_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_311_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_317_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_317_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond16_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_fu_364_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_189_fu_389_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_154_trn_cast_fu_386_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_cast_fu_396_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_155_trn_cast_fu_422_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal S4_y_addr1_fu_426_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_133_fu_435_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal S4_y_addr10_cast_fu_431_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl43_fu_443_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_192_fu_458_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_155_trn_cast1_fu_418_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl55_cast_fu_466_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal S4_y_addr3_fu_476_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal S4_y_addr4_fu_487_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal S4_y_addr5_fu_497_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal S4_y_addr6_fu_507_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr14_fu_521_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_addr11_fu_531_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_addr8_fu_541_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_addr5_fu_551_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_190_fu_561_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal C5_dmapData_addr1_cast_fu_568_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal C5_dmapData_addr2_fu_572_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_132_fu_581_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl_fu_589_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal C5_dmapData_addr2_cast_fu_577_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_157_trn_fu_617_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal C5_dmapData_addr4_fu_621_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_134_fu_626_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_101_fu_611_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_202_fu_642_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl57_cast_fu_650_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_159_trn_cast_fu_638_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_160_trn_fu_677_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal C5_dmapData_addr6_fu_681_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_102_fu_691_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_162_trn_cast_fu_697_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_addr3_fu_701_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_307_ce : STD_LOGIC;
    signal grp_fu_311_ce : STD_LOGIC;
    signal grp_fu_317_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (23 downto 0);

    component dateport_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dateport_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dateport_update_C5_tmp IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    tmp_U : component dateport_update_C5_tmp
    generic map (
        DataWidth => 32,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tmp_address0,
        ce0 => tmp_ce0,
        we0 => tmp_we0,
        d0 => tmp_d0,
        address1 => tmp_address1,
        ce1 => tmp_ce1,
        we1 => tmp_we1,
        d1 => tmp_d1,
        q1 => tmp_q1);

    dateport_fadd_32ns_32ns_32_5_full_dsp_U93 : component dateport_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_307_p0,
        din1 => grp_fu_307_p1,
        ce => grp_fu_307_ce,
        dout => grp_fu_307_p2);

    dateport_fmul_32ns_32ns_32_4_max_dsp_U94 : component dateport_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_311_p0,
        din1 => grp_fu_311_p1,
        ce => grp_fu_311_ce,
        dout => grp_fu_311_p2);

    dateport_fmul_32ns_32ns_32_4_max_dsp_U95 : component dateport_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_317_p0,
        din1 => grp_fu_317_p1,
        ce => grp_fu_317_ce,
        dout => grp_fu_317_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and not((ap_const_lv1_0 = exitcond4_fu_406_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_0 = exitcond4_reg_766) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_5))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_5) and not((ap_const_lv1_0 = exitcond4_reg_766))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_5)) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                    ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_1_reg_296 assign process. --
    i_1_reg_296_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_flatten_fu_338_p2 = ap_const_lv1_0)))) then 
                i_1_reg_296 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_23)) then 
                i_1_reg_296 <= i_19_reg_900;
            end if; 
        end if;
    end process;

    -- i_reg_241 assign process. --
    i_reg_241_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_7) and not((ap_const_lv1_0 = exitcond2_fu_599_p2)))) then 
                i_reg_241 <= i_mid2_reg_745;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_241 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- indvar_flatten_reg_230 assign process. --
    indvar_flatten_reg_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_7) and not((ap_const_lv1_0 = exitcond2_fu_599_p2)))) then 
                indvar_flatten_reg_230 <= indvar_flatten_next_reg_732;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                indvar_flatten_reg_230 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    -- j_reg_252 assign process. --
    j_reg_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_7) and not((ap_const_lv1_0 = exitcond2_fu_599_p2)))) then 
                j_reg_252 <= j_16_fu_660_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                j_reg_252 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- k_1_reg_274 assign process. --
    k_1_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_8) and not((ap_const_lv1_0 = exitcond1_fu_665_p2)))) then 
                k_1_reg_274 <= k_17_reg_849;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_6)) then 
                k_1_reg_274 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- k_reg_263 assign process. --
    k_reg_263_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                k_reg_263 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = exitcond4_reg_766))) then 
                k_reg_263 <= k_16_reg_770;
            end if; 
        end if;
    end process;

    -- m_1_reg_285 assign process. --
    m_1_reg_285_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_7) and (ap_const_lv1_0 = exitcond2_fu_599_p2))) then 
                m_1_reg_285 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_15)) then 
                m_1_reg_285 <= m_reg_872;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_16) and (ap_const_lv1_0 = exitcond_fu_711_p2))) then
                C5_dbias_addr_reg_905 <= tmp_98_fu_723_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_17)) then
                C5_dbias_load_reg_915 <= C5_dbias_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_6)) then
                C5_dmapData_addr3_reg_841 <= C5_dmapData_addr3_fu_593_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_7) and (ap_const_lv1_0 = exitcond2_fu_599_p2))) then
                C5_dmapData_addr5_reg_854 <= C5_dmapData_addr5_fu_632_p2;
                p_addr_reg_859 <= p_addr_fu_654_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_8) and (ap_const_lv1_0 = exitcond1_fu_665_p2))) then
                C5_dmapData_addr_reg_877 <= tmp_203_fu_686_p1(14 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_9)) then
                C5_dmapData_load_reg_887 <= C5_dmapData_q0;
                empty_69_reg_892 <= tmp_q1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_lv1_0 = exitcond4_fu_406_p2))) then
                S4_y_addr2_reg_775 <= S4_y_addr2_fu_447_p2;
                p_addr16_reg_787 <= p_addr16_fu_470_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                S4_y_addr9_reg_761 <= S4_y_addr9_fu_400_p2;
                    tmp_154_trn_cast1_reg_756(4 downto 0) <= tmp_154_trn_cast1_fu_383_p1(4 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3)) then
                ap_reg_ppstg_exitcond4_reg_766_pp0_it1 <= exitcond4_reg_766;
                ap_reg_ppstg_p_addr16_reg_787_pp0_it1 <= p_addr16_reg_787;
                exitcond4_reg_766 <= exitcond4_fu_406_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_16)) then
                i_19_reg_900 <= i_19_fu_717_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_flatten_fu_338_p2 = ap_const_lv1_0))) then
                i_mid2_reg_745 <= i_mid2_fu_370_p3;
                j_mid2_reg_737 <= j_mid2_fu_356_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                indvar_flatten_next_reg_732 <= indvar_flatten_next_fu_344_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then
                k_16_reg_770 <= k_16_fu_412_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_7)) then
                k_17_reg_849 <= k_17_fu_605_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_8)) then
                m_reg_872 <= m_fu_671_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_17))) then
                reg_325 <= C5_d_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_22))) then
                reg_332 <= grp_fu_307_p2;
            end if;
        end if;
    end process;
    tmp_154_trn_cast1_reg_756(9 downto 5) <= "00000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_flatten_fu_338_p2, exitcond4_fu_406_p2, ap_sig_cseq_ST_pp0_stg0_fsm_3, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, exitcond2_fu_599_p2, exitcond1_fu_665_p2, exitcond_fu_711_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond_flatten_fu_338_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st21_fsm_16;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_3;
            when ap_ST_pp0_stg0_fsm_3 => 
                if ((not(((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond4_fu_406_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_4;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond4_fu_406_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then
                    ap_NS_fsm <= ap_ST_st11_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st11_fsm_6;
                end if;
            when ap_ST_pp0_stg1_fsm_4 => 
                ap_NS_fsm <= ap_ST_pp0_stg2_fsm_5;
            when ap_ST_pp0_stg2_fsm_5 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_3;
            when ap_ST_st11_fsm_6 => 
                ap_NS_fsm <= ap_ST_st12_fsm_7;
            when ap_ST_st12_fsm_7 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_599_p2))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st13_fsm_8;
                end if;
            when ap_ST_st13_fsm_8 => 
                if ((ap_const_lv1_0 = exitcond1_fu_665_p2)) then
                    ap_NS_fsm <= ap_ST_st14_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_st12_fsm_7;
                end if;
            when ap_ST_st14_fsm_9 => 
                ap_NS_fsm <= ap_ST_st15_fsm_10;
            when ap_ST_st15_fsm_10 => 
                ap_NS_fsm <= ap_ST_st16_fsm_11;
            when ap_ST_st16_fsm_11 => 
                ap_NS_fsm <= ap_ST_st17_fsm_12;
            when ap_ST_st17_fsm_12 => 
                ap_NS_fsm <= ap_ST_st18_fsm_13;
            when ap_ST_st18_fsm_13 => 
                ap_NS_fsm <= ap_ST_st19_fsm_14;
            when ap_ST_st19_fsm_14 => 
                ap_NS_fsm <= ap_ST_st20_fsm_15;
            when ap_ST_st20_fsm_15 => 
                ap_NS_fsm <= ap_ST_st13_fsm_8;
            when ap_ST_st21_fsm_16 => 
                if (not((ap_const_lv1_0 = exitcond_fu_711_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st22_fsm_17;
                end if;
            when ap_ST_st22_fsm_17 => 
                ap_NS_fsm <= ap_ST_st23_fsm_18;
            when ap_ST_st23_fsm_18 => 
                ap_NS_fsm <= ap_ST_st24_fsm_19;
            when ap_ST_st24_fsm_19 => 
                ap_NS_fsm <= ap_ST_st25_fsm_20;
            when ap_ST_st25_fsm_20 => 
                ap_NS_fsm <= ap_ST_st26_fsm_21;
            when ap_ST_st26_fsm_21 => 
                ap_NS_fsm <= ap_ST_st27_fsm_22;
            when ap_ST_st27_fsm_22 => 
                ap_NS_fsm <= ap_ST_st28_fsm_23;
            when ap_ST_st28_fsm_23 => 
                ap_NS_fsm <= ap_ST_st21_fsm_16;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    -- C5_d_address0 assign process. --
    C5_d_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st21_fsm_16, tmp_s_fu_378_p1, tmp_98_fu_723_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_16)) then 
            C5_d_address0 <= tmp_98_fu_723_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            C5_d_address0 <= tmp_s_fu_378_p1(5 - 1 downto 0);
        else 
            C5_d_address0 <= "XXXXX";
        end if; 
    end process;


    -- C5_d_ce0 assign process. --
    C5_d_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st21_fsm_16)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_16))) then 
            C5_d_ce0 <= ap_const_logic_1;
        else 
            C5_d_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- C5_dbias_address0 assign process. --
    C5_dbias_address0_assign_proc : process(ap_sig_cseq_ST_st21_fsm_16, C5_dbias_addr_reg_905, ap_sig_cseq_ST_st28_fsm_23, tmp_98_fu_723_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_23)) then 
            C5_dbias_address0 <= C5_dbias_addr_reg_905;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_16)) then 
            C5_dbias_address0 <= tmp_98_fu_723_p1(5 - 1 downto 0);
        else 
            C5_dbias_address0 <= "XXXXX";
        end if; 
    end process;


    -- C5_dbias_ce0 assign process. --
    C5_dbias_ce0_assign_proc : process(ap_sig_cseq_ST_st21_fsm_16, ap_sig_cseq_ST_st28_fsm_23)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_16) or (ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_23))) then 
            C5_dbias_ce0 <= ap_const_logic_1;
        else 
            C5_dbias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C5_dbias_d0 <= reg_332;

    -- C5_dbias_we0 assign process. --
    C5_dbias_we0_assign_proc : process(ap_sig_cseq_ST_st28_fsm_23)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_23))) then 
            C5_dbias_we0 <= ap_const_logic_1;
        else 
            C5_dbias_we0 <= ap_const_logic_0;
        end if; 
    end process;

    C5_dmapData_addr1_cast_fu_568_p1 <= std_logic_vector(resize(unsigned(tmp_190_fu_561_p3),10));
    C5_dmapData_addr2_cast_fu_577_p1 <= std_logic_vector(resize(unsigned(C5_dmapData_addr2_fu_572_p2),32));
    C5_dmapData_addr2_fu_572_p2 <= std_logic_vector(unsigned(tmp_154_trn_cast1_reg_756) + unsigned(C5_dmapData_addr1_cast_fu_568_p1));
    C5_dmapData_addr3_fu_593_p2 <= std_logic_vector(unsigned(p_shl_fu_589_p1) + unsigned(C5_dmapData_addr2_cast_fu_577_p1));
    C5_dmapData_addr4_fu_621_p2 <= std_logic_vector(unsigned(tmp_157_trn_fu_617_p1) + unsigned(C5_dmapData_addr3_reg_841));
    C5_dmapData_addr5_fu_632_p2 <= std_logic_vector(unsigned(tmp_134_fu_626_p2) + unsigned(C5_dmapData_addr4_fu_621_p2));
    C5_dmapData_addr6_fu_681_p2 <= std_logic_vector(unsigned(tmp_160_trn_fu_677_p1) + unsigned(C5_dmapData_addr5_reg_854));

    -- C5_dmapData_address0 assign process. --
    C5_dmapData_address0_assign_proc : process(ap_sig_cseq_ST_st13_fsm_8, C5_dmapData_addr_reg_877, ap_sig_cseq_ST_st20_fsm_15, tmp_203_fu_686_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_15)) then 
            C5_dmapData_address0 <= C5_dmapData_addr_reg_877;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_8)) then 
            C5_dmapData_address0 <= tmp_203_fu_686_p1(14 - 1 downto 0);
        else 
            C5_dmapData_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    -- C5_dmapData_ce0 assign process. --
    C5_dmapData_ce0_assign_proc : process(ap_sig_cseq_ST_st13_fsm_8, ap_sig_cseq_ST_st20_fsm_15)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_15))) then 
            C5_dmapData_ce0 <= ap_const_logic_1;
        else 
            C5_dmapData_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C5_dmapData_d0 <= reg_332;

    -- C5_dmapData_we0 assign process. --
    C5_dmapData_we0_assign_proc : process(ap_sig_cseq_ST_st20_fsm_15)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_15))) then 
            C5_dmapData_we0 <= ap_const_logic_1;
        else 
            C5_dmapData_we0 <= ap_const_logic_0;
        end if; 
    end process;

    S4_y_addr10_cast_fu_431_p1 <= std_logic_vector(resize(unsigned(S4_y_addr1_fu_426_p2),32));
    S4_y_addr1_fu_426_p2 <= std_logic_vector(unsigned(S4_y_addr9_reg_761) + unsigned(tmp_155_trn_cast_fu_422_p1));
    S4_y_addr2_fu_447_p2 <= std_logic_vector(unsigned(S4_y_addr10_cast_fu_431_p1) + unsigned(p_shl43_fu_443_p1));
    S4_y_addr3_fu_476_p2 <= std_logic_vector(unsigned(S4_y_addr2_fu_447_p2) + unsigned(ap_const_lv32_1));
    S4_y_addr4_fu_487_p2 <= std_logic_vector(unsigned(S4_y_addr2_reg_775) + unsigned(ap_const_lv32_2));
    S4_y_addr5_fu_497_p2 <= std_logic_vector(unsigned(S4_y_addr2_reg_775) + unsigned(ap_const_lv32_3));
    S4_y_addr6_fu_507_p2 <= std_logic_vector(unsigned(S4_y_addr2_reg_775) + unsigned(ap_const_lv32_4));
    S4_y_addr9_fu_400_p2 <= std_logic_vector(unsigned(tmp_154_trn_cast_fu_386_p1) + unsigned(p_shl_cast_fu_396_p1));

    -- S4_y_address0 assign process. --
    S4_y_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_3, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_4, ap_sig_cseq_ST_pp0_stg2_fsm_5, tmp_191_fu_453_p1, tmp_196_fu_492_p1, tmp_200_fu_512_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_5)) then 
                S4_y_address0 <= tmp_200_fu_512_p1(9 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_4)) then 
                S4_y_address0 <= tmp_196_fu_492_p1(9 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3)) then 
                S4_y_address0 <= tmp_191_fu_453_p1(9 - 1 downto 0);
            else 
                S4_y_address0 <= "XXXXXXXXX";
            end if;
        else 
            S4_y_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    -- S4_y_address1 assign process. --
    S4_y_address1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_3, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_4, tmp_194_fu_482_p1, tmp_198_fu_502_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_4)) then 
                S4_y_address1 <= tmp_198_fu_502_p1(9 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3)) then 
                S4_y_address1 <= tmp_194_fu_482_p1(9 - 1 downto 0);
            else 
                S4_y_address1 <= "XXXXXXXXX";
            end if;
        else 
            S4_y_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    -- S4_y_ce0 assign process. --
    S4_y_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_3, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_4, ap_sig_cseq_ST_pp0_stg2_fsm_5)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_5)))) then 
            S4_y_ce0 <= ap_const_logic_1;
        else 
            S4_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- S4_y_ce1 assign process. --
    S4_y_ce1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_3, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_4)))) then 
            S4_y_ce1 <= ap_const_logic_1;
        else 
            S4_y_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st21_fsm_16, exitcond_fu_711_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_16) and not((ap_const_lv1_0 = exitcond_fu_711_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st21_fsm_16, exitcond_fu_711_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_16) and not((ap_const_lv1_0 = exitcond_fu_711_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_103 assign process. --
    ap_sig_bdd_103_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_103 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_110 assign process. --
    ap_sig_bdd_110_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_110 <= (ap_const_lv1_1 = ap_CS_fsm(22 downto 22));
    end process;


    -- ap_sig_bdd_120 assign process. --
    ap_sig_bdd_120_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_120 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_143 assign process. --
    ap_sig_bdd_143_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_143 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_174 assign process. --
    ap_sig_bdd_174_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_174 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_189 assign process. --
    ap_sig_bdd_189_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_189 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_204 assign process. --
    ap_sig_bdd_204_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_204 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_213 assign process. --
    ap_sig_bdd_213_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_213 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_233 assign process. --
    ap_sig_bdd_233_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_233 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_248 assign process. --
    ap_sig_bdd_248_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_248 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_259 assign process. --
    ap_sig_bdd_259_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_259 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    -- ap_sig_bdd_313 assign process. --
    ap_sig_bdd_313_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_313 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    -- ap_sig_bdd_322 assign process. --
    ap_sig_bdd_322_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_322 <= (ap_const_lv1_1 = ap_CS_fsm(23 downto 23));
    end process;


    -- ap_sig_bdd_380 assign process. --
    ap_sig_bdd_380_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_380 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_387 assign process. --
    ap_sig_bdd_387_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_387 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    -- ap_sig_bdd_42 assign process. --
    ap_sig_bdd_42_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_42 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_86 assign process. --
    ap_sig_bdd_86_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_86 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_93 assign process. --
    ap_sig_bdd_93_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_93 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_3 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_3_assign_proc : process(ap_sig_bdd_143)
    begin
        if (ap_sig_bdd_143) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg1_fsm_4 assign process. --
    ap_sig_cseq_ST_pp0_stg1_fsm_4_assign_proc : process(ap_sig_bdd_174)
    begin
        if (ap_sig_bdd_174) then 
            ap_sig_cseq_ST_pp0_stg1_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg1_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg2_fsm_5 assign process. --
    ap_sig_cseq_ST_pp0_stg2_fsm_5_assign_proc : process(ap_sig_bdd_189)
    begin
        if (ap_sig_bdd_189) then 
            ap_sig_cseq_ST_pp0_stg2_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg2_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_6 assign process. --
    ap_sig_cseq_ST_st11_fsm_6_assign_proc : process(ap_sig_bdd_204)
    begin
        if (ap_sig_bdd_204) then 
            ap_sig_cseq_ST_st11_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st12_fsm_7 assign process. --
    ap_sig_cseq_ST_st12_fsm_7_assign_proc : process(ap_sig_bdd_213)
    begin
        if (ap_sig_bdd_213) then 
            ap_sig_cseq_ST_st12_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st13_fsm_8 assign process. --
    ap_sig_cseq_ST_st13_fsm_8_assign_proc : process(ap_sig_bdd_233)
    begin
        if (ap_sig_bdd_233) then 
            ap_sig_cseq_ST_st13_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_9 assign process. --
    ap_sig_cseq_ST_st14_fsm_9_assign_proc : process(ap_sig_bdd_248)
    begin
        if (ap_sig_bdd_248) then 
            ap_sig_cseq_ST_st14_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st15_fsm_10 assign process. --
    ap_sig_cseq_ST_st15_fsm_10_assign_proc : process(ap_sig_bdd_380)
    begin
        if (ap_sig_bdd_380) then 
            ap_sig_cseq_ST_st15_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st19_fsm_14 assign process. --
    ap_sig_cseq_ST_st19_fsm_14_assign_proc : process(ap_sig_bdd_103)
    begin
        if (ap_sig_bdd_103) then 
            ap_sig_cseq_ST_st19_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_42)
    begin
        if (ap_sig_bdd_42) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st20_fsm_15 assign process. --
    ap_sig_cseq_ST_st20_fsm_15_assign_proc : process(ap_sig_bdd_313)
    begin
        if (ap_sig_bdd_313) then 
            ap_sig_cseq_ST_st20_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st21_fsm_16 assign process. --
    ap_sig_cseq_ST_st21_fsm_16_assign_proc : process(ap_sig_bdd_259)
    begin
        if (ap_sig_bdd_259) then 
            ap_sig_cseq_ST_st21_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st22_fsm_17 assign process. --
    ap_sig_cseq_ST_st22_fsm_17_assign_proc : process(ap_sig_bdd_93)
    begin
        if (ap_sig_bdd_93) then 
            ap_sig_cseq_ST_st22_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st22_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st23_fsm_18 assign process. --
    ap_sig_cseq_ST_st23_fsm_18_assign_proc : process(ap_sig_bdd_387)
    begin
        if (ap_sig_bdd_387) then 
            ap_sig_cseq_ST_st23_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st23_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st27_fsm_22 assign process. --
    ap_sig_cseq_ST_st27_fsm_22_assign_proc : process(ap_sig_bdd_110)
    begin
        if (ap_sig_bdd_110) then 
            ap_sig_cseq_ST_st27_fsm_22 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st27_fsm_22 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st28_fsm_23 assign process. --
    ap_sig_cseq_ST_st28_fsm_23_assign_proc : process(ap_sig_bdd_322)
    begin
        if (ap_sig_bdd_322) then 
            ap_sig_cseq_ST_st28_fsm_23 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st28_fsm_23 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_120)
    begin
        if (ap_sig_bdd_120) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_86)
    begin
        if (ap_sig_bdd_86) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond16_fu_350_p2 <= "1" when (j_reg_252 = ap_const_lv5_10) else "0";
    exitcond1_fu_665_p2 <= "1" when (m_1_reg_285 = ap_const_lv3_5) else "0";
    exitcond2_fu_599_p2 <= "1" when (k_1_reg_274 = ap_const_lv3_5) else "0";
    exitcond4_fu_406_p2 <= "1" when (k_phi_fu_267_p4 = ap_const_lv3_5) else "0";
    exitcond_flatten_fu_338_p2 <= "1" when (indvar_flatten_reg_230 = ap_const_lv9_1E0) else "0";
    exitcond_fu_711_p2 <= "1" when (i_1_reg_296 = ap_const_lv5_1E) else "0";
    grp_fu_307_ce <= ap_const_logic_1;

    -- grp_fu_307_p0 assign process. --
    grp_fu_307_p0_assign_proc : process(C5_dmapData_load_reg_887, C5_dbias_load_reg_915, ap_sig_cseq_ST_st15_fsm_10, ap_sig_cseq_ST_st23_fsm_18)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_18)) then 
            grp_fu_307_p0 <= C5_dbias_load_reg_915;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_10)) then 
            grp_fu_307_p0 <= C5_dmapData_load_reg_887;
        else 
            grp_fu_307_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_307_p1 assign process. --
    grp_fu_307_p1_assign_proc : process(reg_325, empty_69_reg_892, ap_sig_cseq_ST_st15_fsm_10, ap_sig_cseq_ST_st23_fsm_18)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_18)) then 
            grp_fu_307_p1 <= reg_325;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_10)) then 
            grp_fu_307_p1 <= empty_69_reg_892;
        else 
            grp_fu_307_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_311_ce <= ap_const_logic_1;
    grp_fu_311_p0 <= S4_y_q0;
    grp_fu_311_p1 <= reg_325;
    grp_fu_317_ce <= ap_const_logic_1;
    grp_fu_317_p0 <= S4_y_q1;
    grp_fu_317_p1 <= reg_325;
    i_19_fu_717_p2 <= std_logic_vector(unsigned(i_1_reg_296) + unsigned(ap_const_lv5_1));
    i_4_fu_364_p2 <= std_logic_vector(unsigned(i_reg_241) + unsigned(ap_const_lv5_1));
    i_mid2_fu_370_p3 <= 
        i_4_fu_364_p2 when (exitcond16_fu_350_p2(0) = '1') else 
        i_reg_241;
    indvar_flatten_next_fu_344_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_230) + unsigned(ap_const_lv9_1));
    j_16_fu_660_p2 <= std_logic_vector(unsigned(j_mid2_reg_737) + unsigned(ap_const_lv5_1));
    j_mid2_fu_356_p3 <= 
        ap_const_lv5_0 when (exitcond16_fu_350_p2(0) = '1') else 
        j_reg_252;
    k_16_fu_412_p2 <= std_logic_vector(unsigned(k_phi_fu_267_p4) + unsigned(ap_const_lv3_1));
    k_17_fu_605_p2 <= std_logic_vector(unsigned(k_1_reg_274) + unsigned(ap_const_lv3_1));

    -- k_phi_fu_267_p4 assign process. --
    k_phi_fu_267_p4_assign_proc : process(k_reg_263, exitcond4_reg_766, ap_sig_cseq_ST_pp0_stg0_fsm_3, ap_reg_ppiten_pp0_it1, k_16_reg_770)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = exitcond4_reg_766))) then 
            k_phi_fu_267_p4 <= k_16_reg_770;
        else 
            k_phi_fu_267_p4 <= k_reg_263;
        end if; 
    end process;

    m_fu_671_p2 <= std_logic_vector(unsigned(m_1_reg_285) + unsigned(ap_const_lv3_1));
    p_addr11_fu_531_p2 <= std_logic_vector(unsigned(ap_reg_ppstg_p_addr16_reg_787_pp0_it1) + unsigned(ap_const_lv6_2));
    p_addr14_fu_521_p2 <= std_logic_vector(unsigned(ap_reg_ppstg_p_addr16_reg_787_pp0_it1) + unsigned(ap_const_lv6_1));
    p_addr16_fu_470_p2 <= std_logic_vector(unsigned(tmp_155_trn_cast1_fu_418_p1) + unsigned(p_shl55_cast_fu_466_p1));
    p_addr3_fu_701_p2 <= std_logic_vector(unsigned(tmp_162_trn_cast_fu_697_p1) + unsigned(p_addr_reg_859));
    p_addr5_fu_551_p2 <= std_logic_vector(unsigned(ap_reg_ppstg_p_addr16_reg_787_pp0_it1) + unsigned(ap_const_lv6_4));
    p_addr8_fu_541_p2 <= std_logic_vector(unsigned(ap_reg_ppstg_p_addr16_reg_787_pp0_it1) + unsigned(ap_const_lv6_3));
    p_addr_fu_654_p2 <= std_logic_vector(unsigned(p_shl57_cast_fu_650_p1) + unsigned(tmp_159_trn_cast_fu_638_p1));
    p_shl43_fu_443_p1 <= std_logic_vector(resize(unsigned(tmp_133_fu_435_p3),32));
    p_shl55_cast_fu_466_p1 <= std_logic_vector(resize(unsigned(tmp_192_fu_458_p3),6));
    p_shl57_cast_fu_650_p1 <= std_logic_vector(resize(unsigned(tmp_202_fu_642_p3),6));
    p_shl_cast_fu_396_p1 <= std_logic_vector(resize(unsigned(tmp_189_fu_389_p3),8));
    p_shl_fu_589_p1 <= std_logic_vector(resize(unsigned(tmp_132_fu_581_p3),32));
    tmp_101_fu_611_p2 <= std_logic_vector(signed(ap_const_lv3_4) - signed(k_1_reg_274));
    tmp_102_fu_691_p2 <= std_logic_vector(signed(ap_const_lv3_4) - signed(m_1_reg_285));
    tmp_132_fu_581_p3 <= (C5_dmapData_addr2_fu_572_p2 & ap_const_lv2_0);
    tmp_133_fu_435_p3 <= (S4_y_addr1_fu_426_p2 & ap_const_lv2_0);
    tmp_134_fu_626_p2 <= std_logic_vector(shift_left(unsigned(C5_dmapData_addr4_fu_621_p2),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    tmp_154_trn_cast1_fu_383_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_737),10));
    tmp_154_trn_cast_fu_386_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_737),8));
    tmp_155_trn_cast1_fu_418_p1 <= std_logic_vector(resize(unsigned(k_phi_fu_267_p4),6));
    tmp_155_trn_cast_fu_422_p1 <= std_logic_vector(resize(unsigned(k_phi_fu_267_p4),8));
    tmp_157_trn_fu_617_p1 <= std_logic_vector(resize(unsigned(k_1_reg_274),32));
    tmp_159_trn_cast_fu_638_p1 <= std_logic_vector(resize(unsigned(tmp_101_fu_611_p2),6));
    tmp_160_trn_fu_677_p1 <= std_logic_vector(resize(unsigned(m_1_reg_285),32));
    tmp_162_trn_cast_fu_697_p1 <= std_logic_vector(resize(unsigned(tmp_102_fu_691_p2),6));
    tmp_189_fu_389_p3 <= (j_mid2_reg_737 & ap_const_lv2_0);
    tmp_190_fu_561_p3 <= (i_mid2_reg_745 & ap_const_lv4_0);
    tmp_191_fu_453_p1 <= std_logic_vector(resize(unsigned(S4_y_addr2_fu_447_p2),64));
    tmp_192_fu_458_p3 <= (k_phi_fu_267_p4 & ap_const_lv2_0);
    tmp_193_fu_517_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_p_addr16_reg_787_pp0_it1),64));
    tmp_194_fu_482_p1 <= std_logic_vector(resize(unsigned(S4_y_addr3_fu_476_p2),64));
    tmp_195_fu_526_p1 <= std_logic_vector(resize(unsigned(p_addr14_fu_521_p2),64));
    tmp_196_fu_492_p1 <= std_logic_vector(resize(unsigned(S4_y_addr4_fu_487_p2),64));
    tmp_197_fu_536_p1 <= std_logic_vector(resize(unsigned(p_addr11_fu_531_p2),64));
    tmp_198_fu_502_p1 <= std_logic_vector(resize(unsigned(S4_y_addr5_fu_497_p2),64));
    tmp_199_fu_546_p1 <= std_logic_vector(resize(unsigned(p_addr8_fu_541_p2),64));
    tmp_200_fu_512_p1 <= std_logic_vector(resize(unsigned(S4_y_addr6_fu_507_p2),64));
    tmp_201_fu_556_p1 <= std_logic_vector(resize(unsigned(p_addr5_fu_551_p2),64));
    tmp_202_fu_642_p3 <= (tmp_101_fu_611_p2 & ap_const_lv2_0);
    tmp_203_fu_686_p1 <= std_logic_vector(resize(unsigned(C5_dmapData_addr6_fu_681_p2),64));
    tmp_204_fu_706_p1 <= std_logic_vector(resize(unsigned(p_addr3_fu_701_p2),64));
    tmp_98_fu_723_p1 <= std_logic_vector(resize(unsigned(i_1_reg_296),64));

    -- tmp_address0 assign process. --
    tmp_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_3, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_pp0_stg1_fsm_4, ap_sig_cseq_ST_pp0_stg2_fsm_5, tmp_193_fu_517_p1, tmp_199_fu_546_p1, tmp_201_fu_556_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) then 
            tmp_address0 <= tmp_201_fu_556_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_5))) then 
            tmp_address0 <= tmp_199_fu_546_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_4))) then 
            tmp_address0 <= tmp_193_fu_517_p1(5 - 1 downto 0);
        else 
            tmp_address0 <= "XXXXX";
        end if; 
    end process;


    -- tmp_address1 assign process. --
    tmp_address1_assign_proc : process(ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_4, ap_sig_cseq_ST_pp0_stg2_fsm_5, ap_sig_cseq_ST_st13_fsm_8, tmp_195_fu_526_p1, tmp_197_fu_536_p1, tmp_204_fu_706_p1)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_5))) then 
            tmp_address1 <= tmp_197_fu_536_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_4))) then 
            tmp_address1 <= tmp_195_fu_526_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_8)) then 
            tmp_address1 <= tmp_204_fu_706_p1(5 - 1 downto 0);
        else 
            tmp_address1 <= "XXXXX";
        end if; 
    end process;


    -- tmp_ce0 assign process. --
    tmp_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_3, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_pp0_stg1_fsm_4, ap_sig_cseq_ST_pp0_stg2_fsm_5)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_5)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) then 
            tmp_ce0 <= ap_const_logic_1;
        else 
            tmp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- tmp_ce1 assign process. --
    tmp_ce1_assign_proc : process(ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_4, ap_sig_cseq_ST_pp0_stg2_fsm_5, ap_sig_cseq_ST_st13_fsm_8)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_8) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_5)))) then 
            tmp_ce1 <= ap_const_logic_1;
        else 
            tmp_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- tmp_d0 assign process. --
    tmp_d0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_3, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_pp0_stg1_fsm_4, ap_sig_cseq_ST_pp0_stg2_fsm_5, grp_fu_311_p2, grp_fu_317_p2)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_5))) then 
            tmp_d0 <= grp_fu_317_p2;
        elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_4)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) then 
            tmp_d0 <= grp_fu_311_p2;
        else 
            tmp_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- tmp_d1 assign process. --
    tmp_d1_assign_proc : process(ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_4, ap_sig_cseq_ST_pp0_stg2_fsm_5, grp_fu_311_p2, grp_fu_317_p2)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_5)) then 
                tmp_d1 <= grp_fu_311_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_4)) then 
                tmp_d1 <= grp_fu_317_p2;
            else 
                tmp_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            tmp_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    tmp_s_fu_378_p1 <= std_logic_vector(resize(unsigned(i_mid2_fu_370_p3),64));

    -- tmp_we0 assign process. --
    tmp_we0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_3, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppstg_exitcond4_reg_766_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_4, ap_sig_cseq_ST_pp0_stg2_fsm_5)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_4) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond4_reg_766_pp0_it1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_5) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond4_reg_766_pp0_it1)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond4_reg_766_pp0_it1)))) then 
            tmp_we0 <= ap_const_logic_1;
        else 
            tmp_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- tmp_we1 assign process. --
    tmp_we1_assign_proc : process(ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond4_reg_766_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_4, ap_sig_cseq_ST_pp0_stg2_fsm_5)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_4) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond4_reg_766_pp0_it1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_5) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond4_reg_766_pp0_it1)))) then 
            tmp_we1 <= ap_const_logic_1;
        else 
            tmp_we1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
