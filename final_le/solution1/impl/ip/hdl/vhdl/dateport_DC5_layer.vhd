-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dateport_DC5_layer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    C5_d_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    C5_d_ce0 : OUT STD_LOGIC;
    C5_d_we0 : OUT STD_LOGIC;
    C5_d_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C5_d_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_d_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_d_ce0 : OUT STD_LOGIC;
    output_d_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_wei_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_wei_ce0 : OUT STD_LOGIC;
    output_wei_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C5_v_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    C5_v_ce0 : OUT STD_LOGIC;
    C5_v_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C5_bias_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    C5_bias_ce0 : OUT STD_LOGIC;
    C5_bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of dateport_DC5_layer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (24 downto 0) := "0000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (24 downto 0) := "0000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (24 downto 0) := "0000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (24 downto 0) := "0000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (24 downto 0) := "0000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (24 downto 0) := "0000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (24 downto 0) := "0001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (24 downto 0) := "0010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (24 downto 0) := "0100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_43 : BOOLEAN;
    signal reg_170 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_86 : BOOLEAN;
    signal ap_sig_cseq_ST_st22_fsm_21 : STD_LOGIC;
    signal ap_sig_bdd_93 : BOOLEAN;
    signal grp_fu_153_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_176 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_103 : BOOLEAN;
    signal ap_sig_cseq_ST_st20_fsm_19 : STD_LOGIC;
    signal ap_sig_bdd_110 : BOOLEAN;
    signal i_11_fu_188_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_120 : BOOLEAN;
    signal i_2_fu_205_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_338 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_129 : BOOLEAN;
    signal tmp_s_fu_211_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_343 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond1_fu_199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal C5_d_addr_1_reg_349 : STD_LOGIC_VECTOR (4 downto 0);
    signal output_wei_addr1_fu_240_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal output_wei_addr1_reg_354 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_8_fu_252_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_8_reg_362 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_148 : BOOLEAN;
    signal exitcond_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_169 : BOOLEAN;
    signal grp_fu_157_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_46_reg_397 : STD_LOGIC_VECTOR (31 downto 0);
    signal C5_v_load_reg_402 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_180 : BOOLEAN;
    signal C5_bias_load_reg_407 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_39_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_reg_412 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st21_fsm_20 : STD_LOGIC;
    signal ap_sig_bdd_190 : BOOLEAN;
    signal p_0_i_fu_319_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_120 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond2_fu_182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_131 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st25_fsm_24 : STD_LOGIC;
    signal ap_sig_bdd_210 : BOOLEAN;
    signal j_reg_142 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_221 : BOOLEAN;
    signal tmp_fu_194_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_45_fu_258_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_93_fu_272_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_233 : BOOLEAN;
    signal grp_fu_153_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_153_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_250 : BOOLEAN;
    signal ap_sig_cseq_ST_st16_fsm_15 : STD_LOGIC;
    signal ap_sig_bdd_257 : BOOLEAN;
    signal grp_fu_157_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_157_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_fu_165_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_fu_165_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_91_fu_216_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_92_fu_228_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl3_cast_fu_236_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_cast_fu_224_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_66_trn_cast_fu_263_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal output_wei_addr2_fu_267_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal temp_to_int_fu_277_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_fu_281_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_82_fu_291_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_153_ce : STD_LOGIC;
    signal grp_fu_157_ce : STD_LOGIC;
    signal tmp_38_fu_165_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (24 downto 0);

    component dateport_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dateport_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dateport_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    dateport_fadd_32ns_32ns_32_5_full_dsp_U41 : component dateport_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_153_p0,
        din1 => grp_fu_153_p1,
        ce => grp_fu_153_ce,
        dout => grp_fu_153_p2);

    dateport_fmul_32ns_32ns_32_4_max_dsp_U42 : component dateport_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_157_p0,
        din1 => grp_fu_157_p1,
        ce => grp_fu_157_ce,
        dout => grp_fu_157_p2);

    dateport_fcmp_32ns_32ns_1_1_U43 : component dateport_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => tmp_38_fu_165_p0,
        din1 => tmp_38_fu_165_p1,
        opcode => tmp_38_fu_165_opcode,
        dout => tmp_38_fu_165_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- i_1_reg_131 assign process. --
    i_1_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond2_fu_182_p2)))) then 
                i_1_reg_131 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then 
                i_1_reg_131 <= i_2_reg_338;
            end if; 
        end if;
    end process;

    -- i_reg_120 assign process. --
    i_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond2_fu_182_p2))) then 
                i_reg_120 <= i_11_fu_188_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_120 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- j_reg_142 assign process. --
    j_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond1_fu_199_p2 = ap_const_lv1_0))) then 
                j_reg_142 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
                j_reg_142 <= j_8_reg_362;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then
                C5_bias_load_reg_407 <= C5_bias_q0;
                C5_v_load_reg_402 <= C5_v_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond1_fu_199_p2 = ap_const_lv1_0))) then
                C5_d_addr_1_reg_349 <= tmp_s_fu_211_p1(5 - 1 downto 0);
                    output_wei_addr1_reg_354(8 downto 1) <= output_wei_addr1_fu_240_p2(8 downto 1);
                    tmp_s_reg_343(4 downto 0) <= tmp_s_fu_211_p1(4 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                i_2_reg_338 <= i_2_fu_205_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                j_8_reg_362 <= j_8_fu_252_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21))) then
                reg_170 <= C5_d_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19))) then
                reg_176 <= grp_fu_153_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then
                tmp_39_reg_412 <= tmp_39_fu_313_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then
                tmp_46_reg_397 <= grp_fu_157_p2;
            end if;
        end if;
    end process;
    tmp_s_reg_343(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    output_wei_addr1_reg_354(0) <= '0';

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond1_fu_199_p2, exitcond_fu_246_p2, exitcond2_fu_182_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((ap_const_lv1_0 = exitcond2_fu_182_p2)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((exitcond1_fu_199_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_lv1_0 = exitcond_fu_246_p2))) then
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    C5_bias_address0 <= tmp_s_reg_343(5 - 1 downto 0);

    -- C5_bias_ce0 assign process. --
    C5_bias_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            C5_bias_ce0 <= ap_const_logic_1;
        else 
            C5_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- C5_d_address0 assign process. --
    C5_d_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, C5_d_addr_1_reg_349, ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_st25_fsm_24, ap_sig_cseq_ST_st14_fsm_13, tmp_fu_194_p1, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            C5_d_address0 <= tmp_fu_194_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) or (ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            C5_d_address0 <= C5_d_addr_1_reg_349;
        else 
            C5_d_address0 <= "XXXXX";
        end if; 
    end process;


    -- C5_d_ce0 assign process. --
    C5_d_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_st25_fsm_24, ap_sig_cseq_ST_st14_fsm_13, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) or (ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            C5_d_ce0 <= ap_const_logic_1;
        else 
            C5_d_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- C5_d_d0 assign process. --
    C5_d_d0_assign_proc : process(reg_176, ap_sig_cseq_ST_st2_fsm_1, grp_fu_157_p2, ap_sig_cseq_ST_st25_fsm_24, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then 
            C5_d_d0 <= grp_fu_157_p2;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            C5_d_d0 <= reg_176;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            C5_d_d0 <= ap_const_lv32_0;
        else 
            C5_d_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- C5_d_we0 assign process. --
    C5_d_we0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond2_fu_182_p2, ap_sig_cseq_ST_st25_fsm_24, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond2_fu_182_p2)) or (ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then 
            C5_d_we0 <= ap_const_logic_1;
        else 
            C5_d_we0 <= ap_const_logic_0;
        end if; 
    end process;

    C5_v_address0 <= tmp_s_reg_343(5 - 1 downto 0);

    -- C5_v_ce0 assign process. --
    C5_v_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            C5_v_ce0 <= ap_const_logic_1;
        else 
            C5_v_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st3_fsm_2, exitcond1_fu_199_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((exitcond1_fu_199_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, exitcond1_fu_199_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((exitcond1_fu_199_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_103 assign process. --
    ap_sig_bdd_103_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_103 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_110 assign process. --
    ap_sig_bdd_110_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_110 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    -- ap_sig_bdd_120 assign process. --
    ap_sig_bdd_120_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_120 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_129 assign process. --
    ap_sig_bdd_129_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_129 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_148 assign process. --
    ap_sig_bdd_148_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_148 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_169 assign process. --
    ap_sig_bdd_169_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_169 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_180 assign process. --
    ap_sig_bdd_180_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_180 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_190 assign process. --
    ap_sig_bdd_190_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_190 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    -- ap_sig_bdd_210 assign process. --
    ap_sig_bdd_210_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_210 <= (ap_const_lv1_1 = ap_CS_fsm(24 downto 24));
    end process;


    -- ap_sig_bdd_221 assign process. --
    ap_sig_bdd_221_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_221 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_233 assign process. --
    ap_sig_bdd_233_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_233 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_250 assign process. --
    ap_sig_bdd_250_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_250 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_257 assign process. --
    ap_sig_bdd_257_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_257 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    -- ap_sig_bdd_43 assign process. --
    ap_sig_bdd_43_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_43 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_86 assign process. --
    ap_sig_bdd_86_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_86 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_93 assign process. --
    ap_sig_bdd_93_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_93 <= (ap_const_lv1_1 = ap_CS_fsm(21 downto 21));
    end process;


    -- ap_sig_cseq_ST_st13_fsm_12 assign process. --
    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_bdd_103)
    begin
        if (ap_sig_bdd_103) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_13 assign process. --
    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_bdd_221)
    begin
        if (ap_sig_bdd_221) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st15_fsm_14 assign process. --
    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_bdd_180)
    begin
        if (ap_sig_bdd_180) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st16_fsm_15 assign process. --
    ap_sig_cseq_ST_st16_fsm_15_assign_proc : process(ap_sig_bdd_257)
    begin
        if (ap_sig_bdd_257) then 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_43)
    begin
        if (ap_sig_bdd_43) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st20_fsm_19 assign process. --
    ap_sig_cseq_ST_st20_fsm_19_assign_proc : process(ap_sig_bdd_110)
    begin
        if (ap_sig_bdd_110) then 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st21_fsm_20 assign process. --
    ap_sig_cseq_ST_st21_fsm_20_assign_proc : process(ap_sig_bdd_190)
    begin
        if (ap_sig_bdd_190) then 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st22_fsm_21 assign process. --
    ap_sig_cseq_ST_st22_fsm_21_assign_proc : process(ap_sig_bdd_93)
    begin
        if (ap_sig_bdd_93) then 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st25_fsm_24 assign process. --
    ap_sig_cseq_ST_st25_fsm_24_assign_proc : process(ap_sig_bdd_210)
    begin
        if (ap_sig_bdd_210) then 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_120)
    begin
        if (ap_sig_bdd_120) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_129)
    begin
        if (ap_sig_bdd_129) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_148)
    begin
        if (ap_sig_bdd_148) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_169)
    begin
        if (ap_sig_bdd_169) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_233)
    begin
        if (ap_sig_bdd_233) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_86)
    begin
        if (ap_sig_bdd_86) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_250)
    begin
        if (ap_sig_bdd_250) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_199_p2 <= "1" when (i_1_reg_131 = ap_const_lv5_1E) else "0";
    exitcond2_fu_182_p2 <= "1" when (i_reg_120 = ap_const_lv5_1E) else "0";
    exitcond_fu_246_p2 <= "1" when (j_reg_142 = ap_const_lv4_A) else "0";
    grp_fu_153_ce <= ap_const_logic_1;

    -- grp_fu_153_p0 assign process. --
    grp_fu_153_p0_assign_proc : process(reg_170, C5_v_load_reg_402, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st16_fsm_15)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
            grp_fu_153_p0 <= C5_v_load_reg_402;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            grp_fu_153_p0 <= reg_170;
        else 
            grp_fu_153_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_153_p1 assign process. --
    grp_fu_153_p1_assign_proc : process(tmp_46_reg_397, C5_bias_load_reg_407, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st16_fsm_15)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
            grp_fu_153_p1 <= C5_bias_load_reg_407;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            grp_fu_153_p1 <= tmp_46_reg_397;
        else 
            grp_fu_153_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_157_ce <= ap_const_logic_1;

    -- grp_fu_157_p0 assign process. --
    grp_fu_157_p0_assign_proc : process(C5_d_q0, output_d_q0, ap_sig_cseq_ST_st22_fsm_21, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
            grp_fu_157_p0 <= C5_d_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            grp_fu_157_p0 <= output_d_q0;
        else 
            grp_fu_157_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_157_p1 assign process. --
    grp_fu_157_p1_assign_proc : process(output_wei_q0, ap_sig_cseq_ST_st22_fsm_21, ap_sig_cseq_ST_st5_fsm_4, p_0_i_fu_319_p3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
            grp_fu_157_p1 <= p_0_i_fu_319_p3;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            grp_fu_157_p1 <= output_wei_q0;
        else 
            grp_fu_157_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_11_fu_188_p2 <= std_logic_vector(unsigned(i_reg_120) + unsigned(ap_const_lv5_1));
    i_2_fu_205_p2 <= std_logic_vector(unsigned(i_1_reg_131) + unsigned(ap_const_lv5_1));
    j_8_fu_252_p2 <= std_logic_vector(unsigned(j_reg_142) + unsigned(ap_const_lv4_1));
    notlhs_fu_295_p2 <= "0" when (tmp_35_fu_281_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_301_p2 <= "1" when (tmp_82_fu_291_p1 = ap_const_lv23_0) else "0";
    output_d_address0 <= tmp_45_fu_258_p1(4 - 1 downto 0);

    -- output_d_ce0 assign process. --
    output_d_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            output_d_ce0 <= ap_const_logic_1;
        else 
            output_d_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_wei_addr1_fu_240_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_236_p1) + unsigned(p_shl_cast_fu_224_p1));
    output_wei_addr2_fu_267_p2 <= std_logic_vector(unsigned(tmp_66_trn_cast_fu_263_p1) + unsigned(output_wei_addr1_reg_354));
    output_wei_address0 <= tmp_93_fu_272_p1(9 - 1 downto 0);

    -- output_wei_ce0 assign process. --
    output_wei_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            output_wei_ce0 <= ap_const_logic_1;
        else 
            output_wei_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_0_i_fu_319_p3 <= 
        ap_const_lv32_3F800000 when (tmp_39_reg_412(0) = '1') else 
        ap_const_lv32_0;
    p_shl3_cast_fu_236_p1 <= std_logic_vector(resize(unsigned(tmp_92_fu_228_p3),9));
    p_shl_cast_fu_224_p1 <= std_logic_vector(resize(unsigned(tmp_91_fu_216_p3),9));
    temp_to_int_fu_277_p1 <= reg_176;
    tmp_35_fu_281_p4 <= temp_to_int_fu_277_p1(30 downto 23);
    tmp_37_fu_307_p2 <= (notrhs_fu_301_p2 or notlhs_fu_295_p2);
    tmp_38_fu_165_opcode <= ap_const_lv5_2;
    tmp_38_fu_165_p0 <= reg_176;
    tmp_38_fu_165_p1 <= ap_const_lv32_0;
    tmp_39_fu_313_p2 <= (tmp_37_fu_307_p2 and tmp_38_fu_165_p2);
    tmp_45_fu_258_p1 <= std_logic_vector(resize(unsigned(j_reg_142),64));
    tmp_66_trn_cast_fu_263_p1 <= std_logic_vector(resize(unsigned(j_reg_142),9));
    tmp_82_fu_291_p1 <= temp_to_int_fu_277_p1(23 - 1 downto 0);
    tmp_91_fu_216_p3 <= (i_1_reg_131 & ap_const_lv3_0);
    tmp_92_fu_228_p3 <= (i_1_reg_131 & ap_const_lv1_0);
    tmp_93_fu_272_p1 <= std_logic_vector(resize(unsigned(output_wei_addr2_fu_267_p2),64));
    tmp_fu_194_p1 <= std_logic_vector(resize(unsigned(i_reg_120),64));
    tmp_s_fu_211_p1 <= std_logic_vector(resize(unsigned(i_1_reg_131),64));
end behav;
