-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dateport_C1_conv is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inputimg_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    inputimg_ce0 : OUT STD_LOGIC;
    inputimg_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    inputimg_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    inputimg_ce1 : OUT STD_LOGIC;
    inputimg_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    C1_v_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    C1_v_ce0 : OUT STD_LOGIC;
    C1_v_we0 : OUT STD_LOGIC;
    C1_v_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C1_v_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C1_bias_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    C1_bias_ce0 : OUT STD_LOGIC;
    C1_bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C1_y_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    C1_y_ce0 : OUT STD_LOGIC;
    C1_y_we0 : OUT STD_LOGIC;
    C1_y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C1_mapData_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    C1_mapData_ce0 : OUT STD_LOGIC;
    C1_mapData_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C1_mapData_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    C1_mapData_ce1 : OUT STD_LOGIC;
    C1_mapData_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of dateport_C1_conv is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000010";
    constant ap_ST_pp1_stg0_fsm_2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000100";
    constant ap_ST_pp1_stg1_fsm_3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000001000";
    constant ap_ST_pp1_stg2_fsm_4 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000010000";
    constant ap_ST_pp1_stg3_fsm_5 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000100000";
    constant ap_ST_pp1_stg4_fsm_6 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000001000000";
    constant ap_ST_pp1_stg5_fsm_7 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010000000";
    constant ap_ST_pp1_stg6_fsm_8 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000100000000";
    constant ap_ST_pp1_stg7_fsm_9 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000001000000000";
    constant ap_ST_pp1_stg8_fsm_10 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000010000000000";
    constant ap_ST_pp1_stg9_fsm_11 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000100000000000";
    constant ap_ST_pp1_stg10_fsm_12 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000001000000000000";
    constant ap_ST_pp1_stg11_fsm_13 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000010000000000000";
    constant ap_ST_pp1_stg12_fsm_14 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000100000000000000";
    constant ap_ST_pp1_stg13_fsm_15 : STD_LOGIC_VECTOR (24 downto 0) := "0000000001000000000000000";
    constant ap_ST_pp1_stg14_fsm_16 : STD_LOGIC_VECTOR (24 downto 0) := "0000000010000000000000000";
    constant ap_ST_pp1_stg15_fsm_17 : STD_LOGIC_VECTOR (24 downto 0) := "0000000100000000000000000";
    constant ap_ST_pp1_stg16_fsm_18 : STD_LOGIC_VECTOR (24 downto 0) := "0000001000000000000000000";
    constant ap_ST_pp1_stg17_fsm_19 : STD_LOGIC_VECTOR (24 downto 0) := "0000010000000000000000000";
    constant ap_ST_pp1_stg18_fsm_20 : STD_LOGIC_VECTOR (24 downto 0) := "0000100000000000000000000";
    constant ap_ST_pp1_stg19_fsm_21 : STD_LOGIC_VECTOR (24 downto 0) := "0001000000000000000000000";
    constant ap_ST_pp1_stg20_fsm_22 : STD_LOGIC_VECTOR (24 downto 0) := "0010000000000000000000000";
    constant ap_ST_pp1_stg21_fsm_23 : STD_LOGIC_VECTOR (24 downto 0) := "0100000000000000000000000";
    constant ap_ST_st40_fsm_24 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_true : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv13_1260 : STD_LOGIC_VECTOR (12 downto 0) := "1001001100000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv10_310 : STD_LOGIC_VECTOR (9 downto 0) := "1100010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv15_5BE0 : STD_LOGIC_VECTOR (14 downto 0) := "101101111100000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv13_F50 : STD_LOGIC_VECTOR (12 downto 0) := "0111101010000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv8_8C : STD_LOGIC_VECTOR (7 downto 0) := "10001100";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_43 : BOOLEAN;
    signal indvar_flatten4_reg_263 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_reg_274 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_reg_286 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_reg_297 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_reg_309 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten5_reg_321 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_1_reg_332 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten6_reg_344 : STD_LOGIC_VECTOR (12 downto 0);
    signal j_1_reg_355 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten7_reg_366 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_1_reg_377 : STD_LOGIC_VECTOR (4 downto 0);
    signal m_reg_388 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_400_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_417 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp1_stg11_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_118 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal exitcond_flatten8_reg_1162 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp1_stg15_fsm_17 : STD_LOGIC;
    signal ap_sig_bdd_133 : BOOLEAN;
    signal ap_sig_cseq_ST_pp1_stg19_fsm_21 : STD_LOGIC;
    signal ap_sig_bdd_142 : BOOLEAN;
    signal ap_sig_cseq_ST_pp1_stg1_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_151 : BOOLEAN;
    signal ap_reg_ppstg_exitcond_flatten8_reg_1162_pp1_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp1_stg5_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_162 : BOOLEAN;
    signal exitcond_flatten_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_1114 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_173 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_flatten_reg_1114_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next4_fu_428_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond_flatten9_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten9_reg_1123 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_446_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_mid2_fu_484_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_mid2_reg_1136 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_mid2_fu_502_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_mid2_reg_1141 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_mid2_fu_510_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_mid2_reg_1146 : STD_LOGIC_VECTOR (4 downto 0);
    signal C1_v_addr9_fu_556_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal C1_v_addr9_reg_1151 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_2_fu_562_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_2_reg_1157 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_flatten8_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp1_stg0_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_213 : BOOLEAN;
    signal indvar_flatten_next5_fu_616_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal indvar_flatten_next5_reg_1166 : STD_LOGIC_VECTOR (14 downto 0);
    signal exitcond_flatten10_fu_622_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten10_reg_1171 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_mid_fu_628_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_1_mid_reg_1177 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_flatten23_mid_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten23_mid_reg_1183 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_1_mid_fu_672_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_1_mid_reg_1189 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond1_mid3_fu_692_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_mid3_reg_1195 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next6_fu_704_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten_next6_reg_1201 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten_next7_fu_718_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal indvar_flatten_next7_reg_1206 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_mid2_fu_732_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_mid2_reg_1211 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_i_1_mid2_reg_1211_pp1_it1 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_1_mid2_fu_744_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_1_mid2_reg_1218 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_1_mid2_fu_772_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_1_mid2_reg_1224 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_22_fu_788_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_22_reg_1233 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_322_fu_804_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_322_reg_1240 : STD_LOGIC_VECTOR (4 downto 0);
    signal C1_mapData_addr6_fu_839_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal C1_mapData_addr6_reg_1250 : STD_LOGIC_VECTOR (5 downto 0);
    signal m_1_fu_858_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal m_1_reg_1261 : STD_LOGIC_VECTOR (2 downto 0);
    signal ifzero_fu_864_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero_reg_1266 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ifzero_reg_1266_pp1_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal inputimg_load_reg_1270 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp1_stg2_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_269 : BOOLEAN;
    signal C1_mapData_addr7_fu_894_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C1_mapData_addr7_reg_1275 : STD_LOGIC_VECTOR (31 downto 0);
    signal inputimg_load_1_reg_1287 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp1_stg3_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_289 : BOOLEAN;
    signal C1_mapData_load_1_reg_1312 : STD_LOGIC_VECTOR (31 downto 0);
    signal inputimg_load_2_reg_1317 : STD_LOGIC_VECTOR (31 downto 0);
    signal inputimg_load_3_reg_1327 : STD_LOGIC_VECTOR (31 downto 0);
    signal C1_mapData_load_2_reg_1342 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp1_stg4_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_307 : BOOLEAN;
    signal C1_mapData_load_3_reg_1347 : STD_LOGIC_VECTOR (31 downto 0);
    signal inputimg_load_4_reg_1352 : STD_LOGIC_VECTOR (31 downto 0);
    signal C1_v_addr7_fu_1014_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal C1_v_addr7_reg_1362 : STD_LOGIC_VECTOR (9 downto 0);
    signal C1_mapData_load_4_reg_1368 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_323_fu_1057_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_323_reg_1373 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_pp1_stg6_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_325 : BOOLEAN;
    signal ap_reg_ppstg_tmp_323_reg_1373_pp1_it1 : STD_LOGIC_VECTOR (63 downto 0);
    signal C1_v_addr_12_reg_1378 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_407_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_reg_1383 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp1_stg7_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_340 : BOOLEAN;
    signal tmp_31_1_reg_1393 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_2_reg_1398 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp1_stg8_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_350 : BOOLEAN;
    signal tmp_31_3_reg_1403 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp1_stg9_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_359 : BOOLEAN;
    signal tmp_31_4_reg_1408 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp1_stg10_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_368 : BOOLEAN;
    signal C1_bias_load_reg_1418 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_reg_1423 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_84_fu_1101_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_84_reg_1430 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp1_stg21_fsm_23 : STD_LOGIC;
    signal ap_sig_bdd_397 : BOOLEAN;
    signal i_phi_fu_278_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_phi_fu_301_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_phi_fu_313_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten5_phi_fu_325_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_1_phi_fu_336_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten6_phi_fu_348_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal j_1_phi_fu_359_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten7_phi_fu_370_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_1_phi_fu_381_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal m_phi_fu_392_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_318_fu_605_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_325_fu_824_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_328_fu_853_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_326_fu_906_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_329_fu_917_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_331_fu_929_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_334_fu_941_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_332_fu_956_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_335_fu_966_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_337_fu_978_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_338_fu_983_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_1062_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_pp1_stg12_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_456 : BOOLEAN;
    signal grp_fu_400_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_400_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_407_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_407_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_83_fu_412_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_83_fu_412_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_op_fu_440_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_s_fu_478_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_mid_fu_454_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond5_mid_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_491_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_316_fu_522_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_317_fu_534_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl75_cast_fu_530_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl76_cast_fu_542_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal C1_v_addr8_fu_546_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal C1_v_addr8_cast_fu_552_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_14_trn_cast_fu_518_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_145_fu_571_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_146_fu_582_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl_fu_578_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl50_fu_589_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal C1_v_addr4_fu_593_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_trn_fu_568_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal C1_v_addr5_fu_599_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond19_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten1_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten11_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_319_fu_666_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten23_not_fu_680_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_mid_fu_648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten23_mid_fu_686_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten21_op_fu_698_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten33_op_fu_712_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_10_fu_726_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_3_fu_739_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_320_fu_755_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_147_fu_759_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_3_fu_750_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal m_mid2_fu_764_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_21_cast1_fu_784_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_324_fu_816_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_24_fu_794_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_trn_cast_fu_800_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl82_cast1_fu_812_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal C1_mapData_addr5_fu_833_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_25_trn_cast_fu_829_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_27_1_fu_778_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_327_fu_845_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_150_fu_883_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal C1_mapData_addr6_cast_fu_880_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl53_fu_890_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal C1_mapData_addr8_fu_900_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C1_mapData_addr9_fu_911_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_2_fu_870_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_330_fu_922_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_27_3_fu_875_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_333_fu_934_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal C1_mapData_addr2_fu_951_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C1_mapData_addr3_fu_961_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_4_fu_946_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_336_fu_971_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_321_fu_990_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl81_cast_fu_997_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl82_cast_fu_1001_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal C1_v_addr6_fu_1004_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal C1_v_addr12_cast_fu_1010_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_15_trn_cast_fu_987_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_148_fu_1023_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_149_fu_1034_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl51_fu_1030_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl52_fu_1041_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal C1_v_addr10_fu_1045_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_trn_fu_1020_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal C1_v_addr11_fu_1051_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_to_int_fu_1066_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_80_fu_1069_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_151_fu_1079_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_1089_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_1083_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_82_fu_1095_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_83_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_400_ce : STD_LOGIC;
    signal grp_fu_407_ce : STD_LOGIC;
    signal tmp_83_fu_412_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st40_fsm_24 : STD_LOGIC;
    signal ap_sig_bdd_945 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (24 downto 0);

    component dateport_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dateport_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dateport_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    dateport_fadd_32ns_32ns_32_5_full_dsp_U0 : component dateport_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_400_p0,
        din1 => grp_fu_400_p1,
        ce => grp_fu_400_ce,
        dout => grp_fu_400_p2);

    dateport_fmul_32ns_32ns_32_4_max_dsp_U1 : component dateport_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_407_p0,
        din1 => grp_fu_407_p1,
        ce => grp_fu_407_ce,
        dout => grp_fu_407_p2);

    dateport_fcmp_32ns_32ns_1_1_U2 : component dateport_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => tmp_83_fu_412_p0,
        din1 => tmp_83_fu_412_p1,
        opcode => tmp_83_fu_412_opcode,
        dout => tmp_83_fu_412_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_const_lv1_0 = exitcond_flatten_fu_422_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_lv1_0 = exitcond_flatten_fu_422_p2))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_const_lv1_0 = exitcond_flatten_fu_422_p2))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2) and not((ap_const_lv1_0 = exitcond_flatten8_fu_610_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond_flatten_fu_422_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((exitcond_flatten8_reg_1162 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg21_fsm_23))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond_flatten_fu_422_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg21_fsm_23) and not((exitcond_flatten8_reg_1162 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_1_reg_332 assign process. --
    i_1_reg_332_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond_flatten_fu_422_p2)))) then 
                i_1_reg_332 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_3) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten8_reg_1162_pp1_it1))) then 
                i_1_reg_332 <= i_1_mid2_reg_1211;
            end if; 
        end if;
    end process;

    -- i_reg_274 assign process. --
    i_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_1114_pp0_it1))) then 
                i_reg_274 <= i_mid2_reg_1136;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_274 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- indvar_flatten4_reg_263 assign process. --
    indvar_flatten4_reg_263_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_lv1_0 = exitcond_flatten_fu_422_p2))) then 
                indvar_flatten4_reg_263 <= indvar_flatten_next4_fu_428_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                indvar_flatten4_reg_263 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    -- indvar_flatten5_reg_321 assign process. --
    indvar_flatten5_reg_321_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond_flatten_fu_422_p2)))) then 
                indvar_flatten5_reg_321 <= ap_const_lv15_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (exitcond_flatten8_reg_1162 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2))) then 
                indvar_flatten5_reg_321 <= indvar_flatten_next5_reg_1166;
            end if; 
        end if;
    end process;

    -- indvar_flatten6_reg_344 assign process. --
    indvar_flatten6_reg_344_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond_flatten_fu_422_p2)))) then 
                indvar_flatten6_reg_344 <= ap_const_lv13_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (exitcond_flatten8_reg_1162 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2))) then 
                indvar_flatten6_reg_344 <= indvar_flatten_next7_reg_1206;
            end if; 
        end if;
    end process;

    -- indvar_flatten7_reg_366 assign process. --
    indvar_flatten7_reg_366_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond_flatten_fu_422_p2)))) then 
                indvar_flatten7_reg_366 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (exitcond_flatten8_reg_1162 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2))) then 
                indvar_flatten7_reg_366 <= indvar_flatten_next6_reg_1201;
            end if; 
        end if;
    end process;

    -- indvar_flatten_reg_286 assign process. --
    indvar_flatten_reg_286_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_lv1_0 = exitcond_flatten_fu_422_p2))) then 
                indvar_flatten_reg_286 <= indvar_flatten_next_fu_446_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                indvar_flatten_reg_286 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    -- j_1_reg_355 assign process. --
    j_1_reg_355_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond_flatten_fu_422_p2)))) then 
                j_1_reg_355 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (exitcond_flatten8_reg_1162 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2))) then 
                j_1_reg_355 <= j_1_mid2_reg_1218;
            end if; 
        end if;
    end process;

    -- j_reg_297 assign process. --
    j_reg_297_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_1114_pp0_it1))) then 
                j_reg_297 <= j_mid2_reg_1146;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                j_reg_297 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- k_1_reg_377 assign process. --
    k_1_reg_377_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond_flatten_fu_422_p2)))) then 
                k_1_reg_377 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (exitcond_flatten8_reg_1162 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2))) then 
                k_1_reg_377 <= k_1_mid2_reg_1224;
            end if; 
        end if;
    end process;

    -- k_reg_309 assign process. --
    k_reg_309_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_1114_pp0_it1))) then 
                k_reg_309 <= k_2_reg_1157;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                k_reg_309 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- m_reg_388 assign process. --
    m_reg_388_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond_flatten_fu_422_p2)))) then 
                m_reg_388 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (exitcond_flatten8_reg_1162 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2))) then 
                m_reg_388 <= m_1_reg_1261;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg5_fsm_7) and not((ap_const_lv1_0 = ap_reg_ppstg_ifzero_reg_1266_pp1_it1)))) then
                C1_bias_load_reg_1418 <= C1_bias_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten8_reg_1162 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_3))) then
                C1_mapData_addr6_reg_1250 <= C1_mapData_addr6_fu_839_p2;
                ifzero_reg_1266 <= ifzero_fu_864_p2;
                tmp_22_reg_1233 <= tmp_22_fu_788_p2;
                    tmp_322_reg_1240(4 downto 2) <= tmp_322_fu_804_p3(4 downto 2);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten8_reg_1162 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_4))) then
                C1_mapData_addr7_reg_1275 <= C1_mapData_addr7_fu_894_p2;
                inputimg_load_1_reg_1287 <= inputimg_q1;
                inputimg_load_reg_1270 <= inputimg_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten8_reg_1162 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_5))) then
                C1_mapData_load_1_reg_1312 <= C1_mapData_q1;
                inputimg_load_2_reg_1317 <= inputimg_q0;
                inputimg_load_3_reg_1327 <= inputimg_q1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten8_reg_1162 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg4_fsm_6))) then
                C1_mapData_load_2_reg_1342 <= C1_mapData_q0;
                C1_mapData_load_3_reg_1347 <= C1_mapData_q1;
                inputimg_load_4_reg_1352 <= inputimg_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten8_reg_1162 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg5_fsm_7))) then
                C1_mapData_load_4_reg_1368 <= C1_mapData_q0;
                C1_v_addr7_reg_1362 <= C1_v_addr7_fu_1014_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_lv1_0 = exitcond_flatten_reg_1114))) then
                C1_v_addr9_reg_1151 <= C1_v_addr9_fu_556_p2;
                k_mid2_reg_1141 <= k_mid2_fu_502_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten8_reg_1162 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg6_fsm_8))) then
                C1_v_addr_12_reg_1378 <= tmp_323_fu_1057_p1(13 - 1 downto 0);
                tmp_31_reg_1383 <= grp_fu_407_p2;
                    tmp_323_reg_1373(31 downto 0) <= tmp_323_fu_1057_p1(31 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2)) then
                ap_reg_ppstg_exitcond_flatten8_reg_1162_pp1_it1 <= exitcond_flatten8_reg_1162;
                exitcond_flatten8_reg_1162 <= exitcond_flatten8_fu_610_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then
                ap_reg_ppstg_exitcond_flatten_reg_1114_pp0_it1 <= exitcond_flatten_reg_1114;
                exitcond_flatten_reg_1114 <= exitcond_flatten_fu_422_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_3)) then
                ap_reg_ppstg_i_1_mid2_reg_1211_pp1_it1 <= i_1_mid2_reg_1211;
                ap_reg_ppstg_ifzero_reg_1266_pp1_it1 <= ifzero_reg_1266;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg6_fsm_8)) then
                    ap_reg_ppstg_tmp_323_reg_1373_pp1_it1(31 downto 0) <= tmp_323_reg_1373(31 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2) and (ap_const_lv1_0 = exitcond_flatten8_fu_610_p2))) then
                exitcond1_mid3_reg_1195 <= exitcond1_mid3_fu_692_p2;
                exitcond_flatten10_reg_1171 <= exitcond_flatten10_fu_622_p2;
                exitcond_flatten23_mid_reg_1183 <= exitcond_flatten23_mid_fu_660_p2;
                j_1_mid_reg_1177 <= j_1_mid_fu_628_p3;
                k_1_mid_reg_1189 <= k_1_mid_fu_672_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_lv1_0 = exitcond_flatten_fu_422_p2))) then
                exitcond_flatten9_reg_1123 <= exitcond_flatten9_fu_434_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (exitcond_flatten8_reg_1162 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_3))) then
                i_1_mid2_reg_1211 <= i_1_mid2_fu_732_p3;
                j_1_mid2_reg_1218 <= j_1_mid2_fu_744_p3;
                k_1_mid2_reg_1224 <= k_1_mid2_fu_772_p3;
                m_1_reg_1261 <= m_1_fu_858_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = exitcond_flatten_reg_1114))) then
                i_mid2_reg_1136 <= i_mid2_fu_484_p3;
                j_mid2_reg_1146 <= j_mid2_fu_510_p3;
                k_2_reg_1157 <= k_2_fu_562_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2))) then
                indvar_flatten_next5_reg_1166 <= indvar_flatten_next5_fu_616_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2) and (ap_const_lv1_0 = exitcond_flatten8_fu_610_p2))) then
                indvar_flatten_next6_reg_1201 <= indvar_flatten_next6_fu_704_p3;
                indvar_flatten_next7_reg_1206 <= indvar_flatten_next7_fu_718_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg11_fsm_13) and (exitcond_flatten8_reg_1162 = ap_const_lv1_0)) or ((exitcond_flatten8_reg_1162 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg15_fsm_17)) or ((exitcond_flatten8_reg_1162 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg19_fsm_21)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_3) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten8_reg_1162_pp1_it1)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten8_reg_1162_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg5_fsm_7)))) then
                reg_417 <= grp_fu_400_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg10_fsm_12) and not((ap_const_lv1_0 = ap_reg_ppstg_ifzero_reg_1266_pp1_it1)))) then
                temp_reg_1423 <= grp_fu_400_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten8_reg_1162 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg7_fsm_9))) then
                tmp_31_1_reg_1393 <= grp_fu_407_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten8_reg_1162 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg8_fsm_10))) then
                tmp_31_2_reg_1398 <= grp_fu_407_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten8_reg_1162 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg9_fsm_11))) then
                tmp_31_3_reg_1403 <= grp_fu_407_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten8_reg_1162 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg10_fsm_12))) then
                tmp_31_4_reg_1408 <= grp_fu_407_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg11_fsm_13) and not((ap_const_lv1_0 = ap_reg_ppstg_ifzero_reg_1266_pp1_it1)))) then
                tmp_84_reg_1430 <= tmp_84_fu_1101_p2;
            end if;
        end if;
    end process;
    tmp_322_reg_1240(1 downto 0) <= "00";
    tmp_323_reg_1373(63 downto 32) <= "00000000000000000000000000000000";
    ap_reg_ppstg_tmp_323_reg_1373_pp1_it1(63 downto 32) <= "00000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp1_it1, exitcond_flatten_fu_422_p2, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, exitcond_flatten8_fu_610_p2, ap_sig_cseq_ST_pp1_stg12_fsm_14)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond_flatten_fu_422_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond_flatten_fu_422_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_2;
                end if;
            when ap_ST_pp1_stg0_fsm_2 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_const_lv1_0 = exitcond_flatten8_fu_610_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg1_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st40_fsm_24;
                end if;
            when ap_ST_pp1_stg1_fsm_3 => 
                ap_NS_fsm <= ap_ST_pp1_stg2_fsm_4;
            when ap_ST_pp1_stg2_fsm_4 => 
                ap_NS_fsm <= ap_ST_pp1_stg3_fsm_5;
            when ap_ST_pp1_stg3_fsm_5 => 
                ap_NS_fsm <= ap_ST_pp1_stg4_fsm_6;
            when ap_ST_pp1_stg4_fsm_6 => 
                ap_NS_fsm <= ap_ST_pp1_stg5_fsm_7;
            when ap_ST_pp1_stg5_fsm_7 => 
                ap_NS_fsm <= ap_ST_pp1_stg6_fsm_8;
            when ap_ST_pp1_stg6_fsm_8 => 
                ap_NS_fsm <= ap_ST_pp1_stg7_fsm_9;
            when ap_ST_pp1_stg7_fsm_9 => 
                ap_NS_fsm <= ap_ST_pp1_stg8_fsm_10;
            when ap_ST_pp1_stg8_fsm_10 => 
                ap_NS_fsm <= ap_ST_pp1_stg9_fsm_11;
            when ap_ST_pp1_stg9_fsm_11 => 
                ap_NS_fsm <= ap_ST_pp1_stg10_fsm_12;
            when ap_ST_pp1_stg10_fsm_12 => 
                ap_NS_fsm <= ap_ST_pp1_stg11_fsm_13;
            when ap_ST_pp1_stg11_fsm_13 => 
                ap_NS_fsm <= ap_ST_pp1_stg12_fsm_14;
            when ap_ST_pp1_stg12_fsm_14 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg12_fsm_14) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it0))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg13_fsm_15;
                else
                    ap_NS_fsm <= ap_ST_st40_fsm_24;
                end if;
            when ap_ST_pp1_stg13_fsm_15 => 
                ap_NS_fsm <= ap_ST_pp1_stg14_fsm_16;
            when ap_ST_pp1_stg14_fsm_16 => 
                ap_NS_fsm <= ap_ST_pp1_stg15_fsm_17;
            when ap_ST_pp1_stg15_fsm_17 => 
                ap_NS_fsm <= ap_ST_pp1_stg16_fsm_18;
            when ap_ST_pp1_stg16_fsm_18 => 
                ap_NS_fsm <= ap_ST_pp1_stg17_fsm_19;
            when ap_ST_pp1_stg17_fsm_19 => 
                ap_NS_fsm <= ap_ST_pp1_stg18_fsm_20;
            when ap_ST_pp1_stg18_fsm_20 => 
                ap_NS_fsm <= ap_ST_pp1_stg19_fsm_21;
            when ap_ST_pp1_stg19_fsm_21 => 
                ap_NS_fsm <= ap_ST_pp1_stg20_fsm_22;
            when ap_ST_pp1_stg20_fsm_22 => 
                ap_NS_fsm <= ap_ST_pp1_stg21_fsm_23;
            when ap_ST_pp1_stg21_fsm_23 => 
                ap_NS_fsm <= ap_ST_pp1_stg0_fsm_2;
            when ap_ST_st40_fsm_24 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    C1_bias_address0 <= tmp_s_fu_1062_p1(3 - 1 downto 0);

    -- C1_bias_ce0 assign process. --
    C1_bias_ce0_assign_proc : process(ap_reg_ppiten_pp1_it1, ap_sig_cseq_ST_pp1_stg4_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg4_fsm_6))) then 
            C1_bias_ce0 <= ap_const_logic_1;
        else 
            C1_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C1_mapData_addr2_fu_951_p2 <= std_logic_vector(unsigned(C1_mapData_addr7_reg_1275) + unsigned(ap_const_lv32_2));
    C1_mapData_addr3_fu_961_p2 <= std_logic_vector(unsigned(C1_mapData_addr7_reg_1275) + unsigned(ap_const_lv32_1));
    C1_mapData_addr5_fu_833_p2 <= std_logic_vector(unsigned(tmp_trn_cast_fu_800_p1) + unsigned(p_shl82_cast1_fu_812_p1));
    C1_mapData_addr6_cast_fu_880_p1 <= std_logic_vector(resize(unsigned(C1_mapData_addr6_reg_1250),32));
    C1_mapData_addr6_fu_839_p2 <= std_logic_vector(unsigned(C1_mapData_addr5_fu_833_p2) + unsigned(tmp_25_trn_cast_fu_829_p1));
    C1_mapData_addr7_fu_894_p2 <= std_logic_vector(unsigned(C1_mapData_addr6_cast_fu_880_p1) + unsigned(p_shl53_fu_890_p1));
    C1_mapData_addr8_fu_900_p2 <= std_logic_vector(unsigned(C1_mapData_addr7_fu_894_p2) + unsigned(ap_const_lv32_4));
    C1_mapData_addr9_fu_911_p2 <= std_logic_vector(unsigned(C1_mapData_addr7_fu_894_p2) + unsigned(ap_const_lv32_3));

    -- C1_mapData_address0 assign process. --
    C1_mapData_address0_assign_proc : process(ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_pp1_stg2_fsm_4, ap_sig_cseq_ST_pp1_stg3_fsm_5, ap_sig_cseq_ST_pp1_stg4_fsm_6, tmp_326_fu_906_p1, tmp_332_fu_956_p1, tmp_338_fu_983_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg4_fsm_6)) then 
                C1_mapData_address0 <= tmp_338_fu_983_p1(8 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_5)) then 
                C1_mapData_address0 <= tmp_332_fu_956_p1(8 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_4)) then 
                C1_mapData_address0 <= tmp_326_fu_906_p1(8 - 1 downto 0);
            else 
                C1_mapData_address0 <= "XXXXXXXX";
            end if;
        else 
            C1_mapData_address0 <= "XXXXXXXX";
        end if; 
    end process;


    -- C1_mapData_address1 assign process. --
    C1_mapData_address1_assign_proc : process(ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_pp1_stg2_fsm_4, ap_sig_cseq_ST_pp1_stg3_fsm_5, tmp_329_fu_917_p1, tmp_335_fu_966_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_5)) then 
                C1_mapData_address1 <= tmp_335_fu_966_p1(8 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_4)) then 
                C1_mapData_address1 <= tmp_329_fu_917_p1(8 - 1 downto 0);
            else 
                C1_mapData_address1 <= "XXXXXXXX";
            end if;
        else 
            C1_mapData_address1 <= "XXXXXXXX";
        end if; 
    end process;


    -- C1_mapData_ce0 assign process. --
    C1_mapData_ce0_assign_proc : process(ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_pp1_stg2_fsm_4, ap_sig_cseq_ST_pp1_stg3_fsm_5, ap_sig_cseq_ST_pp1_stg4_fsm_6)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_5)) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg4_fsm_6)))) then 
            C1_mapData_ce0 <= ap_const_logic_1;
        else 
            C1_mapData_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- C1_mapData_ce1 assign process. --
    C1_mapData_ce1_assign_proc : process(ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_pp1_stg2_fsm_4, ap_sig_cseq_ST_pp1_stg3_fsm_5)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_5)))) then 
            C1_mapData_ce1 <= ap_const_logic_1;
        else 
            C1_mapData_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    C1_v_addr10_fu_1045_p2 <= std_logic_vector(signed(p_shl51_fu_1030_p1) - signed(p_shl52_fu_1041_p1));
    C1_v_addr11_fu_1051_p2 <= std_logic_vector(signed(C1_v_addr10_fu_1045_p2) + signed(tmp_18_trn_fu_1020_p1));
        C1_v_addr12_cast_fu_1010_p1 <= std_logic_vector(resize(signed(C1_v_addr6_fu_1004_p2),10));

    C1_v_addr4_fu_593_p2 <= std_logic_vector(signed(p_shl_fu_578_p1) - signed(p_shl50_fu_589_p1));
    C1_v_addr5_fu_599_p2 <= std_logic_vector(signed(C1_v_addr4_fu_593_p2) + signed(tmp_17_trn_fu_568_p1));
    C1_v_addr6_fu_1004_p2 <= std_logic_vector(unsigned(p_shl81_cast_fu_997_p1) - unsigned(p_shl82_cast_fu_1001_p1));
    C1_v_addr7_fu_1014_p2 <= std_logic_vector(signed(C1_v_addr12_cast_fu_1010_p1) + signed(tmp_15_trn_cast_fu_987_p1));
        C1_v_addr8_cast_fu_552_p1 <= std_logic_vector(resize(signed(C1_v_addr8_fu_546_p2),10));

    C1_v_addr8_fu_546_p2 <= std_logic_vector(unsigned(p_shl75_cast_fu_530_p1) - unsigned(p_shl76_cast_fu_542_p1));
    C1_v_addr9_fu_556_p2 <= std_logic_vector(signed(C1_v_addr8_cast_fu_552_p1) + signed(tmp_14_trn_cast_fu_518_p1));

    -- C1_v_address0 assign process. --
    C1_v_address0_assign_proc : process(ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp1_it1, ap_sig_cseq_ST_pp1_stg5_fsm_7, ap_reg_ppiten_pp0_it2, tmp_323_fu_1057_p1, ap_sig_cseq_ST_pp1_stg6_fsm_8, C1_v_addr_12_reg_1378, tmp_318_fu_605_p1)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg5_fsm_7))) then 
            C1_v_address0 <= C1_v_addr_12_reg_1378;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) then 
            C1_v_address0 <= tmp_318_fu_605_p1(13 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg6_fsm_8))) then 
            C1_v_address0 <= tmp_323_fu_1057_p1(13 - 1 downto 0);
        else 
            C1_v_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    -- C1_v_ce0 assign process. --
    C1_v_ce0_assign_proc : process(ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp1_it1, ap_sig_cseq_ST_pp1_stg5_fsm_7, ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_pp1_stg6_fsm_8)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg6_fsm_8)) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg5_fsm_7)))) then 
            C1_v_ce0 <= ap_const_logic_1;
        else 
            C1_v_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- C1_v_d0 assign process. --
    C1_v_d0_assign_proc : process(grp_fu_400_p2, ap_reg_ppiten_pp1_it1, ap_sig_cseq_ST_pp1_stg5_fsm_7, ap_reg_ppiten_pp0_it2)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg5_fsm_7))) then 
            C1_v_d0 <= grp_fu_400_p2;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) then 
            C1_v_d0 <= ap_const_lv32_0;
        else 
            C1_v_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- C1_v_we0 assign process. --
    C1_v_we0_assign_proc : process(ap_reg_ppiten_pp1_it1, ap_reg_ppstg_exitcond_flatten8_reg_1162_pp1_it1, ap_sig_cseq_ST_pp1_stg5_fsm_7, ap_reg_ppiten_pp0_it2, ap_reg_ppstg_exitcond_flatten_reg_1114_pp0_it1)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_1114_pp0_it1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten8_reg_1162_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg5_fsm_7)))) then 
            C1_v_we0 <= ap_const_logic_1;
        else 
            C1_v_we0 <= ap_const_logic_0;
        end if; 
    end process;

    C1_y_address0 <= ap_reg_ppstg_tmp_323_reg_1373_pp1_it1(13 - 1 downto 0);

    -- C1_y_ce0 assign process. --
    C1_y_ce0_assign_proc : process(ap_reg_ppiten_pp1_it1, ap_sig_cseq_ST_pp1_stg12_fsm_14)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg12_fsm_14))) then 
            C1_y_ce0 <= ap_const_logic_1;
        else 
            C1_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C1_y_d0 <= 
        temp_reg_1423 when (tmp_84_reg_1430(0) = '1') else 
        ap_const_lv32_0;

    -- C1_y_we0 assign process. --
    C1_y_we0_assign_proc : process(ap_reg_ppiten_pp1_it1, ap_reg_ppstg_ifzero_reg_1266_pp1_it1, ap_sig_cseq_ST_pp1_stg12_fsm_14)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_const_lv1_0 = ap_reg_ppstg_ifzero_reg_1266_pp1_it1)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg12_fsm_14)))) then 
            C1_y_we0 <= ap_const_logic_1;
        else 
            C1_y_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st40_fsm_24)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_24))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st40_fsm_24)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_24)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_118 assign process. --
    ap_sig_bdd_118_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_118 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_133 assign process. --
    ap_sig_bdd_133_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_133 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    -- ap_sig_bdd_142 assign process. --
    ap_sig_bdd_142_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_142 <= (ap_const_lv1_1 = ap_CS_fsm(21 downto 21));
    end process;


    -- ap_sig_bdd_151 assign process. --
    ap_sig_bdd_151_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_151 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_162 assign process. --
    ap_sig_bdd_162_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_162 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_173 assign process. --
    ap_sig_bdd_173_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_173 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_213 assign process. --
    ap_sig_bdd_213_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_213 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_269 assign process. --
    ap_sig_bdd_269_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_269 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_289 assign process. --
    ap_sig_bdd_289_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_289 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_307 assign process. --
    ap_sig_bdd_307_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_307 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_325 assign process. --
    ap_sig_bdd_325_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_325 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_340 assign process. --
    ap_sig_bdd_340_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_340 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_350 assign process. --
    ap_sig_bdd_350_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_350 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_359 assign process. --
    ap_sig_bdd_359_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_359 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_368 assign process. --
    ap_sig_bdd_368_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_368 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_397 assign process. --
    ap_sig_bdd_397_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_397 <= (ap_const_lv1_1 = ap_CS_fsm(23 downto 23));
    end process;


    -- ap_sig_bdd_43 assign process. --
    ap_sig_bdd_43_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_43 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_456 assign process. --
    ap_sig_bdd_456_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_456 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_945 assign process. --
    ap_sig_bdd_945_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_945 <= (ap_const_lv1_1 = ap_CS_fsm(24 downto 24));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_173)
    begin
        if (ap_sig_bdd_173) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg0_fsm_2 assign process. --
    ap_sig_cseq_ST_pp1_stg0_fsm_2_assign_proc : process(ap_sig_bdd_213)
    begin
        if (ap_sig_bdd_213) then 
            ap_sig_cseq_ST_pp1_stg0_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg0_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg10_fsm_12 assign process. --
    ap_sig_cseq_ST_pp1_stg10_fsm_12_assign_proc : process(ap_sig_bdd_368)
    begin
        if (ap_sig_bdd_368) then 
            ap_sig_cseq_ST_pp1_stg10_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg10_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg11_fsm_13 assign process. --
    ap_sig_cseq_ST_pp1_stg11_fsm_13_assign_proc : process(ap_sig_bdd_118)
    begin
        if (ap_sig_bdd_118) then 
            ap_sig_cseq_ST_pp1_stg11_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg11_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg12_fsm_14 assign process. --
    ap_sig_cseq_ST_pp1_stg12_fsm_14_assign_proc : process(ap_sig_bdd_456)
    begin
        if (ap_sig_bdd_456) then 
            ap_sig_cseq_ST_pp1_stg12_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg12_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg15_fsm_17 assign process. --
    ap_sig_cseq_ST_pp1_stg15_fsm_17_assign_proc : process(ap_sig_bdd_133)
    begin
        if (ap_sig_bdd_133) then 
            ap_sig_cseq_ST_pp1_stg15_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg15_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg19_fsm_21 assign process. --
    ap_sig_cseq_ST_pp1_stg19_fsm_21_assign_proc : process(ap_sig_bdd_142)
    begin
        if (ap_sig_bdd_142) then 
            ap_sig_cseq_ST_pp1_stg19_fsm_21 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg19_fsm_21 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg1_fsm_3 assign process. --
    ap_sig_cseq_ST_pp1_stg1_fsm_3_assign_proc : process(ap_sig_bdd_151)
    begin
        if (ap_sig_bdd_151) then 
            ap_sig_cseq_ST_pp1_stg1_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg1_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg21_fsm_23 assign process. --
    ap_sig_cseq_ST_pp1_stg21_fsm_23_assign_proc : process(ap_sig_bdd_397)
    begin
        if (ap_sig_bdd_397) then 
            ap_sig_cseq_ST_pp1_stg21_fsm_23 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg21_fsm_23 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg2_fsm_4 assign process. --
    ap_sig_cseq_ST_pp1_stg2_fsm_4_assign_proc : process(ap_sig_bdd_269)
    begin
        if (ap_sig_bdd_269) then 
            ap_sig_cseq_ST_pp1_stg2_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg2_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg3_fsm_5 assign process. --
    ap_sig_cseq_ST_pp1_stg3_fsm_5_assign_proc : process(ap_sig_bdd_289)
    begin
        if (ap_sig_bdd_289) then 
            ap_sig_cseq_ST_pp1_stg3_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg3_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg4_fsm_6 assign process. --
    ap_sig_cseq_ST_pp1_stg4_fsm_6_assign_proc : process(ap_sig_bdd_307)
    begin
        if (ap_sig_bdd_307) then 
            ap_sig_cseq_ST_pp1_stg4_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg4_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg5_fsm_7 assign process. --
    ap_sig_cseq_ST_pp1_stg5_fsm_7_assign_proc : process(ap_sig_bdd_162)
    begin
        if (ap_sig_bdd_162) then 
            ap_sig_cseq_ST_pp1_stg5_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg5_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg6_fsm_8 assign process. --
    ap_sig_cseq_ST_pp1_stg6_fsm_8_assign_proc : process(ap_sig_bdd_325)
    begin
        if (ap_sig_bdd_325) then 
            ap_sig_cseq_ST_pp1_stg6_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg6_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg7_fsm_9 assign process. --
    ap_sig_cseq_ST_pp1_stg7_fsm_9_assign_proc : process(ap_sig_bdd_340)
    begin
        if (ap_sig_bdd_340) then 
            ap_sig_cseq_ST_pp1_stg7_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg7_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg8_fsm_10 assign process. --
    ap_sig_cseq_ST_pp1_stg8_fsm_10_assign_proc : process(ap_sig_bdd_350)
    begin
        if (ap_sig_bdd_350) then 
            ap_sig_cseq_ST_pp1_stg8_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg8_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg9_fsm_11 assign process. --
    ap_sig_cseq_ST_pp1_stg9_fsm_11_assign_proc : process(ap_sig_bdd_359)
    begin
        if (ap_sig_bdd_359) then 
            ap_sig_cseq_ST_pp1_stg9_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg9_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_43)
    begin
        if (ap_sig_bdd_43) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st40_fsm_24 assign process. --
    ap_sig_cseq_ST_st40_fsm_24_assign_proc : process(ap_sig_bdd_945)
    begin
        if (ap_sig_bdd_945) then 
            ap_sig_cseq_ST_st40_fsm_24 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st40_fsm_24 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond19_fu_642_p2 <= "1" when (m_phi_fu_392_p4 = ap_const_lv3_5) else "0";
    exitcond1_mid3_fu_692_p2 <= (exitcond1_mid_fu_648_p2 and not_exitcond_flatten23_mid_fu_686_p2);
    exitcond1_mid_fu_648_p2 <= (exitcond19_fu_642_p2 and not_exitcond_flatten1_fu_636_p2);
    exitcond5_mid_fu_472_p2 <= (exitcond_fu_466_p2 and not_exitcond_flatten_fu_461_p2);
    exitcond_flatten10_fu_622_p2 <= "1" when (indvar_flatten6_phi_fu_348_p4 = ap_const_lv13_F50) else "0";
    exitcond_flatten11_fu_654_p2 <= "1" when (indvar_flatten7_phi_fu_370_p4 = ap_const_lv8_8C) else "0";
    exitcond_flatten23_mid_fu_660_p2 <= (exitcond_flatten11_fu_654_p2 and not_exitcond_flatten1_fu_636_p2);
    exitcond_flatten23_not_fu_680_p2 <= (exitcond_flatten11_fu_654_p2 xor ap_const_lv1_1);
    exitcond_flatten8_fu_610_p2 <= "1" when (indvar_flatten5_phi_fu_325_p4 = ap_const_lv15_5BE0) else "0";
    exitcond_flatten9_fu_434_p2 <= "1" when (indvar_flatten_reg_286 = ap_const_lv10_310) else "0";
    exitcond_flatten_fu_422_p2 <= "1" when (indvar_flatten4_reg_263 = ap_const_lv13_1260) else "0";
    exitcond_fu_466_p2 <= "1" when (k_phi_fu_313_p4 = ap_const_lv5_1C) else "0";
    grp_fu_400_ce <= ap_const_logic_1;

    -- grp_fu_400_p0 assign process. --
    grp_fu_400_p0_assign_proc : process(C1_v_q0, grp_fu_400_p2, reg_417, ap_sig_cseq_ST_pp1_stg11_fsm_13, ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp1_it1, ap_sig_cseq_ST_pp1_stg15_fsm_17, ap_sig_cseq_ST_pp1_stg19_fsm_21, ap_sig_cseq_ST_pp1_stg1_fsm_3, ap_sig_cseq_ST_pp1_stg6_fsm_8, ap_sig_cseq_ST_pp1_stg7_fsm_9)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg6_fsm_8))) then 
            grp_fu_400_p0 <= reg_417;
        elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_3)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg11_fsm_13) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg15_fsm_17)) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg19_fsm_21)))) then 
            grp_fu_400_p0 <= grp_fu_400_p2;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg7_fsm_9))) then 
            grp_fu_400_p0 <= C1_v_q0;
        else 
            grp_fu_400_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_400_p1 assign process. --
    grp_fu_400_p1_assign_proc : process(ap_sig_cseq_ST_pp1_stg11_fsm_13, ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp1_it1, ap_sig_cseq_ST_pp1_stg15_fsm_17, ap_sig_cseq_ST_pp1_stg19_fsm_21, ap_sig_cseq_ST_pp1_stg1_fsm_3, ap_sig_cseq_ST_pp1_stg6_fsm_8, tmp_31_reg_1383, ap_sig_cseq_ST_pp1_stg7_fsm_9, tmp_31_1_reg_1393, tmp_31_2_reg_1398, tmp_31_3_reg_1403, tmp_31_4_reg_1408, C1_bias_load_reg_1418)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg6_fsm_8))) then 
            grp_fu_400_p1 <= C1_bias_load_reg_1418;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_3))) then 
            grp_fu_400_p1 <= tmp_31_4_reg_1408;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg19_fsm_21))) then 
            grp_fu_400_p1 <= tmp_31_3_reg_1403;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg15_fsm_17))) then 
            grp_fu_400_p1 <= tmp_31_2_reg_1398;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg11_fsm_13) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) then 
            grp_fu_400_p1 <= tmp_31_1_reg_1393;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg7_fsm_9))) then 
            grp_fu_400_p1 <= tmp_31_reg_1383;
        else 
            grp_fu_400_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_407_ce <= ap_const_logic_1;

    -- grp_fu_407_p0 assign process. --
    grp_fu_407_p0_assign_proc : process(ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_pp1_stg5_fsm_7, inputimg_load_reg_1270, inputimg_load_1_reg_1287, ap_sig_cseq_ST_pp1_stg3_fsm_5, inputimg_load_2_reg_1317, inputimg_load_3_reg_1327, ap_sig_cseq_ST_pp1_stg4_fsm_6, inputimg_load_4_reg_1352, ap_sig_cseq_ST_pp1_stg6_fsm_8, ap_sig_cseq_ST_pp1_stg7_fsm_9)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg7_fsm_9)) then 
                grp_fu_407_p0 <= inputimg_load_4_reg_1352;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg6_fsm_8)) then 
                grp_fu_407_p0 <= inputimg_load_3_reg_1327;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg5_fsm_7)) then 
                grp_fu_407_p0 <= inputimg_load_2_reg_1317;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg4_fsm_6)) then 
                grp_fu_407_p0 <= inputimg_load_1_reg_1287;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_5)) then 
                grp_fu_407_p0 <= inputimg_load_reg_1270;
            else 
                grp_fu_407_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_407_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_407_p1 assign process. --
    grp_fu_407_p1_assign_proc : process(C1_mapData_q0, ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_pp1_stg5_fsm_7, ap_sig_cseq_ST_pp1_stg3_fsm_5, C1_mapData_load_1_reg_1312, C1_mapData_load_2_reg_1342, ap_sig_cseq_ST_pp1_stg4_fsm_6, C1_mapData_load_3_reg_1347, C1_mapData_load_4_reg_1368, ap_sig_cseq_ST_pp1_stg6_fsm_8, ap_sig_cseq_ST_pp1_stg7_fsm_9)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg7_fsm_9)) then 
                grp_fu_407_p1 <= C1_mapData_load_4_reg_1368;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg6_fsm_8)) then 
                grp_fu_407_p1 <= C1_mapData_load_3_reg_1347;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg5_fsm_7)) then 
                grp_fu_407_p1 <= C1_mapData_load_2_reg_1342;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg4_fsm_6)) then 
                grp_fu_407_p1 <= C1_mapData_load_1_reg_1312;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_5)) then 
                grp_fu_407_p1 <= C1_mapData_q0;
            else 
                grp_fu_407_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_407_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_10_fu_726_p2 <= std_logic_vector(unsigned(i_1_phi_fu_336_p4) + unsigned(ap_const_lv3_1));
    i_1_mid2_fu_732_p3 <= 
        i_10_fu_726_p2 when (exitcond_flatten10_reg_1171(0) = '1') else 
        i_1_phi_fu_336_p4;

    -- i_1_phi_fu_336_p4 assign process. --
    i_1_phi_fu_336_p4_assign_proc : process(i_1_reg_332, ap_reg_ppiten_pp1_it1, ap_sig_cseq_ST_pp1_stg1_fsm_3, ap_reg_ppstg_exitcond_flatten8_reg_1162_pp1_it1, i_1_mid2_reg_1211)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_3) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten8_reg_1162_pp1_it1))) then 
            i_1_phi_fu_336_p4 <= i_1_mid2_reg_1211;
        else 
            i_1_phi_fu_336_p4 <= i_1_reg_332;
        end if; 
    end process;

    i_mid2_fu_484_p3 <= 
        i_s_fu_478_p2 when (exitcond_flatten9_reg_1123(0) = '1') else 
        i_phi_fu_278_p4;

    -- i_phi_fu_278_p4 assign process. --
    i_phi_fu_278_p4_assign_proc : process(i_reg_274, ap_reg_ppiten_pp0_it2, ap_reg_ppstg_exitcond_flatten_reg_1114_pp0_it1, i_mid2_reg_1136)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_1114_pp0_it1))) then 
            i_phi_fu_278_p4 <= i_mid2_reg_1136;
        else 
            i_phi_fu_278_p4 <= i_reg_274;
        end if; 
    end process;

    i_s_fu_478_p2 <= std_logic_vector(unsigned(i_phi_fu_278_p4) + unsigned(ap_const_lv3_1));
    ifzero_fu_864_p2 <= "1" when (m_1_fu_858_p2 = ap_const_lv3_5) else "0";
    indvar_flatten21_op_fu_698_p2 <= std_logic_vector(unsigned(indvar_flatten7_phi_fu_370_p4) + unsigned(ap_const_lv8_1));
    indvar_flatten33_op_fu_712_p2 <= std_logic_vector(unsigned(indvar_flatten6_phi_fu_348_p4) + unsigned(ap_const_lv13_1));

    -- indvar_flatten5_phi_fu_325_p4 assign process. --
    indvar_flatten5_phi_fu_325_p4_assign_proc : process(indvar_flatten5_reg_321, ap_reg_ppiten_pp1_it1, exitcond_flatten8_reg_1162, ap_sig_cseq_ST_pp1_stg0_fsm_2, indvar_flatten_next5_reg_1166)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (exitcond_flatten8_reg_1162 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2))) then 
            indvar_flatten5_phi_fu_325_p4 <= indvar_flatten_next5_reg_1166;
        else 
            indvar_flatten5_phi_fu_325_p4 <= indvar_flatten5_reg_321;
        end if; 
    end process;


    -- indvar_flatten6_phi_fu_348_p4 assign process. --
    indvar_flatten6_phi_fu_348_p4_assign_proc : process(indvar_flatten6_reg_344, ap_reg_ppiten_pp1_it1, exitcond_flatten8_reg_1162, ap_sig_cseq_ST_pp1_stg0_fsm_2, indvar_flatten_next7_reg_1206)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (exitcond_flatten8_reg_1162 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2))) then 
            indvar_flatten6_phi_fu_348_p4 <= indvar_flatten_next7_reg_1206;
        else 
            indvar_flatten6_phi_fu_348_p4 <= indvar_flatten6_reg_344;
        end if; 
    end process;


    -- indvar_flatten7_phi_fu_370_p4 assign process. --
    indvar_flatten7_phi_fu_370_p4_assign_proc : process(indvar_flatten7_reg_366, ap_reg_ppiten_pp1_it1, exitcond_flatten8_reg_1162, ap_sig_cseq_ST_pp1_stg0_fsm_2, indvar_flatten_next6_reg_1201)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (exitcond_flatten8_reg_1162 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2))) then 
            indvar_flatten7_phi_fu_370_p4 <= indvar_flatten_next6_reg_1201;
        else 
            indvar_flatten7_phi_fu_370_p4 <= indvar_flatten7_reg_366;
        end if; 
    end process;

    indvar_flatten_next4_fu_428_p2 <= std_logic_vector(unsigned(indvar_flatten4_reg_263) + unsigned(ap_const_lv13_1));
    indvar_flatten_next5_fu_616_p2 <= std_logic_vector(unsigned(indvar_flatten5_phi_fu_325_p4) + unsigned(ap_const_lv15_1));
    indvar_flatten_next6_fu_704_p3 <= 
        ap_const_lv8_1 when (tmp_319_fu_666_p2(0) = '1') else 
        indvar_flatten21_op_fu_698_p2;
    indvar_flatten_next7_fu_718_p3 <= 
        ap_const_lv13_1 when (exitcond_flatten10_fu_622_p2(0) = '1') else 
        indvar_flatten33_op_fu_712_p2;
    indvar_flatten_next_fu_446_p3 <= 
        ap_const_lv10_1 when (exitcond_flatten9_fu_434_p2(0) = '1') else 
        indvar_flatten_op_fu_440_p2;
    indvar_flatten_op_fu_440_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_286) + unsigned(ap_const_lv10_1));

    -- inputimg_address0 assign process. --
    inputimg_address0_assign_proc : process(ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_pp1_stg1_fsm_3, ap_sig_cseq_ST_pp1_stg2_fsm_4, ap_sig_cseq_ST_pp1_stg3_fsm_5, tmp_325_fu_824_p1, tmp_331_fu_929_p1, tmp_337_fu_978_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_5)) then 
                inputimg_address0 <= tmp_337_fu_978_p1(10 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_4)) then 
                inputimg_address0 <= tmp_331_fu_929_p1(10 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_3)) then 
                inputimg_address0 <= tmp_325_fu_824_p1(10 - 1 downto 0);
            else 
                inputimg_address0 <= "XXXXXXXXXX";
            end if;
        else 
            inputimg_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    -- inputimg_address1 assign process. --
    inputimg_address1_assign_proc : process(ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_pp1_stg1_fsm_3, ap_sig_cseq_ST_pp1_stg2_fsm_4, tmp_328_fu_853_p1, tmp_334_fu_941_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_4)) then 
                inputimg_address1 <= tmp_334_fu_941_p1(10 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_3)) then 
                inputimg_address1 <= tmp_328_fu_853_p1(10 - 1 downto 0);
            else 
                inputimg_address1 <= "XXXXXXXXXX";
            end if;
        else 
            inputimg_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    -- inputimg_ce0 assign process. --
    inputimg_ce0_assign_proc : process(ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_pp1_stg1_fsm_3, ap_sig_cseq_ST_pp1_stg2_fsm_4, ap_sig_cseq_ST_pp1_stg3_fsm_5)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg3_fsm_5)))) then 
            inputimg_ce0 <= ap_const_logic_1;
        else 
            inputimg_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- inputimg_ce1 assign process. --
    inputimg_ce1_assign_proc : process(ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_pp1_stg1_fsm_3, ap_sig_cseq_ST_pp1_stg2_fsm_4)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg1_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg2_fsm_4)))) then 
            inputimg_ce1 <= ap_const_logic_1;
        else 
            inputimg_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_mid2_fu_744_p3 <= 
        j_3_fu_739_p2 when (exitcond_flatten23_mid_reg_1183(0) = '1') else 
        j_1_mid_reg_1177;
    j_1_mid_fu_628_p3 <= 
        ap_const_lv5_0 when (exitcond_flatten10_fu_622_p2(0) = '1') else 
        j_1_phi_fu_359_p4;

    -- j_1_phi_fu_359_p4 assign process. --
    j_1_phi_fu_359_p4_assign_proc : process(j_1_reg_355, ap_reg_ppiten_pp1_it1, exitcond_flatten8_reg_1162, ap_sig_cseq_ST_pp1_stg0_fsm_2, j_1_mid2_reg_1218)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (exitcond_flatten8_reg_1162 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2))) then 
            j_1_phi_fu_359_p4 <= j_1_mid2_reg_1218;
        else 
            j_1_phi_fu_359_p4 <= j_1_reg_355;
        end if; 
    end process;

    j_2_fu_491_p2 <= std_logic_vector(unsigned(j_mid_fu_454_p3) + unsigned(ap_const_lv5_1));
    j_3_fu_739_p2 <= std_logic_vector(unsigned(j_1_mid_reg_1177) + unsigned(ap_const_lv5_1));
    j_mid2_fu_510_p3 <= 
        j_2_fu_491_p2 when (exitcond5_mid_fu_472_p2(0) = '1') else 
        j_mid_fu_454_p3;
    j_mid_fu_454_p3 <= 
        ap_const_lv5_0 when (exitcond_flatten9_reg_1123(0) = '1') else 
        j_phi_fu_301_p4;

    -- j_phi_fu_301_p4 assign process. --
    j_phi_fu_301_p4_assign_proc : process(j_reg_297, ap_reg_ppiten_pp0_it2, ap_reg_ppstg_exitcond_flatten_reg_1114_pp0_it1, j_mid2_reg_1146)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_1114_pp0_it1))) then 
            j_phi_fu_301_p4 <= j_mid2_reg_1146;
        else 
            j_phi_fu_301_p4 <= j_reg_297;
        end if; 
    end process;

    k_1_mid2_fu_772_p3 <= 
        k_3_fu_750_p2 when (exitcond1_mid3_reg_1195(0) = '1') else 
        k_1_mid_reg_1189;
    k_1_mid_fu_672_p3 <= 
        ap_const_lv5_0 when (tmp_319_fu_666_p2(0) = '1') else 
        k_1_phi_fu_381_p4;

    -- k_1_phi_fu_381_p4 assign process. --
    k_1_phi_fu_381_p4_assign_proc : process(k_1_reg_377, ap_reg_ppiten_pp1_it1, exitcond_flatten8_reg_1162, ap_sig_cseq_ST_pp1_stg0_fsm_2, k_1_mid2_reg_1224)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (exitcond_flatten8_reg_1162 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2))) then 
            k_1_phi_fu_381_p4 <= k_1_mid2_reg_1224;
        else 
            k_1_phi_fu_381_p4 <= k_1_reg_377;
        end if; 
    end process;

    k_2_fu_562_p2 <= std_logic_vector(unsigned(k_mid2_fu_502_p3) + unsigned(ap_const_lv5_1));
    k_3_fu_750_p2 <= std_logic_vector(unsigned(k_1_mid_reg_1189) + unsigned(ap_const_lv5_1));
    k_mid2_fu_502_p3 <= 
        ap_const_lv5_0 when (tmp_fu_497_p2(0) = '1') else 
        k_phi_fu_313_p4;

    -- k_phi_fu_313_p4 assign process. --
    k_phi_fu_313_p4_assign_proc : process(k_reg_309, ap_reg_ppiten_pp0_it2, ap_reg_ppstg_exitcond_flatten_reg_1114_pp0_it1, k_2_reg_1157)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_1114_pp0_it1))) then 
            k_phi_fu_313_p4 <= k_2_reg_1157;
        else 
            k_phi_fu_313_p4 <= k_reg_309;
        end if; 
    end process;

    m_1_fu_858_p2 <= std_logic_vector(unsigned(m_mid2_fu_764_p3) + unsigned(ap_const_lv3_1));
    m_mid2_fu_764_p3 <= 
        ap_const_lv3_0 when (tmp_147_fu_759_p2(0) = '1') else 
        m_reg_388;

    -- m_phi_fu_392_p4 assign process. --
    m_phi_fu_392_p4_assign_proc : process(m_reg_388, ap_reg_ppiten_pp1_it1, exitcond_flatten8_reg_1162, ap_sig_cseq_ST_pp1_stg0_fsm_2, m_1_reg_1261)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (exitcond_flatten8_reg_1162 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_2))) then 
            m_phi_fu_392_p4 <= m_1_reg_1261;
        else 
            m_phi_fu_392_p4 <= m_reg_388;
        end if; 
    end process;

    not_exitcond_flatten1_fu_636_p2 <= (exitcond_flatten10_fu_622_p2 xor ap_const_lv1_1);
    not_exitcond_flatten23_mid_fu_686_p2 <= (exitcond_flatten10_fu_622_p2 or exitcond_flatten23_not_fu_680_p2);
    not_exitcond_flatten_fu_461_p2 <= (exitcond_flatten9_reg_1123 xor ap_const_lv1_1);
    notlhs_fu_1083_p2 <= "0" when (tmp_80_fu_1069_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_1089_p2 <= "1" when (tmp_151_fu_1079_p1 = ap_const_lv23_0) else "0";
        p_shl50_fu_589_p1 <= std_logic_vector(resize(signed(tmp_146_fu_582_p3),32));

        p_shl51_fu_1030_p1 <= std_logic_vector(resize(signed(tmp_148_fu_1023_p3),32));

        p_shl52_fu_1041_p1 <= std_logic_vector(resize(signed(tmp_149_fu_1034_p3),32));

    p_shl53_fu_890_p1 <= std_logic_vector(resize(unsigned(tmp_150_fu_883_p3),32));
    p_shl75_cast_fu_530_p1 <= std_logic_vector(resize(unsigned(tmp_316_fu_522_p3),9));
    p_shl76_cast_fu_542_p1 <= std_logic_vector(resize(unsigned(tmp_317_fu_534_p3),9));
    p_shl81_cast_fu_997_p1 <= std_logic_vector(resize(unsigned(tmp_321_fu_990_p3),9));
    p_shl82_cast1_fu_812_p1 <= std_logic_vector(resize(unsigned(tmp_322_fu_804_p3),6));
    p_shl82_cast_fu_1001_p1 <= std_logic_vector(resize(unsigned(tmp_322_reg_1240),9));
        p_shl_fu_578_p1 <= std_logic_vector(resize(signed(tmp_145_fu_571_p3),32));

    temp_to_int_fu_1066_p1 <= temp_reg_1423;
    tmp_145_fu_571_p3 <= (C1_v_addr9_reg_1151 & ap_const_lv5_0);
    tmp_146_fu_582_p3 <= (C1_v_addr9_reg_1151 & ap_const_lv2_0);
    tmp_147_fu_759_p2 <= (tmp_320_fu_755_p2 or exitcond_flatten10_reg_1171);
    tmp_148_fu_1023_p3 <= (C1_v_addr7_reg_1362 & ap_const_lv5_0);
    tmp_149_fu_1034_p3 <= (C1_v_addr7_reg_1362 & ap_const_lv2_0);
    tmp_14_trn_cast_fu_518_p1 <= std_logic_vector(resize(unsigned(j_mid2_fu_510_p3),10));
    tmp_150_fu_883_p3 <= (C1_mapData_addr6_reg_1250 & ap_const_lv2_0);
    tmp_151_fu_1079_p1 <= temp_to_int_fu_1066_p1(23 - 1 downto 0);
    tmp_15_trn_cast_fu_987_p1 <= std_logic_vector(resize(unsigned(j_1_mid2_reg_1218),10));
    tmp_17_trn_fu_568_p1 <= std_logic_vector(resize(unsigned(k_mid2_reg_1141),32));
    tmp_18_trn_fu_1020_p1 <= std_logic_vector(resize(unsigned(k_1_mid2_reg_1224),32));
    tmp_21_cast1_fu_784_p1 <= std_logic_vector(resize(unsigned(m_mid2_fu_764_p3),5));
    tmp_22_fu_788_p2 <= std_logic_vector(unsigned(tmp_21_cast1_fu_784_p1) + unsigned(j_1_mid2_fu_744_p3));
    tmp_24_fu_794_p2 <= std_logic_vector(signed(ap_const_lv3_4) - signed(m_mid2_fu_764_p3));
    tmp_25_trn_cast_fu_829_p1 <= std_logic_vector(resize(unsigned(tmp_24_fu_794_p2),6));
    tmp_27_1_fu_778_p2 <= std_logic_vector(unsigned(k_1_mid2_fu_772_p3) + unsigned(ap_const_lv5_1));
    tmp_27_2_fu_870_p2 <= std_logic_vector(unsigned(k_1_mid2_reg_1224) + unsigned(ap_const_lv5_2));
    tmp_27_3_fu_875_p2 <= std_logic_vector(unsigned(k_1_mid2_reg_1224) + unsigned(ap_const_lv5_3));
    tmp_27_4_fu_946_p2 <= std_logic_vector(unsigned(k_1_mid2_reg_1224) + unsigned(ap_const_lv5_4));
    tmp_316_fu_522_p3 <= (i_mid2_fu_484_p3 & ap_const_lv5_0);
    tmp_317_fu_534_p3 <= (i_mid2_fu_484_p3 & ap_const_lv2_0);
    tmp_318_fu_605_p1 <= std_logic_vector(resize(unsigned(C1_v_addr5_fu_599_p2),64));
    tmp_319_fu_666_p2 <= (exitcond_flatten23_mid_fu_660_p2 or exitcond_flatten10_fu_622_p2);
    tmp_320_fu_755_p2 <= (exitcond1_mid3_reg_1195 or exitcond_flatten23_mid_reg_1183);
    tmp_321_fu_990_p3 <= (i_1_mid2_reg_1211 & ap_const_lv5_0);
    tmp_322_fu_804_p3 <= (i_1_mid2_fu_732_p3 & ap_const_lv2_0);
    tmp_323_fu_1057_p1 <= std_logic_vector(resize(unsigned(C1_v_addr11_fu_1051_p2),64));
    tmp_324_fu_816_p3 <= (tmp_22_fu_788_p2 & k_1_mid2_fu_772_p3);
    tmp_325_fu_824_p1 <= std_logic_vector(resize(unsigned(tmp_324_fu_816_p3),64));
    tmp_326_fu_906_p1 <= std_logic_vector(resize(unsigned(C1_mapData_addr8_fu_900_p2),64));
    tmp_327_fu_845_p3 <= (tmp_22_fu_788_p2 & tmp_27_1_fu_778_p2);
    tmp_328_fu_853_p1 <= std_logic_vector(resize(unsigned(tmp_327_fu_845_p3),64));
    tmp_329_fu_917_p1 <= std_logic_vector(resize(unsigned(C1_mapData_addr9_fu_911_p2),64));
    tmp_330_fu_922_p3 <= (tmp_22_reg_1233 & tmp_27_2_fu_870_p2);
    tmp_331_fu_929_p1 <= std_logic_vector(resize(unsigned(tmp_330_fu_922_p3),64));
    tmp_332_fu_956_p1 <= std_logic_vector(resize(unsigned(C1_mapData_addr2_fu_951_p2),64));
    tmp_333_fu_934_p3 <= (tmp_22_reg_1233 & tmp_27_3_fu_875_p2);
    tmp_334_fu_941_p1 <= std_logic_vector(resize(unsigned(tmp_333_fu_934_p3),64));
    tmp_335_fu_966_p1 <= std_logic_vector(resize(unsigned(C1_mapData_addr3_fu_961_p2),64));
    tmp_336_fu_971_p3 <= (tmp_22_reg_1233 & tmp_27_4_fu_946_p2);
    tmp_337_fu_978_p1 <= std_logic_vector(resize(unsigned(tmp_336_fu_971_p3),64));
    tmp_338_fu_983_p1 <= std_logic_vector(resize(unsigned(C1_mapData_addr7_reg_1275),64));
    tmp_80_fu_1069_p4 <= temp_to_int_fu_1066_p1(30 downto 23);
    tmp_82_fu_1095_p2 <= (notrhs_fu_1089_p2 or notlhs_fu_1083_p2);
    tmp_83_fu_412_opcode <= ap_const_lv5_2;
    tmp_83_fu_412_p0 <= temp_reg_1423;
    tmp_83_fu_412_p1 <= ap_const_lv32_0;
    tmp_84_fu_1101_p2 <= (tmp_82_fu_1095_p2 and tmp_83_fu_412_p2);
    tmp_fu_497_p2 <= (exitcond5_mid_fu_472_p2 or exitcond_flatten9_reg_1123);
    tmp_s_fu_1062_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_i_1_mid2_reg_1211_pp1_it1),64));
    tmp_trn_cast_fu_800_p1 <= std_logic_vector(resize(unsigned(i_1_mid2_fu_732_p3),6));
end behav;
