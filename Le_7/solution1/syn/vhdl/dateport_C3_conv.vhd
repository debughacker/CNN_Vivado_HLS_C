-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dateport_C3_conv is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    S2_y_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    S2_y_ce0 : OUT STD_LOGIC;
    S2_y_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    S2_y_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    S2_y_ce1 : OUT STD_LOGIC;
    S2_y_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    C3_mapData_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    C3_mapData_ce0 : OUT STD_LOGIC;
    C3_mapData_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C3_mapData_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    C3_mapData_ce1 : OUT STD_LOGIC;
    C3_mapData_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    C3_bias_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    C3_bias_ce0 : OUT STD_LOGIC;
    C3_bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C3_y_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    C3_y_ce0 : OUT STD_LOGIC;
    C3_y_we0 : OUT STD_LOGIC;
    C3_y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of dateport_C3_conv is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000001000";
    constant ap_ST_pp0_stg0_fsm_4 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000010000";
    constant ap_ST_pp0_stg1_fsm_5 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000100000";
    constant ap_ST_pp0_stg2_fsm_6 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000001000000";
    constant ap_ST_pp0_stg3_fsm_7 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000010000000";
    constant ap_ST_pp0_stg4_fsm_8 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000100000000";
    constant ap_ST_pp0_stg5_fsm_9 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000001000000000";
    constant ap_ST_pp0_stg6_fsm_10 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000010000000000";
    constant ap_ST_pp0_stg7_fsm_11 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000100000000000";
    constant ap_ST_pp0_stg8_fsm_12 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000001000000000000";
    constant ap_ST_pp0_stg9_fsm_13 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000010000000000000";
    constant ap_ST_pp0_stg10_fsm_14 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000100000000000000";
    constant ap_ST_pp0_stg11_fsm_15 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000001000000000000000";
    constant ap_ST_pp0_stg12_fsm_16 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000010000000000000000";
    constant ap_ST_pp0_stg13_fsm_17 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000100000000000000000";
    constant ap_ST_pp0_stg14_fsm_18 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000001000000000000000000";
    constant ap_ST_pp0_stg15_fsm_19 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000010000000000000000000";
    constant ap_ST_pp0_stg16_fsm_20 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000100000000000000000000";
    constant ap_ST_pp0_stg17_fsm_21 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000001000000000000000000000";
    constant ap_ST_pp0_stg18_fsm_22 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000010000000000000000000000";
    constant ap_ST_pp0_stg19_fsm_23 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000100000000000000000000000";
    constant ap_ST_pp0_stg20_fsm_24 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000001000000000000000000000000";
    constant ap_ST_pp0_stg21_fsm_25 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000010000000000000000000000000";
    constant ap_ST_st33_fsm_26 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000100000000000000000000000000";
    constant ap_ST_st34_fsm_27 : STD_LOGIC_VECTOR (37 downto 0) := "00000000001000000000000000000000000000";
    constant ap_ST_st35_fsm_28 : STD_LOGIC_VECTOR (37 downto 0) := "00000000010000000000000000000000000000";
    constant ap_ST_st36_fsm_29 : STD_LOGIC_VECTOR (37 downto 0) := "00000000100000000000000000000000000000";
    constant ap_ST_st37_fsm_30 : STD_LOGIC_VECTOR (37 downto 0) := "00000001000000000000000000000000000000";
    constant ap_ST_st38_fsm_31 : STD_LOGIC_VECTOR (37 downto 0) := "00000010000000000000000000000000000000";
    constant ap_ST_st39_fsm_32 : STD_LOGIC_VECTOR (37 downto 0) := "00000100000000000000000000000000000000";
    constant ap_ST_st40_fsm_33 : STD_LOGIC_VECTOR (37 downto 0) := "00001000000000000000000000000000000000";
    constant ap_ST_st41_fsm_34 : STD_LOGIC_VECTOR (37 downto 0) := "00010000000000000000000000000000000000";
    constant ap_ST_st42_fsm_35 : STD_LOGIC_VECTOR (37 downto 0) := "00100000000000000000000000000000000000";
    constant ap_ST_st43_fsm_36 : STD_LOGIC_VECTOR (37 downto 0) := "01000000000000000000000000000000000000";
    constant ap_ST_st44_fsm_37 : STD_LOGIC_VECTOR (37 downto 0) := "10000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv16_BB80 : STD_LOGIC_VECTOR (15 downto 0) := "1011101110000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv12_BB8 : STD_LOGIC_VECTOR (11 downto 0) := "101110111000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv7_32 : STD_LOGIC_VECTOR (6 downto 0) := "0110010";
    constant ap_const_lv10_1F4 : STD_LOGIC_VECTOR (9 downto 0) := "0111110100";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_56 : BOOLEAN;
    signal C3_v_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal C3_v_ce0 : STD_LOGIC;
    signal C3_v_we0 : STD_LOGIC;
    signal C3_v_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C3_v_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten1_reg_311 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_1_reg_322 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten2_reg_333 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_1_reg_344 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten3_reg_355 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_1_reg_366 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_reg_378 : STD_LOGIC_VECTOR (6 downto 0);
    signal m_reg_390 : STD_LOGIC_VECTOR (3 downto 0);
    signal n_reg_402 : STD_LOGIC_VECTOR (2 downto 0);
    signal reg_466 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp0_stg7_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_126 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal exitcond_flatten3_reg_1418 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st37_fsm_30 : STD_LOGIC;
    signal ap_sig_bdd_139 : BOOLEAN;
    signal grp_fu_448_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_471 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp0_stg11_fsm_15 : STD_LOGIC;
    signal ap_sig_bdd_149 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg15_fsm_19 : STD_LOGIC;
    signal ap_sig_bdd_157 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg19_fsm_23 : STD_LOGIC;
    signal ap_sig_bdd_166 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg1_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_175 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_flatten3_reg_1418_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st42_fsm_35 : STD_LOGIC;
    signal ap_sig_bdd_188 : BOOLEAN;
    signal exitcond3_fu_477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_198 : BOOLEAN;
    signal i_3_fu_483_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_3_reg_1387 : STD_LOGIC_VECTOR (4 downto 0);
    signal C3_v_addr1_fu_513_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal C3_v_addr1_reg_1392 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_3_fu_525_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_3_reg_1400 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_213 : BOOLEAN;
    signal C3_v_addr8_fu_564_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C3_v_addr8_reg_1405 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond5_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_3_fu_576_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_227 : BOOLEAN;
    signal exitcond_flatten3_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_235 : BOOLEAN;
    signal indvar_flatten_next3_fu_602_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar_flatten_next3_reg_1422 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond_flatten_fu_608_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_1427 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_mid_fu_614_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_1_mid_reg_1432 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_flatten15_mid_fu_658_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten15_mid_reg_1438 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_mid2_fu_670_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_mid2_reg_1444 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_36_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_reg_1451 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_mid1_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_mid1_reg_1457 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_mid1_fu_702_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_mid1_reg_1462 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_mid_fu_708_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_mid_reg_1469 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next1_fu_720_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_flatten_next1_reg_1474 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_flatten_next2_fu_734_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal indvar_flatten_next2_reg_1479 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_1_mid2_fu_754_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_1_mid2_reg_1484 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_1_mid2_fu_787_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_mid2_reg_1489 : STD_LOGIC_VECTOR (3 downto 0);
    signal m_mid2_fu_818_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal m_mid2_reg_1494 : STD_LOGIC_VECTOR (3 downto 0);
    signal C3_v_addr3_fu_874_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal C3_v_addr3_reg_1504 : STD_LOGIC_VECTOR (8 downto 0);
    signal S2_y_addr6_fu_922_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal S2_y_addr6_reg_1510 : STD_LOGIC_VECTOR (8 downto 0);
    signal C3_mapData_addr4_fu_970_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C3_mapData_addr4_reg_1516 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_1_fu_976_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal n_1_reg_1522 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_next_fu_988_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten_next_reg_1527 : STD_LOGIC_VECTOR (6 downto 0);
    signal C3_v_addr_2_reg_1532 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_cseq_ST_pp0_stg2_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_290 : BOOLEAN;
    signal ap_reg_ppstg_C3_v_addr_2_reg_1532_pp0_it1 : STD_LOGIC_VECTOR (10 downto 0);
    signal S2_y_addr7_fu_1065_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal S2_y_addr7_reg_1537 : STD_LOGIC_VECTOR (31 downto 0);
    signal C3_mapData_addr5_fu_1087_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C3_mapData_addr5_reg_1549 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp0_stg3_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_313 : BOOLEAN;
    signal S2_y_load_1_reg_1581 : STD_LOGIC_VECTOR (31 downto 0);
    signal C3_mapData_load_1_reg_1586 : STD_LOGIC_VECTOR (31 downto 0);
    signal S2_y_addr4_fu_1196_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal S2_y_addr4_reg_1611 : STD_LOGIC_VECTOR (31 downto 0);
    signal S2_y_load_2_reg_1616 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp0_stg4_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_335 : BOOLEAN;
    signal C3_mapData_load_2_reg_1621 : STD_LOGIC_VECTOR (31 downto 0);
    signal S2_y_load_3_reg_1626 : STD_LOGIC_VECTOR (31 downto 0);
    signal C3_mapData_load_3_reg_1631 : STD_LOGIC_VECTOR (31 downto 0);
    signal S2_y_load_4_reg_1646 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp0_stg5_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_351 : BOOLEAN;
    signal C3_mapData_load_4_reg_1651 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_455_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_reg_1656 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp0_stg6_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_362 : BOOLEAN;
    signal tmp_71_1_reg_1661 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_71_2_reg_1666 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp0_stg8_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_372 : BOOLEAN;
    signal tmp_71_3_reg_1671 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp0_stg9_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_381 : BOOLEAN;
    signal tmp_71_4_reg_1676 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp0_stg10_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_390 : BOOLEAN;
    signal i_4_fu_1215_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_4_reg_1684 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st33_fsm_26 : STD_LOGIC;
    signal ap_sig_bdd_400 : BOOLEAN;
    signal exitcond2_fu_1209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal C3_bias_load_reg_1694 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st34_fsm_27 : STD_LOGIC;
    signal ap_sig_bdd_413 : BOOLEAN;
    signal C3_v_addr9_fu_1250_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal C3_v_addr9_reg_1699 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_5_fu_1262_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_5_reg_1707 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st35_fsm_28 : STD_LOGIC;
    signal ap_sig_bdd_424 : BOOLEAN;
    signal C3_v_addr11_fu_1301_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C3_v_addr11_reg_1712 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_1256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_4_fu_1313_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_4_reg_1720 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st36_fsm_29 : STD_LOGIC;
    signal ap_sig_bdd_438 : BOOLEAN;
    signal tmp_69_fu_1328_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_69_reg_1725 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_1307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_1369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_reg_1735 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st43_fsm_36 : STD_LOGIC;
    signal ap_sig_bdd_454 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg21_fsm_25 : STD_LOGIC;
    signal ap_sig_bdd_465 : BOOLEAN;
    signal i_reg_278 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_289 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond9_fu_570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_reg_300 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten1_phi_fu_315_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_1_phi_fu_326_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten2_phi_fu_337_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_1_phi_fu_348_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten3_phi_fu_359_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_1_phi_fu_370_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_phi_fu_382_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal m_phi_fu_394_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal n_phi_fu_406_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_414 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_2_reg_426 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_2_reg_437 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st44_fsm_37 : STD_LOGIC;
    signal ap_sig_bdd_523 : BOOLEAN;
    signal tmp_68_fu_591_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_45_fu_1038_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_50_fu_1077_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_53_fu_1098_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_54_fu_1113_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_55_fu_1124_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_56_fu_1153_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_57_fu_1163_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_58_fu_1177_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_59_fu_1187_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_60_fu_1201_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_61_fu_1205_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_fu_1221_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_448_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_448_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st38_fsm_31 : STD_LOGIC;
    signal ap_sig_bdd_571 : BOOLEAN;
    signal grp_fu_455_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_455_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_461_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_461_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_489_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_35_fu_501_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl10_cast_fu_509_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_cast_fu_497_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_20_trn_cast_fu_531_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal C3_v_addr7_fu_535_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_64_fu_540_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_65_fu_552_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl6_fu_560_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl5_fu_548_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_trn_fu_582_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal C3_v_addr10_fu_586_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond4_fu_628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_fu_622_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten1_fu_640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten2_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_s_fu_664_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_flatten15_not_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_mid_fu_634_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten15_mid_fu_690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_mid_fu_646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten13_op_fu_714_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_flatten33_op_fu_728_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_4_fu_742_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_1_mid_fu_747_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_37_fu_766_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_fu_770_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_5_fu_760_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal m_mid1_fu_775_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond4_mid2_fu_783_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_fu_800_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_fu_805_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_1_fu_794_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal n_mid2_fu_810_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_38_cast4_fu_826_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_41_fu_846_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_42_fu_857_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl11_cast_fu_853_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl12_cast_fu_864_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_24_trn_cast_fu_842_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal C3_v_addr2_fu_868_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_fu_830_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_46_fu_888_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_47_fu_900_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl15_cast_fu_896_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl16_cast_fu_908_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal S2_y_addr5_fu_912_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_32_trn_cast_fu_884_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal S2_y_addr5_cast_fu_918_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal C3_mapData_addr1_fu_928_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_21_trn_cast_fu_880_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal C3_mapData_addr1_cast_fu_934_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal C3_mapData_addr2_fu_938_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_20_fu_836_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_51_fu_952_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl4_fu_960_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal C3_mapData_addr2_cast_fu_944_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_trn_fu_948_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal C3_mapData_addr3_fu_964_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_op_fu_982_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_43_fu_1004_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_44_fu_1015_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_fu_1011_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl1_fu_1022_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_trn_fu_1001_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal C3_v_addr4_fu_1026_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C3_v_addr5_fu_1032_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_48_fu_1043_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_49_fu_1054_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl2_fu_1050_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl3_fu_1061_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal S2_y_addr8_fu_1071_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_52_fu_1082_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C3_mapData_addr6_fu_1092_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_67_1_fu_996_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_68_1_trn_fu_1103_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal S2_y_addr9_fu_1107_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C3_mapData_addr7_fu_1118_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_67_2_fu_1129_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_68_2_trn_fu_1144_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal S2_y_addr2_fu_1148_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C3_mapData_addr8_fu_1158_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_67_3_fu_1134_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_68_3_trn_fu_1168_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal S2_y_addr3_fu_1172_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C3_mapData_addr9_fu_1182_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_67_4_fu_1139_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_68_4_trn_fu_1192_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_62_fu_1226_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_63_fu_1238_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl26_cast_fu_1246_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl25_cast_fu_1234_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_22_trn_cast_fu_1268_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal C3_v_addr6_fu_1272_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_66_fu_1277_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_67_fu_1289_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl8_fu_1297_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl7_fu_1285_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_trn_fu_1319_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal C3_v_addr12_fu_1323_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_to_int_fu_1333_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_1337_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_70_fu_1347_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_1357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_1351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_1363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_448_ce : STD_LOGIC;
    signal grp_fu_455_ce : STD_LOGIC;
    signal tmp_25_fu_461_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (37 downto 0);

    component dateport_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dateport_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dateport_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dateport_C3_conv_C3_v IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    C3_v_U : component dateport_C3_conv_C3_v
    generic map (
        DataWidth => 32,
        AddressRange => 1600,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => C3_v_address0,
        ce0 => C3_v_ce0,
        we0 => C3_v_we0,
        d0 => C3_v_d0,
        q0 => C3_v_q0);

    dateport_fadd_32ns_32ns_32_5_full_dsp_U12 : component dateport_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_448_p0,
        din1 => grp_fu_448_p1,
        ce => grp_fu_448_ce,
        dout => grp_fu_448_p2);

    dateport_fmul_32ns_32ns_32_4_max_dsp_U13 : component dateport_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_455_p0,
        din1 => grp_fu_455_p1,
        ce => grp_fu_455_ce,
        dout => grp_fu_455_p2);

    dateport_fcmp_32ns_32ns_1_1_U14 : component dateport_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => tmp_25_fu_461_p0,
        din1 => tmp_25_fu_461_p1,
        opcode => tmp_25_fu_461_opcode,
        dout => tmp_25_fu_461_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and not((ap_const_lv1_0 = exitcond_flatten3_fu_596_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond3_fu_477_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((exitcond_flatten3_reg_1418 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg21_fsm_25))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond3_fu_477_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg21_fsm_25) and not((exitcond_flatten3_reg_1418 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_1_reg_322 assign process. --
    i_1_reg_322_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond3_fu_477_p2)))) then 
                i_1_reg_322 <= ap_const_lv5_0;
            elsif (((exitcond_flatten3_reg_1418 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4))) then 
                i_1_reg_322 <= i_1_mid2_reg_1444;
            end if; 
        end if;
    end process;

    -- i_2_reg_414 assign process. --
    i_2_reg_414_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28) and not((ap_const_lv1_0 = exitcond1_fu_1256_p2)))) then 
                i_2_reg_414 <= i_4_reg_1684;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and not((ap_const_lv1_0 = exitcond_flatten3_fu_596_p2)))) then 
                i_2_reg_414 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- i_reg_278 assign process. --
    i_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond5_fu_519_p2)))) then 
                i_reg_278 <= i_3_reg_1387;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_278 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- indvar_flatten1_reg_311 assign process. --
    indvar_flatten1_reg_311_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond3_fu_477_p2)))) then 
                indvar_flatten1_reg_311 <= ap_const_lv16_0;
            elsif (((exitcond_flatten3_reg_1418 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4))) then 
                indvar_flatten1_reg_311 <= indvar_flatten_next3_reg_1422;
            end if; 
        end if;
    end process;

    -- indvar_flatten2_reg_333 assign process. --
    indvar_flatten2_reg_333_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond3_fu_477_p2)))) then 
                indvar_flatten2_reg_333 <= ap_const_lv12_0;
            elsif (((exitcond_flatten3_reg_1418 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4))) then 
                indvar_flatten2_reg_333 <= indvar_flatten_next2_reg_1479;
            end if; 
        end if;
    end process;

    -- indvar_flatten3_reg_355 assign process. --
    indvar_flatten3_reg_355_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond3_fu_477_p2)))) then 
                indvar_flatten3_reg_355 <= ap_const_lv10_0;
            elsif (((exitcond_flatten3_reg_1418 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4))) then 
                indvar_flatten3_reg_355 <= indvar_flatten_next1_reg_1474;
            end if; 
        end if;
    end process;

    -- indvar_flatten_reg_378 assign process. --
    indvar_flatten_reg_378_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond3_fu_477_p2)))) then 
                indvar_flatten_reg_378 <= ap_const_lv7_0;
            elsif (((exitcond_flatten3_reg_1418 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4))) then 
                indvar_flatten_reg_378 <= indvar_flatten_next_reg_1527;
            end if; 
        end if;
    end process;

    -- j_1_reg_344 assign process. --
    j_1_reg_344_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond3_fu_477_p2)))) then 
                j_1_reg_344 <= ap_const_lv3_0;
            elsif (((exitcond_flatten3_reg_1418 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4))) then 
                j_1_reg_344 <= j_1_mid2_reg_1484;
            end if; 
        end if;
    end process;

    -- j_2_reg_426 assign process. --
    j_2_reg_426_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_29) and not((ap_const_lv1_0 = exitcond_fu_1307_p2)))) then 
                j_2_reg_426 <= j_5_reg_1707;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_27)) then 
                j_2_reg_426 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- j_reg_289 assign process. --
    j_reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond9_fu_570_p2)))) then 
                j_reg_289 <= j_3_reg_1400;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond3_fu_477_p2))) then 
                j_reg_289 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- k_1_reg_366 assign process. --
    k_1_reg_366_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond3_fu_477_p2)))) then 
                k_1_reg_366 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten3_reg_1418_pp0_it1))) then 
                k_1_reg_366 <= k_1_mid2_reg_1489;
            end if; 
        end if;
    end process;

    -- k_2_reg_437 assign process. --
    k_2_reg_437_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28) and (ap_const_lv1_0 = exitcond1_fu_1256_p2))) then 
                k_2_reg_437 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_37)) then 
                k_2_reg_437 <= k_4_reg_1720;
            end if; 
        end if;
    end process;

    -- k_reg_300 assign process. --
    k_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond5_fu_519_p2))) then 
                k_reg_300 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond9_fu_570_p2))) then 
                k_reg_300 <= k_3_fu_576_p2;
            end if; 
        end if;
    end process;

    -- m_reg_390 assign process. --
    m_reg_390_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond3_fu_477_p2)))) then 
                m_reg_390 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten3_reg_1418_pp0_it1))) then 
                m_reg_390 <= m_mid2_reg_1494;
            end if; 
        end if;
    end process;

    -- n_reg_402 assign process. --
    n_reg_402_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond3_fu_477_p2)))) then 
                n_reg_402 <= ap_const_lv3_0;
            elsif (((exitcond_flatten3_reg_1418 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4))) then 
                n_reg_402 <= n_1_reg_1522;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_27)) then
                C3_bias_load_reg_1694 <= C3_bias_q0;
                    C3_v_addr9_reg_1699(8 downto 1) <= C3_v_addr9_fu_1250_p2(8 downto 1);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten3_reg_1418 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5))) then
                C3_mapData_addr4_reg_1516 <= C3_mapData_addr4_fu_970_p2;
                C3_v_addr3_reg_1504 <= C3_v_addr3_fu_874_p2;
                S2_y_addr6_reg_1510 <= S2_y_addr6_fu_922_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten3_reg_1418 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_6))) then
                C3_mapData_addr5_reg_1549 <= C3_mapData_addr5_fu_1087_p2;
                C3_v_addr_2_reg_1532 <= tmp_45_fu_1038_p1(11 - 1 downto 0);
                    S2_y_addr7_reg_1537(31 downto 1) <= S2_y_addr7_fu_1065_p2(31 downto 1);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten3_reg_1418 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_7))) then
                C3_mapData_load_1_reg_1586 <= C3_mapData_q1;
                S2_y_addr4_reg_1611 <= S2_y_addr4_fu_1196_p2;
                S2_y_load_1_reg_1581 <= S2_y_q1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten3_reg_1418 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_8))) then
                C3_mapData_load_2_reg_1621 <= C3_mapData_q0;
                C3_mapData_load_3_reg_1631 <= C3_mapData_q1;
                S2_y_load_2_reg_1616 <= S2_y_q0;
                S2_y_load_3_reg_1626 <= S2_y_q1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten3_reg_1418 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_9))) then
                C3_mapData_load_4_reg_1651 <= C3_mapData_q0;
                S2_y_load_4_reg_1646 <= S2_y_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28) and (ap_const_lv1_0 = exitcond1_fu_1256_p2))) then
                    C3_v_addr11_reg_1712(31 downto 1) <= C3_v_addr11_fu_1301_p2(31 downto 1);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond3_fu_477_p2))) then
                    C3_v_addr1_reg_1392(8 downto 1) <= C3_v_addr1_fu_513_p2(8 downto 1);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond5_fu_519_p2))) then
                    C3_v_addr8_reg_1405(31 downto 1) <= C3_v_addr8_fu_564_p2(31 downto 1);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_6)) then
                ap_reg_ppstg_C3_v_addr_2_reg_1532_pp0_it1 <= C3_v_addr_2_reg_1532;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4)) then
                ap_reg_ppstg_exitcond_flatten3_reg_1418_pp0_it1 <= exitcond_flatten3_reg_1418;
                exitcond_flatten3_reg_1418 <= exitcond_flatten3_fu_596_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_lv1_0 = exitcond_flatten3_fu_596_p2))) then
                exitcond4_mid1_reg_1457 <= exitcond4_mid1_fu_696_p2;
                exitcond_flatten15_mid_reg_1438 <= exitcond_flatten15_mid_fu_658_p2;
                exitcond_flatten_mid1_reg_1462 <= exitcond_flatten_mid1_fu_702_p2;
                exitcond_flatten_reg_1427 <= exitcond_flatten_fu_608_p2;
                j_1_mid_reg_1432 <= j_1_mid_fu_614_p3;
                not_exitcond_flatten_mid_reg_1469 <= not_exitcond_flatten_mid_fu_708_p2;
                tmp_36_reg_1451 <= tmp_36_fu_678_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_lv1_0 = exitcond_flatten3_fu_596_p2))) then
                i_1_mid2_reg_1444 <= i_1_mid2_fu_670_p3;
                indvar_flatten_next1_reg_1474 <= indvar_flatten_next1_fu_720_p3;
                indvar_flatten_next2_reg_1479 <= indvar_flatten_next2_fu_734_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_3_reg_1387 <= i_3_fu_483_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_26)) then
                i_4_reg_1684 <= i_4_fu_1215_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4))) then
                indvar_flatten_next3_reg_1422 <= indvar_flatten_next3_fu_602_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten3_reg_1418 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5))) then
                indvar_flatten_next_reg_1527 <= indvar_flatten_next_fu_988_p3;
                j_1_mid2_reg_1484 <= j_1_mid2_fu_754_p3;
                k_1_mid2_reg_1489 <= k_1_mid2_fu_787_p3;
                m_mid2_reg_1494 <= m_mid2_fu_818_p3;
                n_1_reg_1522 <= n_1_fu_976_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                j_3_reg_1400 <= j_3_fu_525_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_28)) then
                j_5_reg_1707 <= j_5_fu_1262_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_29)) then
                k_4_reg_1720 <= k_4_fu_1313_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_11) and (exitcond_flatten3_reg_1418 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_30))) then
                reg_466 <= C3_v_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((exitcond_flatten3_reg_1418 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg11_fsm_15)) or ((exitcond_flatten3_reg_1418 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg15_fsm_19)) or ((exitcond_flatten3_reg_1418 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg19_fsm_23)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten3_reg_1418_pp0_it1)) or (ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_35))) then
                reg_471 <= grp_fu_448_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten3_reg_1418 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_10))) then
                tmp_21_reg_1656 <= grp_fu_455_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st43_fsm_36)) then
                tmp_26_reg_1735 <= tmp_26_fu_1369_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_29) and (ap_const_lv1_0 = exitcond_fu_1307_p2))) then
                    tmp_69_reg_1725(31 downto 0) <= tmp_69_fu_1328_p1(31 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_11) and (exitcond_flatten3_reg_1418 = ap_const_lv1_0))) then
                tmp_71_1_reg_1661 <= grp_fu_455_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten3_reg_1418 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg8_fsm_12))) then
                tmp_71_2_reg_1666 <= grp_fu_455_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten3_reg_1418 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg9_fsm_13))) then
                tmp_71_3_reg_1671 <= grp_fu_455_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten3_reg_1418 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg10_fsm_14))) then
                tmp_71_4_reg_1676 <= grp_fu_455_p2;
            end if;
        end if;
    end process;
    C3_v_addr1_reg_1392(0) <= '0';
    C3_v_addr8_reg_1405(0) <= '0';
    S2_y_addr7_reg_1537(0) <= '0';
    C3_v_addr9_reg_1699(0) <= '0';
    C3_v_addr11_reg_1712(0) <= '0';
    tmp_69_reg_1725(63 downto 32) <= "00000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, exitcond3_fu_477_p2, exitcond5_fu_519_p2, exitcond_flatten3_fu_596_p2, ap_sig_cseq_ST_pp0_stg5_fsm_9, exitcond2_fu_1209_p2, exitcond1_fu_1256_p2, exitcond_fu_1307_p2, exitcond9_fu_570_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((ap_const_lv1_0 = exitcond3_fu_477_p2)) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_4;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((ap_const_lv1_0 = exitcond5_fu_519_p2)) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st4_fsm_3 => 
                if ((ap_const_lv1_0 = exitcond9_fu_570_p2)) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_pp0_stg0_fsm_4 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond_flatten3_fu_596_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st33_fsm_26;
                end if;
            when ap_ST_pp0_stg1_fsm_5 => 
                ap_NS_fsm <= ap_ST_pp0_stg2_fsm_6;
            when ap_ST_pp0_stg2_fsm_6 => 
                ap_NS_fsm <= ap_ST_pp0_stg3_fsm_7;
            when ap_ST_pp0_stg3_fsm_7 => 
                ap_NS_fsm <= ap_ST_pp0_stg4_fsm_8;
            when ap_ST_pp0_stg4_fsm_8 => 
                ap_NS_fsm <= ap_ST_pp0_stg5_fsm_9;
            when ap_ST_pp0_stg5_fsm_9 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_9) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it0))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg6_fsm_10;
                else
                    ap_NS_fsm <= ap_ST_st33_fsm_26;
                end if;
            when ap_ST_pp0_stg6_fsm_10 => 
                ap_NS_fsm <= ap_ST_pp0_stg7_fsm_11;
            when ap_ST_pp0_stg7_fsm_11 => 
                ap_NS_fsm <= ap_ST_pp0_stg8_fsm_12;
            when ap_ST_pp0_stg8_fsm_12 => 
                ap_NS_fsm <= ap_ST_pp0_stg9_fsm_13;
            when ap_ST_pp0_stg9_fsm_13 => 
                ap_NS_fsm <= ap_ST_pp0_stg10_fsm_14;
            when ap_ST_pp0_stg10_fsm_14 => 
                ap_NS_fsm <= ap_ST_pp0_stg11_fsm_15;
            when ap_ST_pp0_stg11_fsm_15 => 
                ap_NS_fsm <= ap_ST_pp0_stg12_fsm_16;
            when ap_ST_pp0_stg12_fsm_16 => 
                ap_NS_fsm <= ap_ST_pp0_stg13_fsm_17;
            when ap_ST_pp0_stg13_fsm_17 => 
                ap_NS_fsm <= ap_ST_pp0_stg14_fsm_18;
            when ap_ST_pp0_stg14_fsm_18 => 
                ap_NS_fsm <= ap_ST_pp0_stg15_fsm_19;
            when ap_ST_pp0_stg15_fsm_19 => 
                ap_NS_fsm <= ap_ST_pp0_stg16_fsm_20;
            when ap_ST_pp0_stg16_fsm_20 => 
                ap_NS_fsm <= ap_ST_pp0_stg17_fsm_21;
            when ap_ST_pp0_stg17_fsm_21 => 
                ap_NS_fsm <= ap_ST_pp0_stg18_fsm_22;
            when ap_ST_pp0_stg18_fsm_22 => 
                ap_NS_fsm <= ap_ST_pp0_stg19_fsm_23;
            when ap_ST_pp0_stg19_fsm_23 => 
                ap_NS_fsm <= ap_ST_pp0_stg20_fsm_24;
            when ap_ST_pp0_stg20_fsm_24 => 
                ap_NS_fsm <= ap_ST_pp0_stg21_fsm_25;
            when ap_ST_pp0_stg21_fsm_25 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_4;
            when ap_ST_st33_fsm_26 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_1209_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st34_fsm_27;
                end if;
            when ap_ST_st34_fsm_27 => 
                ap_NS_fsm <= ap_ST_st35_fsm_28;
            when ap_ST_st35_fsm_28 => 
                if ((ap_const_lv1_0 = exitcond1_fu_1256_p2)) then
                    ap_NS_fsm <= ap_ST_st36_fsm_29;
                else
                    ap_NS_fsm <= ap_ST_st33_fsm_26;
                end if;
            when ap_ST_st36_fsm_29 => 
                if ((ap_const_lv1_0 = exitcond_fu_1307_p2)) then
                    ap_NS_fsm <= ap_ST_st37_fsm_30;
                else
                    ap_NS_fsm <= ap_ST_st35_fsm_28;
                end if;
            when ap_ST_st37_fsm_30 => 
                ap_NS_fsm <= ap_ST_st38_fsm_31;
            when ap_ST_st38_fsm_31 => 
                ap_NS_fsm <= ap_ST_st39_fsm_32;
            when ap_ST_st39_fsm_32 => 
                ap_NS_fsm <= ap_ST_st40_fsm_33;
            when ap_ST_st40_fsm_33 => 
                ap_NS_fsm <= ap_ST_st41_fsm_34;
            when ap_ST_st41_fsm_34 => 
                ap_NS_fsm <= ap_ST_st42_fsm_35;
            when ap_ST_st42_fsm_35 => 
                ap_NS_fsm <= ap_ST_st43_fsm_36;
            when ap_ST_st43_fsm_36 => 
                ap_NS_fsm <= ap_ST_st44_fsm_37;
            when ap_ST_st44_fsm_37 => 
                ap_NS_fsm <= ap_ST_st36_fsm_29;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    C3_bias_address0 <= tmp_19_fu_1221_p1(4 - 1 downto 0);

    -- C3_bias_ce0 assign process. --
    C3_bias_ce0_assign_proc : process(ap_sig_cseq_ST_st33_fsm_26)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_26)) then 
            C3_bias_ce0 <= ap_const_logic_1;
        else 
            C3_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        C3_mapData_addr1_cast_fu_934_p1 <= std_logic_vector(resize(signed(C3_mapData_addr1_fu_928_p2),10));

    C3_mapData_addr1_fu_928_p2 <= std_logic_vector(unsigned(p_shl11_cast_fu_853_p1) - unsigned(p_shl12_cast_fu_864_p1));
        C3_mapData_addr2_cast_fu_944_p1 <= std_logic_vector(resize(signed(C3_mapData_addr2_fu_938_p2),32));

    C3_mapData_addr2_fu_938_p2 <= std_logic_vector(unsigned(tmp_21_trn_cast_fu_880_p1) + unsigned(C3_mapData_addr1_cast_fu_934_p1));
    C3_mapData_addr3_fu_964_p2 <= std_logic_vector(signed(p_shl4_fu_960_p1) + signed(C3_mapData_addr2_cast_fu_944_p1));
    C3_mapData_addr4_fu_970_p2 <= std_logic_vector(unsigned(tmp_34_trn_fu_948_p1) + unsigned(C3_mapData_addr3_fu_964_p2));
    C3_mapData_addr5_fu_1087_p2 <= std_logic_vector(unsigned(tmp_52_fu_1082_p2) + unsigned(C3_mapData_addr4_reg_1516));
    C3_mapData_addr6_fu_1092_p2 <= std_logic_vector(unsigned(ap_const_lv32_4) + unsigned(C3_mapData_addr5_fu_1087_p2));
    C3_mapData_addr7_fu_1118_p2 <= std_logic_vector(unsigned(ap_const_lv32_3) + unsigned(C3_mapData_addr5_fu_1087_p2));
    C3_mapData_addr8_fu_1158_p2 <= std_logic_vector(unsigned(ap_const_lv32_2) + unsigned(C3_mapData_addr5_reg_1549));
    C3_mapData_addr9_fu_1182_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(C3_mapData_addr5_reg_1549));

    -- C3_mapData_address0 assign process. --
    C3_mapData_address0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_6, ap_sig_cseq_ST_pp0_stg3_fsm_7, ap_sig_cseq_ST_pp0_stg4_fsm_8, tmp_53_fu_1098_p1, tmp_57_fu_1163_p1, tmp_61_fu_1205_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_8)) then 
                C3_mapData_address0 <= tmp_61_fu_1205_p1(12 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_7)) then 
                C3_mapData_address0 <= tmp_57_fu_1163_p1(12 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_6)) then 
                C3_mapData_address0 <= tmp_53_fu_1098_p1(12 - 1 downto 0);
            else 
                C3_mapData_address0 <= "XXXXXXXXXXXX";
            end if;
        else 
            C3_mapData_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    -- C3_mapData_address1 assign process. --
    C3_mapData_address1_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_6, ap_sig_cseq_ST_pp0_stg3_fsm_7, tmp_55_fu_1124_p1, tmp_59_fu_1187_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_7)) then 
                C3_mapData_address1 <= tmp_59_fu_1187_p1(12 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_6)) then 
                C3_mapData_address1 <= tmp_55_fu_1124_p1(12 - 1 downto 0);
            else 
                C3_mapData_address1 <= "XXXXXXXXXXXX";
            end if;
        else 
            C3_mapData_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    -- C3_mapData_ce0 assign process. --
    C3_mapData_ce0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_6, ap_sig_cseq_ST_pp0_stg3_fsm_7, ap_sig_cseq_ST_pp0_stg4_fsm_8)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_6)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_7)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_8)))) then 
            C3_mapData_ce0 <= ap_const_logic_1;
        else 
            C3_mapData_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- C3_mapData_ce1 assign process. --
    C3_mapData_ce1_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_6, ap_sig_cseq_ST_pp0_stg3_fsm_7)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_6)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_7)))) then 
            C3_mapData_ce1 <= ap_const_logic_1;
        else 
            C3_mapData_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    C3_v_addr10_fu_586_p2 <= std_logic_vector(unsigned(C3_v_addr8_reg_1405) + unsigned(tmp_23_trn_fu_582_p1));
    C3_v_addr11_fu_1301_p2 <= std_logic_vector(unsigned(p_shl8_fu_1297_p1) + unsigned(p_shl7_fu_1285_p1));
    C3_v_addr12_fu_1323_p2 <= std_logic_vector(unsigned(tmp_25_trn_fu_1319_p1) + unsigned(C3_v_addr11_reg_1712));
    C3_v_addr1_fu_513_p2 <= std_logic_vector(unsigned(p_shl10_cast_fu_509_p1) + unsigned(p_shl_cast_fu_497_p1));
    C3_v_addr2_fu_868_p2 <= std_logic_vector(unsigned(p_shl11_cast_fu_853_p1) + unsigned(p_shl12_cast_fu_864_p1));
    C3_v_addr3_fu_874_p2 <= std_logic_vector(unsigned(tmp_24_trn_cast_fu_842_p1) + unsigned(C3_v_addr2_fu_868_p2));
    C3_v_addr4_fu_1026_p2 <= std_logic_vector(unsigned(p_shl_fu_1011_p1) + unsigned(p_shl1_fu_1022_p1));
    C3_v_addr5_fu_1032_p2 <= std_logic_vector(unsigned(tmp_30_trn_fu_1001_p1) + unsigned(C3_v_addr4_fu_1026_p2));
    C3_v_addr6_fu_1272_p2 <= std_logic_vector(unsigned(C3_v_addr9_reg_1699) + unsigned(tmp_22_trn_cast_fu_1268_p1));
    C3_v_addr7_fu_535_p2 <= std_logic_vector(unsigned(C3_v_addr1_reg_1392) + unsigned(tmp_20_trn_cast_fu_531_p1));
    C3_v_addr8_fu_564_p2 <= std_logic_vector(unsigned(p_shl6_fu_560_p1) + unsigned(p_shl5_fu_548_p1));
    C3_v_addr9_fu_1250_p2 <= std_logic_vector(unsigned(p_shl26_cast_fu_1246_p1) + unsigned(p_shl25_cast_fu_1234_p1));

    -- C3_v_address0 assign process. --
    C3_v_address0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_st4_fsm_3, C3_v_addr_2_reg_1532, ap_reg_ppstg_C3_v_addr_2_reg_1532_pp0_it1, ap_sig_cseq_ST_pp0_stg5_fsm_9, ap_sig_cseq_ST_pp0_stg6_fsm_10, ap_sig_cseq_ST_st36_fsm_29, tmp_69_fu_1328_p1, tmp_68_fu_591_p1)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_9))) then 
            C3_v_address0 <= ap_reg_ppstg_C3_v_addr_2_reg_1532_pp0_it1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            C3_v_address0 <= tmp_68_fu_591_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_29)) then 
            C3_v_address0 <= tmp_69_fu_1328_p1(11 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_10))) then 
            C3_v_address0 <= C3_v_addr_2_reg_1532;
        else 
            C3_v_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    -- C3_v_ce0 assign process. --
    C3_v_ce0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_pp0_stg5_fsm_9, ap_sig_cseq_ST_pp0_stg6_fsm_10, ap_sig_cseq_ST_st36_fsm_29)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_29) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_10)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_9)))) then 
            C3_v_ce0 <= ap_const_logic_1;
        else 
            C3_v_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- C3_v_d0 assign process. --
    C3_v_d0_assign_proc : process(grp_fu_448_p2, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_pp0_stg5_fsm_9)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_9))) then 
            C3_v_d0 <= grp_fu_448_p2;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            C3_v_d0 <= ap_const_lv32_0;
        else 
            C3_v_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- C3_v_we0 assign process. --
    C3_v_we0_assign_proc : process(ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond_flatten3_reg_1418_pp0_it1, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_pp0_stg5_fsm_9, exitcond9_fu_570_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond9_fu_570_p2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten3_reg_1418_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_9)))) then 
            C3_v_we0 <= ap_const_logic_1;
        else 
            C3_v_we0 <= ap_const_logic_0;
        end if; 
    end process;

    C3_y_address0 <= tmp_69_reg_1725(11 - 1 downto 0);

    -- C3_y_ce0 assign process. --
    C3_y_ce0_assign_proc : process(ap_sig_cseq_ST_st44_fsm_37)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_37)) then 
            C3_y_ce0 <= ap_const_logic_1;
        else 
            C3_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C3_y_d0 <= 
        reg_471 when (tmp_26_reg_1735(0) = '1') else 
        ap_const_lv32_0;

    -- C3_y_we0 assign process. --
    C3_y_we0_assign_proc : process(ap_sig_cseq_ST_st44_fsm_37)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st44_fsm_37))) then 
            C3_y_we0 <= ap_const_logic_1;
        else 
            C3_y_we0 <= ap_const_logic_0;
        end if; 
    end process;

    S2_y_addr2_fu_1148_p2 <= std_logic_vector(unsigned(tmp_68_2_trn_fu_1144_p1) + unsigned(S2_y_addr7_reg_1537));
    S2_y_addr3_fu_1172_p2 <= std_logic_vector(unsigned(tmp_68_3_trn_fu_1168_p1) + unsigned(S2_y_addr7_reg_1537));
    S2_y_addr4_fu_1196_p2 <= std_logic_vector(unsigned(tmp_68_4_trn_fu_1192_p1) + unsigned(S2_y_addr7_reg_1537));
        S2_y_addr5_cast_fu_918_p1 <= std_logic_vector(resize(signed(S2_y_addr5_fu_912_p2),9));

    S2_y_addr5_fu_912_p2 <= std_logic_vector(unsigned(p_shl15_cast_fu_896_p1) - unsigned(p_shl16_cast_fu_908_p1));
    S2_y_addr6_fu_922_p2 <= std_logic_vector(unsigned(tmp_32_trn_cast_fu_884_p1) + unsigned(S2_y_addr5_cast_fu_918_p1));
    S2_y_addr7_fu_1065_p2 <= std_logic_vector(signed(p_shl2_fu_1050_p1) - signed(p_shl3_fu_1061_p1));
    S2_y_addr8_fu_1071_p2 <= std_logic_vector(unsigned(tmp_30_trn_fu_1001_p1) + unsigned(S2_y_addr7_fu_1065_p2));
    S2_y_addr9_fu_1107_p2 <= std_logic_vector(unsigned(tmp_68_1_trn_fu_1103_p1) + unsigned(S2_y_addr7_fu_1065_p2));

    -- S2_y_address0 assign process. --
    S2_y_address0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_6, ap_sig_cseq_ST_pp0_stg3_fsm_7, ap_sig_cseq_ST_pp0_stg4_fsm_8, tmp_50_fu_1077_p1, tmp_56_fu_1153_p1, tmp_60_fu_1201_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_8)) then 
                S2_y_address0 <= tmp_60_fu_1201_p1(11 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_7)) then 
                S2_y_address0 <= tmp_56_fu_1153_p1(11 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_6)) then 
                S2_y_address0 <= tmp_50_fu_1077_p1(11 - 1 downto 0);
            else 
                S2_y_address0 <= "XXXXXXXXXXX";
            end if;
        else 
            S2_y_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    -- S2_y_address1 assign process. --
    S2_y_address1_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_6, ap_sig_cseq_ST_pp0_stg3_fsm_7, tmp_54_fu_1113_p1, tmp_58_fu_1177_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_7)) then 
                S2_y_address1 <= tmp_58_fu_1177_p1(11 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_6)) then 
                S2_y_address1 <= tmp_54_fu_1113_p1(11 - 1 downto 0);
            else 
                S2_y_address1 <= "XXXXXXXXXXX";
            end if;
        else 
            S2_y_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    -- S2_y_ce0 assign process. --
    S2_y_ce0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_6, ap_sig_cseq_ST_pp0_stg3_fsm_7, ap_sig_cseq_ST_pp0_stg4_fsm_8)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_6)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_7)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_8)))) then 
            S2_y_ce0 <= ap_const_logic_1;
        else 
            S2_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- S2_y_ce1 assign process. --
    S2_y_ce1_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_6, ap_sig_cseq_ST_pp0_stg3_fsm_7)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_6)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_7)))) then 
            S2_y_ce1 <= ap_const_logic_1;
        else 
            S2_y_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st33_fsm_26, exitcond2_fu_1209_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_26) and not((ap_const_lv1_0 = exitcond2_fu_1209_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st33_fsm_26, exitcond2_fu_1209_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_26) and not((ap_const_lv1_0 = exitcond2_fu_1209_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_126 assign process. --
    ap_sig_bdd_126_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_126 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_139 assign process. --
    ap_sig_bdd_139_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_139 <= (ap_const_lv1_1 = ap_CS_fsm(30 downto 30));
    end process;


    -- ap_sig_bdd_149 assign process. --
    ap_sig_bdd_149_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_149 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    -- ap_sig_bdd_157 assign process. --
    ap_sig_bdd_157_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_157 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    -- ap_sig_bdd_166 assign process. --
    ap_sig_bdd_166_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_166 <= (ap_const_lv1_1 = ap_CS_fsm(23 downto 23));
    end process;


    -- ap_sig_bdd_175 assign process. --
    ap_sig_bdd_175_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_175 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_188 assign process. --
    ap_sig_bdd_188_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_188 <= (ap_const_lv1_1 = ap_CS_fsm(35 downto 35));
    end process;


    -- ap_sig_bdd_198 assign process. --
    ap_sig_bdd_198_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_198 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_213 assign process. --
    ap_sig_bdd_213_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_213 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_227 assign process. --
    ap_sig_bdd_227_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_227 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_235 assign process. --
    ap_sig_bdd_235_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_235 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_290 assign process. --
    ap_sig_bdd_290_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_290 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_313 assign process. --
    ap_sig_bdd_313_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_313 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_335 assign process. --
    ap_sig_bdd_335_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_335 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_351 assign process. --
    ap_sig_bdd_351_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_351 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_362 assign process. --
    ap_sig_bdd_362_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_362 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_372 assign process. --
    ap_sig_bdd_372_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_372 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_381 assign process. --
    ap_sig_bdd_381_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_381 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_390 assign process. --
    ap_sig_bdd_390_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_390 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_400 assign process. --
    ap_sig_bdd_400_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_400 <= (ap_const_lv1_1 = ap_CS_fsm(26 downto 26));
    end process;


    -- ap_sig_bdd_413 assign process. --
    ap_sig_bdd_413_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_413 <= (ap_const_lv1_1 = ap_CS_fsm(27 downto 27));
    end process;


    -- ap_sig_bdd_424 assign process. --
    ap_sig_bdd_424_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_424 <= (ap_const_lv1_1 = ap_CS_fsm(28 downto 28));
    end process;


    -- ap_sig_bdd_438 assign process. --
    ap_sig_bdd_438_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_438 <= (ap_const_lv1_1 = ap_CS_fsm(29 downto 29));
    end process;


    -- ap_sig_bdd_454 assign process. --
    ap_sig_bdd_454_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_454 <= (ap_const_lv1_1 = ap_CS_fsm(36 downto 36));
    end process;


    -- ap_sig_bdd_465 assign process. --
    ap_sig_bdd_465_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_465 <= (ap_const_lv1_1 = ap_CS_fsm(25 downto 25));
    end process;


    -- ap_sig_bdd_523 assign process. --
    ap_sig_bdd_523_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_523 <= (ap_const_lv1_1 = ap_CS_fsm(37 downto 37));
    end process;


    -- ap_sig_bdd_56 assign process. --
    ap_sig_bdd_56_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_56 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_571 assign process. --
    ap_sig_bdd_571_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_571 <= (ap_const_lv1_1 = ap_CS_fsm(31 downto 31));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_4 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_4_assign_proc : process(ap_sig_bdd_235)
    begin
        if (ap_sig_bdd_235) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg10_fsm_14 assign process. --
    ap_sig_cseq_ST_pp0_stg10_fsm_14_assign_proc : process(ap_sig_bdd_390)
    begin
        if (ap_sig_bdd_390) then 
            ap_sig_cseq_ST_pp0_stg10_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg10_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg11_fsm_15 assign process. --
    ap_sig_cseq_ST_pp0_stg11_fsm_15_assign_proc : process(ap_sig_bdd_149)
    begin
        if (ap_sig_bdd_149) then 
            ap_sig_cseq_ST_pp0_stg11_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg11_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg15_fsm_19 assign process. --
    ap_sig_cseq_ST_pp0_stg15_fsm_19_assign_proc : process(ap_sig_bdd_157)
    begin
        if (ap_sig_bdd_157) then 
            ap_sig_cseq_ST_pp0_stg15_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg15_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg19_fsm_23 assign process. --
    ap_sig_cseq_ST_pp0_stg19_fsm_23_assign_proc : process(ap_sig_bdd_166)
    begin
        if (ap_sig_bdd_166) then 
            ap_sig_cseq_ST_pp0_stg19_fsm_23 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg19_fsm_23 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg1_fsm_5 assign process. --
    ap_sig_cseq_ST_pp0_stg1_fsm_5_assign_proc : process(ap_sig_bdd_175)
    begin
        if (ap_sig_bdd_175) then 
            ap_sig_cseq_ST_pp0_stg1_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg1_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg21_fsm_25 assign process. --
    ap_sig_cseq_ST_pp0_stg21_fsm_25_assign_proc : process(ap_sig_bdd_465)
    begin
        if (ap_sig_bdd_465) then 
            ap_sig_cseq_ST_pp0_stg21_fsm_25 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg21_fsm_25 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg2_fsm_6 assign process. --
    ap_sig_cseq_ST_pp0_stg2_fsm_6_assign_proc : process(ap_sig_bdd_290)
    begin
        if (ap_sig_bdd_290) then 
            ap_sig_cseq_ST_pp0_stg2_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg2_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg3_fsm_7 assign process. --
    ap_sig_cseq_ST_pp0_stg3_fsm_7_assign_proc : process(ap_sig_bdd_313)
    begin
        if (ap_sig_bdd_313) then 
            ap_sig_cseq_ST_pp0_stg3_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg3_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg4_fsm_8 assign process. --
    ap_sig_cseq_ST_pp0_stg4_fsm_8_assign_proc : process(ap_sig_bdd_335)
    begin
        if (ap_sig_bdd_335) then 
            ap_sig_cseq_ST_pp0_stg4_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg4_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg5_fsm_9 assign process. --
    ap_sig_cseq_ST_pp0_stg5_fsm_9_assign_proc : process(ap_sig_bdd_351)
    begin
        if (ap_sig_bdd_351) then 
            ap_sig_cseq_ST_pp0_stg5_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg5_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg6_fsm_10 assign process. --
    ap_sig_cseq_ST_pp0_stg6_fsm_10_assign_proc : process(ap_sig_bdd_362)
    begin
        if (ap_sig_bdd_362) then 
            ap_sig_cseq_ST_pp0_stg6_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg6_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg7_fsm_11 assign process. --
    ap_sig_cseq_ST_pp0_stg7_fsm_11_assign_proc : process(ap_sig_bdd_126)
    begin
        if (ap_sig_bdd_126) then 
            ap_sig_cseq_ST_pp0_stg7_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg7_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg8_fsm_12 assign process. --
    ap_sig_cseq_ST_pp0_stg8_fsm_12_assign_proc : process(ap_sig_bdd_372)
    begin
        if (ap_sig_bdd_372) then 
            ap_sig_cseq_ST_pp0_stg8_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg8_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg9_fsm_13 assign process. --
    ap_sig_cseq_ST_pp0_stg9_fsm_13_assign_proc : process(ap_sig_bdd_381)
    begin
        if (ap_sig_bdd_381) then 
            ap_sig_cseq_ST_pp0_stg9_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg9_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_56)
    begin
        if (ap_sig_bdd_56) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_198)
    begin
        if (ap_sig_bdd_198) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st33_fsm_26 assign process. --
    ap_sig_cseq_ST_st33_fsm_26_assign_proc : process(ap_sig_bdd_400)
    begin
        if (ap_sig_bdd_400) then 
            ap_sig_cseq_ST_st33_fsm_26 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st33_fsm_26 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st34_fsm_27 assign process. --
    ap_sig_cseq_ST_st34_fsm_27_assign_proc : process(ap_sig_bdd_413)
    begin
        if (ap_sig_bdd_413) then 
            ap_sig_cseq_ST_st34_fsm_27 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st34_fsm_27 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st35_fsm_28 assign process. --
    ap_sig_cseq_ST_st35_fsm_28_assign_proc : process(ap_sig_bdd_424)
    begin
        if (ap_sig_bdd_424) then 
            ap_sig_cseq_ST_st35_fsm_28 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st35_fsm_28 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st36_fsm_29 assign process. --
    ap_sig_cseq_ST_st36_fsm_29_assign_proc : process(ap_sig_bdd_438)
    begin
        if (ap_sig_bdd_438) then 
            ap_sig_cseq_ST_st36_fsm_29 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st36_fsm_29 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st37_fsm_30 assign process. --
    ap_sig_cseq_ST_st37_fsm_30_assign_proc : process(ap_sig_bdd_139)
    begin
        if (ap_sig_bdd_139) then 
            ap_sig_cseq_ST_st37_fsm_30 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st37_fsm_30 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st38_fsm_31 assign process. --
    ap_sig_cseq_ST_st38_fsm_31_assign_proc : process(ap_sig_bdd_571)
    begin
        if (ap_sig_bdd_571) then 
            ap_sig_cseq_ST_st38_fsm_31 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st38_fsm_31 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_213)
    begin
        if (ap_sig_bdd_213) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st42_fsm_35 assign process. --
    ap_sig_cseq_ST_st42_fsm_35_assign_proc : process(ap_sig_bdd_188)
    begin
        if (ap_sig_bdd_188) then 
            ap_sig_cseq_ST_st42_fsm_35 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st42_fsm_35 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st43_fsm_36 assign process. --
    ap_sig_cseq_ST_st43_fsm_36_assign_proc : process(ap_sig_bdd_454)
    begin
        if (ap_sig_bdd_454) then 
            ap_sig_cseq_ST_st43_fsm_36 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st43_fsm_36 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st44_fsm_37 assign process. --
    ap_sig_cseq_ST_st44_fsm_37_assign_proc : process(ap_sig_bdd_523)
    begin
        if (ap_sig_bdd_523) then 
            ap_sig_cseq_ST_st44_fsm_37 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st44_fsm_37 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_227)
    begin
        if (ap_sig_bdd_227) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_1256_p2 <= "1" when (j_2_reg_426 = ap_const_lv4_A) else "0";
    exitcond2_fu_1209_p2 <= "1" when (i_2_reg_414 = ap_const_lv5_10) else "0";
    exitcond3_fu_477_p2 <= "1" when (i_reg_278 = ap_const_lv5_10) else "0";
    exitcond4_fu_628_p2 <= "1" when (n_phi_fu_406_p4 = ap_const_lv3_5) else "0";
    exitcond4_mid1_fu_696_p2 <= (exitcond4_mid_fu_634_p2 and not_exitcond_flatten15_mid_fu_690_p2);
    exitcond4_mid2_fu_783_p2 <= (exitcond4_mid1_reg_1457 and not_exitcond_flatten_mid_reg_1469);
    exitcond4_mid_fu_634_p2 <= (exitcond4_fu_628_p2 and not_exitcond_flatten_fu_622_p2);
    exitcond5_fu_519_p2 <= "1" when (j_reg_289 = ap_const_lv4_A) else "0";
    exitcond9_fu_570_p2 <= "1" when (k_reg_300 = ap_const_lv4_A) else "0";
    exitcond_flatten15_mid_fu_658_p2 <= (exitcond_flatten2_fu_652_p2 and not_exitcond_flatten_fu_622_p2);
    exitcond_flatten15_not_fu_684_p2 <= (exitcond_flatten2_fu_652_p2 xor ap_const_lv1_1);
    exitcond_flatten1_fu_640_p2 <= "1" when (indvar_flatten_phi_fu_382_p4 = ap_const_lv7_32) else "0";
    exitcond_flatten2_fu_652_p2 <= "1" when (indvar_flatten3_phi_fu_359_p4 = ap_const_lv10_1F4) else "0";
    exitcond_flatten3_fu_596_p2 <= "1" when (indvar_flatten1_phi_fu_315_p4 = ap_const_lv16_BB80) else "0";
    exitcond_flatten_fu_608_p2 <= "1" when (indvar_flatten2_phi_fu_337_p4 = ap_const_lv12_BB8) else "0";
    exitcond_flatten_mid1_fu_702_p2 <= (exitcond_flatten_mid_fu_646_p2 and not_exitcond_flatten15_mid_fu_690_p2);
    exitcond_flatten_mid_fu_646_p2 <= (exitcond_flatten1_fu_640_p2 and not_exitcond_flatten_fu_622_p2);
    exitcond_fu_1307_p2 <= "1" when (k_2_reg_437 = ap_const_lv4_A) else "0";
    grp_fu_448_ce <= ap_const_logic_1;

    -- grp_fu_448_p0 assign process. --
    grp_fu_448_p0_assign_proc : process(C3_v_q0, reg_466, ap_sig_cseq_ST_pp0_stg7_fsm_11, ap_reg_ppiten_pp0_it0, grp_fu_448_p2, ap_sig_cseq_ST_pp0_stg11_fsm_15, ap_sig_cseq_ST_pp0_stg15_fsm_19, ap_sig_cseq_ST_pp0_stg19_fsm_23, ap_sig_cseq_ST_pp0_stg1_fsm_5, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_st38_fsm_31)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_31)) then 
            grp_fu_448_p0 <= reg_466;
        elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg11_fsm_15)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg15_fsm_19)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg19_fsm_23)))) then 
            grp_fu_448_p0 <= grp_fu_448_p2;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            grp_fu_448_p0 <= C3_v_q0;
        else 
            grp_fu_448_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_448_p1 assign process. --
    grp_fu_448_p1_assign_proc : process(ap_sig_cseq_ST_pp0_stg7_fsm_11, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg11_fsm_15, ap_sig_cseq_ST_pp0_stg15_fsm_19, ap_sig_cseq_ST_pp0_stg19_fsm_23, ap_sig_cseq_ST_pp0_stg1_fsm_5, ap_reg_ppiten_pp0_it1, tmp_21_reg_1656, tmp_71_1_reg_1661, tmp_71_2_reg_1666, tmp_71_3_reg_1671, tmp_71_4_reg_1676, C3_bias_load_reg_1694, ap_sig_cseq_ST_st38_fsm_31)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_31)) then 
            grp_fu_448_p1 <= C3_bias_load_reg_1694;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            grp_fu_448_p1 <= tmp_71_4_reg_1676;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg19_fsm_23))) then 
            grp_fu_448_p1 <= tmp_71_3_reg_1671;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg15_fsm_19))) then 
            grp_fu_448_p1 <= tmp_71_2_reg_1666;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg11_fsm_15))) then 
            grp_fu_448_p1 <= tmp_71_1_reg_1661;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_11) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            grp_fu_448_p1 <= tmp_21_reg_1656;
        else 
            grp_fu_448_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_455_ce <= ap_const_logic_1;

    -- grp_fu_455_p0 assign process. --
    grp_fu_455_p0_assign_proc : process(S2_y_q0, ap_sig_cseq_ST_pp0_stg7_fsm_11, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg3_fsm_7, S2_y_load_1_reg_1581, S2_y_load_2_reg_1616, ap_sig_cseq_ST_pp0_stg4_fsm_8, S2_y_load_3_reg_1626, S2_y_load_4_reg_1646, ap_sig_cseq_ST_pp0_stg5_fsm_9, ap_sig_cseq_ST_pp0_stg6_fsm_10)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_11)) then 
                grp_fu_455_p0 <= S2_y_load_4_reg_1646;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_10)) then 
                grp_fu_455_p0 <= S2_y_load_3_reg_1626;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_9)) then 
                grp_fu_455_p0 <= S2_y_load_2_reg_1616;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_8)) then 
                grp_fu_455_p0 <= S2_y_load_1_reg_1581;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_7)) then 
                grp_fu_455_p0 <= S2_y_q0;
            else 
                grp_fu_455_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_455_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_455_p1 assign process. --
    grp_fu_455_p1_assign_proc : process(C3_mapData_q0, ap_sig_cseq_ST_pp0_stg7_fsm_11, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg3_fsm_7, C3_mapData_load_1_reg_1586, ap_sig_cseq_ST_pp0_stg4_fsm_8, C3_mapData_load_2_reg_1621, C3_mapData_load_3_reg_1631, ap_sig_cseq_ST_pp0_stg5_fsm_9, C3_mapData_load_4_reg_1651, ap_sig_cseq_ST_pp0_stg6_fsm_10)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_11)) then 
                grp_fu_455_p1 <= C3_mapData_load_4_reg_1651;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_10)) then 
                grp_fu_455_p1 <= C3_mapData_load_3_reg_1631;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_9)) then 
                grp_fu_455_p1 <= C3_mapData_load_2_reg_1621;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_8)) then 
                grp_fu_455_p1 <= C3_mapData_load_1_reg_1586;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_7)) then 
                grp_fu_455_p1 <= C3_mapData_q0;
            else 
                grp_fu_455_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_455_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_1_mid2_fu_670_p3 <= 
        i_s_fu_664_p2 when (exitcond_flatten_fu_608_p2(0) = '1') else 
        i_1_phi_fu_326_p4;

    -- i_1_phi_fu_326_p4 assign process. --
    i_1_phi_fu_326_p4_assign_proc : process(i_1_reg_322, exitcond_flatten3_reg_1418, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg0_fsm_4, i_1_mid2_reg_1444)
    begin
        if (((exitcond_flatten3_reg_1418 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4))) then 
            i_1_phi_fu_326_p4 <= i_1_mid2_reg_1444;
        else 
            i_1_phi_fu_326_p4 <= i_1_reg_322;
        end if; 
    end process;

    i_3_fu_483_p2 <= std_logic_vector(unsigned(i_reg_278) + unsigned(ap_const_lv5_1));
    i_4_fu_1215_p2 <= std_logic_vector(unsigned(i_2_reg_414) + unsigned(ap_const_lv5_1));
    i_s_fu_664_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(i_1_phi_fu_326_p4));
    indvar_flatten13_op_fu_714_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(indvar_flatten3_phi_fu_359_p4));

    -- indvar_flatten1_phi_fu_315_p4 assign process. --
    indvar_flatten1_phi_fu_315_p4_assign_proc : process(indvar_flatten1_reg_311, exitcond_flatten3_reg_1418, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg0_fsm_4, indvar_flatten_next3_reg_1422)
    begin
        if (((exitcond_flatten3_reg_1418 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4))) then 
            indvar_flatten1_phi_fu_315_p4 <= indvar_flatten_next3_reg_1422;
        else 
            indvar_flatten1_phi_fu_315_p4 <= indvar_flatten1_reg_311;
        end if; 
    end process;


    -- indvar_flatten2_phi_fu_337_p4 assign process. --
    indvar_flatten2_phi_fu_337_p4_assign_proc : process(indvar_flatten2_reg_333, exitcond_flatten3_reg_1418, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg0_fsm_4, indvar_flatten_next2_reg_1479)
    begin
        if (((exitcond_flatten3_reg_1418 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4))) then 
            indvar_flatten2_phi_fu_337_p4 <= indvar_flatten_next2_reg_1479;
        else 
            indvar_flatten2_phi_fu_337_p4 <= indvar_flatten2_reg_333;
        end if; 
    end process;

    indvar_flatten33_op_fu_728_p2 <= std_logic_vector(unsigned(ap_const_lv12_1) + unsigned(indvar_flatten2_phi_fu_337_p4));

    -- indvar_flatten3_phi_fu_359_p4 assign process. --
    indvar_flatten3_phi_fu_359_p4_assign_proc : process(indvar_flatten3_reg_355, exitcond_flatten3_reg_1418, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg0_fsm_4, indvar_flatten_next1_reg_1474)
    begin
        if (((exitcond_flatten3_reg_1418 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4))) then 
            indvar_flatten3_phi_fu_359_p4 <= indvar_flatten_next1_reg_1474;
        else 
            indvar_flatten3_phi_fu_359_p4 <= indvar_flatten3_reg_355;
        end if; 
    end process;

    indvar_flatten_next1_fu_720_p3 <= 
        ap_const_lv10_1 when (tmp_36_fu_678_p2(0) = '1') else 
        indvar_flatten13_op_fu_714_p2;
    indvar_flatten_next2_fu_734_p3 <= 
        ap_const_lv12_1 when (exitcond_flatten_fu_608_p2(0) = '1') else 
        indvar_flatten33_op_fu_728_p2;
    indvar_flatten_next3_fu_602_p2 <= std_logic_vector(unsigned(indvar_flatten1_phi_fu_315_p4) + unsigned(ap_const_lv16_1));
    indvar_flatten_next_fu_988_p3 <= 
        ap_const_lv7_1 when (tmp_38_fu_770_p2(0) = '1') else 
        indvar_flatten_op_fu_982_p2;
    indvar_flatten_op_fu_982_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(indvar_flatten_reg_378));

    -- indvar_flatten_phi_fu_382_p4 assign process. --
    indvar_flatten_phi_fu_382_p4_assign_proc : process(indvar_flatten_reg_378, exitcond_flatten3_reg_1418, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg0_fsm_4, indvar_flatten_next_reg_1527)
    begin
        if (((exitcond_flatten3_reg_1418 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4))) then 
            indvar_flatten_phi_fu_382_p4 <= indvar_flatten_next_reg_1527;
        else 
            indvar_flatten_phi_fu_382_p4 <= indvar_flatten_reg_378;
        end if; 
    end process;

    j_1_mid2_fu_754_p3 <= 
        j_4_fu_742_p2 when (exitcond_flatten15_mid_reg_1438(0) = '1') else 
        j_1_mid_reg_1432;
    j_1_mid_fu_614_p3 <= 
        ap_const_lv3_0 when (exitcond_flatten_fu_608_p2(0) = '1') else 
        j_1_phi_fu_348_p4;

    -- j_1_phi_fu_348_p4 assign process. --
    j_1_phi_fu_348_p4_assign_proc : process(j_1_reg_344, exitcond_flatten3_reg_1418, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg0_fsm_4, j_1_mid2_reg_1484)
    begin
        if (((exitcond_flatten3_reg_1418 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4))) then 
            j_1_phi_fu_348_p4 <= j_1_mid2_reg_1484;
        else 
            j_1_phi_fu_348_p4 <= j_1_reg_344;
        end if; 
    end process;

    j_3_fu_525_p2 <= std_logic_vector(unsigned(j_reg_289) + unsigned(ap_const_lv4_1));
    j_4_fu_742_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(j_1_mid_reg_1432));
    j_5_fu_1262_p2 <= std_logic_vector(unsigned(j_2_reg_426) + unsigned(ap_const_lv4_1));
    k_1_mid2_fu_787_p3 <= 
        k_5_fu_760_p2 when (exitcond_flatten_mid1_reg_1462(0) = '1') else 
        k_1_mid_fu_747_p3;
    k_1_mid_fu_747_p3 <= 
        ap_const_lv4_0 when (tmp_36_reg_1451(0) = '1') else 
        k_1_phi_fu_370_p4;

    -- k_1_phi_fu_370_p4 assign process. --
    k_1_phi_fu_370_p4_assign_proc : process(k_1_reg_366, ap_sig_cseq_ST_pp0_stg1_fsm_5, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond_flatten3_reg_1418_pp0_it1, k_1_mid2_reg_1489)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten3_reg_1418_pp0_it1))) then 
            k_1_phi_fu_370_p4 <= k_1_mid2_reg_1489;
        else 
            k_1_phi_fu_370_p4 <= k_1_reg_366;
        end if; 
    end process;

    k_3_fu_576_p2 <= std_logic_vector(unsigned(k_reg_300) + unsigned(ap_const_lv4_1));
    k_4_fu_1313_p2 <= std_logic_vector(unsigned(k_2_reg_437) + unsigned(ap_const_lv4_1));
    k_5_fu_760_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(k_1_mid_fu_747_p3));
    m_1_fu_794_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(m_mid1_fu_775_p3));
    m_mid1_fu_775_p3 <= 
        ap_const_lv4_0 when (tmp_38_fu_770_p2(0) = '1') else 
        m_phi_fu_394_p4;
    m_mid2_fu_818_p3 <= 
        m_1_fu_794_p2 when (exitcond4_mid2_fu_783_p2(0) = '1') else 
        m_mid1_fu_775_p3;

    -- m_phi_fu_394_p4 assign process. --
    m_phi_fu_394_p4_assign_proc : process(m_reg_390, ap_sig_cseq_ST_pp0_stg1_fsm_5, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond_flatten3_reg_1418_pp0_it1, m_mid2_reg_1494)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten3_reg_1418_pp0_it1))) then 
            m_phi_fu_394_p4 <= m_mid2_reg_1494;
        else 
            m_phi_fu_394_p4 <= m_reg_390;
        end if; 
    end process;

    n_1_fu_976_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(n_mid2_fu_810_p3));
    n_mid2_fu_810_p3 <= 
        ap_const_lv3_0 when (tmp_40_fu_805_p2(0) = '1') else 
        n_reg_402;

    -- n_phi_fu_406_p4 assign process. --
    n_phi_fu_406_p4_assign_proc : process(n_reg_402, exitcond_flatten3_reg_1418, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg0_fsm_4, n_1_reg_1522)
    begin
        if (((exitcond_flatten3_reg_1418 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4))) then 
            n_phi_fu_406_p4 <= n_1_reg_1522;
        else 
            n_phi_fu_406_p4 <= n_reg_402;
        end if; 
    end process;

    not_exitcond_flatten15_mid_fu_690_p2 <= (exitcond_flatten_fu_608_p2 or exitcond_flatten15_not_fu_684_p2);
    not_exitcond_flatten_fu_622_p2 <= (exitcond_flatten_fu_608_p2 xor ap_const_lv1_1);
    not_exitcond_flatten_mid_fu_708_p2 <= (exitcond_flatten_mid1_fu_702_p2 xor ap_const_lv1_1);
    notlhs_fu_1351_p2 <= "0" when (tmp_18_fu_1337_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_1357_p2 <= "1" when (tmp_70_fu_1347_p1 = ap_const_lv23_0) else "0";
    p_shl10_cast_fu_509_p1 <= std_logic_vector(resize(unsigned(tmp_35_fu_501_p3),9));
    p_shl11_cast_fu_853_p1 <= std_logic_vector(resize(unsigned(tmp_41_fu_846_p3),9));
    p_shl12_cast_fu_864_p1 <= std_logic_vector(resize(unsigned(tmp_42_fu_857_p3),9));
    p_shl15_cast_fu_896_p1 <= std_logic_vector(resize(unsigned(tmp_46_fu_888_p3),8));
    p_shl16_cast_fu_908_p1 <= std_logic_vector(resize(unsigned(tmp_47_fu_900_p3),8));
    p_shl1_fu_1022_p1 <= std_logic_vector(resize(unsigned(tmp_44_fu_1015_p3),32));
    p_shl25_cast_fu_1234_p1 <= std_logic_vector(resize(unsigned(tmp_62_fu_1226_p3),9));
    p_shl26_cast_fu_1246_p1 <= std_logic_vector(resize(unsigned(tmp_63_fu_1238_p3),9));
        p_shl2_fu_1050_p1 <= std_logic_vector(resize(signed(tmp_48_fu_1043_p3),32));

        p_shl3_fu_1061_p1 <= std_logic_vector(resize(signed(tmp_49_fu_1054_p3),32));

        p_shl4_fu_960_p1 <= std_logic_vector(resize(signed(tmp_51_fu_952_p3),32));

    p_shl5_fu_548_p1 <= std_logic_vector(resize(unsigned(tmp_64_fu_540_p3),32));
    p_shl6_fu_560_p1 <= std_logic_vector(resize(unsigned(tmp_65_fu_552_p3),32));
    p_shl7_fu_1285_p1 <= std_logic_vector(resize(unsigned(tmp_66_fu_1277_p3),32));
    p_shl8_fu_1297_p1 <= std_logic_vector(resize(unsigned(tmp_67_fu_1289_p3),32));
    p_shl_cast_fu_497_p1 <= std_logic_vector(resize(unsigned(tmp_fu_489_p3),9));
    p_shl_fu_1011_p1 <= std_logic_vector(resize(unsigned(tmp_43_fu_1004_p3),32));
    temp_to_int_fu_1333_p1 <= reg_471;
    tmp_18_fu_1337_p4 <= temp_to_int_fu_1333_p1(30 downto 23);
    tmp_19_fu_1221_p1 <= std_logic_vector(resize(unsigned(i_2_reg_414),64));
    tmp_20_fu_836_p2 <= std_logic_vector(signed(ap_const_lv3_4) - signed(n_mid2_fu_810_p3));
    tmp_20_trn_cast_fu_531_p1 <= std_logic_vector(resize(unsigned(j_reg_289),9));
    tmp_21_trn_cast_fu_880_p1 <= std_logic_vector(resize(unsigned(j_1_mid2_fu_754_p3),10));
    tmp_22_trn_cast_fu_1268_p1 <= std_logic_vector(resize(unsigned(j_2_reg_426),9));
    tmp_23_trn_fu_582_p1 <= std_logic_vector(resize(unsigned(k_reg_300),32));
    tmp_24_fu_1363_p2 <= (notrhs_fu_1357_p2 or notlhs_fu_1351_p2);
    tmp_24_trn_cast_fu_842_p1 <= std_logic_vector(resize(unsigned(k_1_mid2_fu_787_p3),9));
    tmp_25_fu_461_opcode <= ap_const_lv5_2;
    tmp_25_fu_461_p0 <= reg_471;
    tmp_25_fu_461_p1 <= ap_const_lv32_0;
    tmp_25_trn_fu_1319_p1 <= std_logic_vector(resize(unsigned(k_2_reg_437),32));
    tmp_26_fu_1369_p2 <= (tmp_24_fu_1363_p2 and tmp_25_fu_461_p2);
    tmp_30_trn_fu_1001_p1 <= std_logic_vector(resize(unsigned(m_mid2_reg_1494),32));
    tmp_32_trn_cast_fu_884_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_830_p2),9));
    tmp_34_trn_fu_948_p1 <= std_logic_vector(resize(unsigned(tmp_20_fu_836_p2),32));
    tmp_35_fu_501_p3 <= (i_reg_278 & ap_const_lv1_0);
    tmp_36_fu_678_p2 <= (exitcond_flatten15_mid_fu_658_p2 or exitcond_flatten_fu_608_p2);
    tmp_37_fu_766_p2 <= (exitcond_flatten_mid1_reg_1462 or exitcond_flatten15_mid_reg_1438);
    tmp_38_cast4_fu_826_p1 <= std_logic_vector(resize(unsigned(n_mid2_fu_810_p3),4));
    tmp_38_fu_770_p2 <= (tmp_37_fu_766_p2 or exitcond_flatten_reg_1427);
    tmp_39_fu_800_p2 <= (exitcond4_mid2_fu_783_p2 or exitcond_flatten_mid1_reg_1462);
    tmp_40_fu_805_p2 <= (tmp_39_fu_800_p2 or tmp_36_reg_1451);
    tmp_41_fu_846_p3 <= (i_1_mid2_reg_1444 & ap_const_lv3_0);
    tmp_42_fu_857_p3 <= (i_1_mid2_reg_1444 & ap_const_lv1_0);
    tmp_43_fu_1004_p3 <= (C3_v_addr3_reg_1504 & ap_const_lv3_0);
    tmp_44_fu_1015_p3 <= (C3_v_addr3_reg_1504 & ap_const_lv1_0);
    tmp_45_fu_1038_p1 <= std_logic_vector(resize(unsigned(C3_v_addr5_fu_1032_p2),64));
    tmp_46_fu_888_p3 <= (j_1_mid2_fu_754_p3 & ap_const_lv4_0);
    tmp_47_fu_900_p3 <= (j_1_mid2_fu_754_p3 & ap_const_lv1_0);
    tmp_48_fu_1043_p3 <= (S2_y_addr6_reg_1510 & ap_const_lv4_0);
    tmp_49_fu_1054_p3 <= (S2_y_addr6_reg_1510 & ap_const_lv1_0);
    tmp_50_fu_1077_p1 <= std_logic_vector(resize(unsigned(S2_y_addr8_fu_1071_p2),64));
    tmp_51_fu_952_p3 <= (C3_mapData_addr2_fu_938_p2 & ap_const_lv2_0);
    tmp_52_fu_1082_p2 <= std_logic_vector(shift_left(unsigned(C3_mapData_addr4_reg_1516),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    tmp_53_fu_1098_p1 <= std_logic_vector(resize(unsigned(C3_mapData_addr6_fu_1092_p2),64));
    tmp_54_fu_1113_p1 <= std_logic_vector(resize(unsigned(S2_y_addr9_fu_1107_p2),64));
    tmp_55_fu_1124_p1 <= std_logic_vector(resize(unsigned(C3_mapData_addr7_fu_1118_p2),64));
    tmp_56_fu_1153_p1 <= std_logic_vector(resize(unsigned(S2_y_addr2_fu_1148_p2),64));
    tmp_57_fu_1163_p1 <= std_logic_vector(resize(unsigned(C3_mapData_addr8_fu_1158_p2),64));
    tmp_58_fu_1177_p1 <= std_logic_vector(resize(unsigned(S2_y_addr3_fu_1172_p2),64));
    tmp_59_fu_1187_p1 <= std_logic_vector(resize(unsigned(C3_mapData_addr9_fu_1182_p2),64));
    tmp_60_fu_1201_p1 <= std_logic_vector(resize(unsigned(S2_y_addr4_reg_1611),64));
    tmp_61_fu_1205_p1 <= std_logic_vector(resize(unsigned(C3_mapData_addr5_reg_1549),64));
    tmp_62_fu_1226_p3 <= (i_2_reg_414 & ap_const_lv3_0);
    tmp_63_fu_1238_p3 <= (i_2_reg_414 & ap_const_lv1_0);
    tmp_64_fu_540_p3 <= (C3_v_addr7_fu_535_p2 & ap_const_lv3_0);
    tmp_65_fu_552_p3 <= (C3_v_addr7_fu_535_p2 & ap_const_lv1_0);
    tmp_66_fu_1277_p3 <= (C3_v_addr6_fu_1272_p2 & ap_const_lv3_0);
    tmp_67_1_fu_996_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(m_mid2_reg_1494));
    tmp_67_2_fu_1129_p2 <= std_logic_vector(unsigned(ap_const_lv4_2) + unsigned(m_mid2_reg_1494));
    tmp_67_3_fu_1134_p2 <= std_logic_vector(unsigned(ap_const_lv4_3) + unsigned(m_mid2_reg_1494));
    tmp_67_4_fu_1139_p2 <= std_logic_vector(unsigned(ap_const_lv4_4) + unsigned(m_mid2_reg_1494));
    tmp_67_fu_1289_p3 <= (C3_v_addr6_fu_1272_p2 & ap_const_lv1_0);
    tmp_68_1_trn_fu_1103_p1 <= std_logic_vector(resize(unsigned(tmp_67_1_fu_996_p2),32));
    tmp_68_2_trn_fu_1144_p1 <= std_logic_vector(resize(unsigned(tmp_67_2_fu_1129_p2),32));
    tmp_68_3_trn_fu_1168_p1 <= std_logic_vector(resize(unsigned(tmp_67_3_fu_1134_p2),32));
    tmp_68_4_trn_fu_1192_p1 <= std_logic_vector(resize(unsigned(tmp_67_4_fu_1139_p2),32));
    tmp_68_fu_591_p1 <= std_logic_vector(resize(unsigned(C3_v_addr10_fu_586_p2),64));
    tmp_69_fu_1328_p1 <= std_logic_vector(resize(unsigned(C3_v_addr12_fu_1323_p2),64));
    tmp_70_fu_1347_p1 <= temp_to_int_fu_1333_p1(23 - 1 downto 0);
    tmp_fu_489_p3 <= (i_reg_278 & ap_const_lv3_0);
    tmp_s_fu_830_p2 <= std_logic_vector(unsigned(k_1_mid2_fu_787_p3) + unsigned(tmp_38_cast4_fu_826_p1));
end behav;
