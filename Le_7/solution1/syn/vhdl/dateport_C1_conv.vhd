-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dateport_C1_conv is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inputimg_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    inputimg_ce0 : OUT STD_LOGIC;
    inputimg_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    inputimg_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    inputimg_ce1 : OUT STD_LOGIC;
    inputimg_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    C1_v_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    C1_v_ce0 : OUT STD_LOGIC;
    C1_v_we0 : OUT STD_LOGIC;
    C1_v_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C1_v_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C1_bias_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    C1_bias_ce0 : OUT STD_LOGIC;
    C1_bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C1_y_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    C1_y_ce0 : OUT STD_LOGIC;
    C1_y_we0 : OUT STD_LOGIC;
    C1_y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C1_mapData_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    C1_mapData_ce0 : OUT STD_LOGIC;
    C1_mapData_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C1_mapData_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    C1_mapData_ce1 : OUT STD_LOGIC;
    C1_mapData_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of dateport_C1_conv is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000001000";
    constant ap_ST_pp0_stg0_fsm_4 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000010000";
    constant ap_ST_pp0_stg1_fsm_5 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000100000";
    constant ap_ST_pp0_stg2_fsm_6 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000001000000";
    constant ap_ST_pp0_stg3_fsm_7 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000010000000";
    constant ap_ST_pp0_stg4_fsm_8 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000100000000";
    constant ap_ST_pp0_stg5_fsm_9 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000001000000000";
    constant ap_ST_pp0_stg6_fsm_10 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000010000000000";
    constant ap_ST_pp0_stg7_fsm_11 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000100000000000";
    constant ap_ST_pp0_stg8_fsm_12 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000001000000000000";
    constant ap_ST_pp0_stg9_fsm_13 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000010000000000000";
    constant ap_ST_pp0_stg10_fsm_14 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000100000000000000";
    constant ap_ST_pp0_stg11_fsm_15 : STD_LOGIC_VECTOR (26 downto 0) := "000000000001000000000000000";
    constant ap_ST_pp0_stg12_fsm_16 : STD_LOGIC_VECTOR (26 downto 0) := "000000000010000000000000000";
    constant ap_ST_pp0_stg13_fsm_17 : STD_LOGIC_VECTOR (26 downto 0) := "000000000100000000000000000";
    constant ap_ST_pp0_stg14_fsm_18 : STD_LOGIC_VECTOR (26 downto 0) := "000000001000000000000000000";
    constant ap_ST_pp0_stg15_fsm_19 : STD_LOGIC_VECTOR (26 downto 0) := "000000010000000000000000000";
    constant ap_ST_pp0_stg16_fsm_20 : STD_LOGIC_VECTOR (26 downto 0) := "000000100000000000000000000";
    constant ap_ST_pp0_stg17_fsm_21 : STD_LOGIC_VECTOR (26 downto 0) := "000001000000000000000000000";
    constant ap_ST_pp0_stg18_fsm_22 : STD_LOGIC_VECTOR (26 downto 0) := "000010000000000000000000000";
    constant ap_ST_pp0_stg19_fsm_23 : STD_LOGIC_VECTOR (26 downto 0) := "000100000000000000000000000";
    constant ap_ST_pp0_stg20_fsm_24 : STD_LOGIC_VECTOR (26 downto 0) := "001000000000000000000000000";
    constant ap_ST_pp0_stg21_fsm_25 : STD_LOGIC_VECTOR (26 downto 0) := "010000000000000000000000000";
    constant ap_ST_st40_fsm_26 : STD_LOGIC_VECTOR (26 downto 0) := "100000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv15_5BE0 : STD_LOGIC_VECTOR (14 downto 0) := "101101111100000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv13_F50 : STD_LOGIC_VECTOR (12 downto 0) := "0111101010000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv8_8C : STD_LOGIC_VECTOR (7 downto 0) := "10001100";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_45 : BOOLEAN;
    signal indvar_flatten3_reg_286 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_1_reg_297 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten4_reg_309 : STD_LOGIC_VECTOR (12 downto 0);
    signal j_1_reg_320 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_reg_331 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_1_reg_342 : STD_LOGIC_VECTOR (4 downto 0);
    signal m_reg_353 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_365_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_382 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp0_stg11_fsm_15 : STD_LOGIC;
    signal ap_sig_bdd_110 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal exitcond_flatten_reg_1049 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg15_fsm_19 : STD_LOGIC;
    signal ap_sig_bdd_125 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg19_fsm_23 : STD_LOGIC;
    signal ap_sig_bdd_134 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg1_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_143 : BOOLEAN;
    signal ap_reg_ppstg_exitcond_flatten_reg_1049_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg5_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_154 : BOOLEAN;
    signal exitcond7_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_165 : BOOLEAN;
    signal i_2_fu_393_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_1018 : STD_LOGIC_VECTOR (2 downto 0);
    signal C1_v_addr8_cast_fu_429_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal C1_v_addr8_cast_reg_1023 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_2_fu_439_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_2_reg_1031 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_180 : BOOLEAN;
    signal C1_v_addr11_fu_478_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C1_v_addr11_reg_1036 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond6_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_2_fu_490_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_194 : BOOLEAN;
    signal exitcond_flatten_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_202 : BOOLEAN;
    signal indvar_flatten_next3_fu_516_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal indvar_flatten_next3_reg_1053 : STD_LOGIC_VECTOR (14 downto 0);
    signal exitcond_flatten7_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten7_reg_1058 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_mid_fu_528_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_1_mid_reg_1064 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_flatten_mid_fu_560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_mid_reg_1070 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_1_mid_fu_572_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_1_mid_reg_1076 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond1_mid3_fu_592_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_mid3_reg_1082 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_604_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten_next_reg_1088 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten_next4_fu_618_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal indvar_flatten_next4_reg_1093 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_mid2_fu_632_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_mid2_reg_1098 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_i_1_mid2_reg_1098_pp0_it1 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_1_mid2_fu_644_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_1_mid2_reg_1105 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_1_mid2_fu_672_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_1_mid2_reg_1111 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_22_fu_688_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_22_reg_1120 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_311_fu_704_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_311_reg_1127 : STD_LOGIC_VECTOR (4 downto 0);
    signal C1_mapData_addr2_fu_739_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal C1_mapData_addr2_reg_1137 : STD_LOGIC_VECTOR (5 downto 0);
    signal m_1_fu_758_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal m_1_reg_1148 : STD_LOGIC_VECTOR (2 downto 0);
    signal ifzero_fu_764_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero_reg_1153 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_ifzero_reg_1153_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal inputimg_load_reg_1157 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp0_stg2_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_258 : BOOLEAN;
    signal C1_mapData_addr3_fu_794_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C1_mapData_addr3_reg_1162 : STD_LOGIC_VECTOR (31 downto 0);
    signal inputimg_load_1_reg_1174 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp0_stg3_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_278 : BOOLEAN;
    signal C1_mapData_load_1_reg_1199 : STD_LOGIC_VECTOR (31 downto 0);
    signal inputimg_load_2_reg_1204 : STD_LOGIC_VECTOR (31 downto 0);
    signal inputimg_load_3_reg_1214 : STD_LOGIC_VECTOR (31 downto 0);
    signal C1_mapData_load_2_reg_1229 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp0_stg4_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_296 : BOOLEAN;
    signal C1_mapData_load_3_reg_1234 : STD_LOGIC_VECTOR (31 downto 0);
    signal inputimg_load_4_reg_1239 : STD_LOGIC_VECTOR (31 downto 0);
    signal C1_v_addr4_fu_914_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal C1_v_addr4_reg_1249 : STD_LOGIC_VECTOR (9 downto 0);
    signal C1_mapData_load_4_reg_1255 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_312_fu_957_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_312_reg_1260 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_pp0_stg6_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_314 : BOOLEAN;
    signal ap_reg_ppstg_tmp_312_reg_1260_pp0_it1 : STD_LOGIC_VECTOR (63 downto 0);
    signal C1_v_addr_7_reg_1265 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_372_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_reg_1270 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp0_stg7_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_329 : BOOLEAN;
    signal tmp_31_1_reg_1280 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_2_reg_1285 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp0_stg8_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_339 : BOOLEAN;
    signal tmp_31_3_reg_1290 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp0_stg9_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_348 : BOOLEAN;
    signal tmp_31_4_reg_1295 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp0_stg10_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_357 : BOOLEAN;
    signal C1_bias_load_reg_1305 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_reg_1310 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_84_fu_1001_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_84_reg_1317 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg21_fsm_25 : STD_LOGIC;
    signal ap_sig_bdd_381 : BOOLEAN;
    signal i_reg_253 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_264 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond5_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_reg_275 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten3_phi_fu_290_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_1_phi_fu_301_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten4_phi_fu_313_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal j_1_phi_fu_324_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_phi_fu_335_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_1_phi_fu_346_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal m_phi_fu_357_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_328_fu_505_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_314_fu_724_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_317_fu_753_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_315_fu_806_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_318_fu_817_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_320_fu_829_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_323_fu_841_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_321_fu_856_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_324_fu_866_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_326_fu_878_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_327_fu_883_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_962_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_pp0_stg12_fsm_16 : STD_LOGIC;
    signal ap_sig_bdd_448 : BOOLEAN;
    signal grp_fu_365_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_365_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_372_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_372_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_83_fu_377_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_83_fu_377_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_399_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_307_fu_411_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_cast_fu_407_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl74_cast_fu_419_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal C1_v_addr8_fu_423_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_14_trn_cast_fu_445_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal C1_v_addr10_fu_449_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_150_fu_454_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_151_fu_466_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl51_fu_462_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl52_fu_474_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_trn_fu_496_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal C1_v_addr12_fu_500_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten8_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_308_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_not_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_mid_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_mid_fu_586_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_op_fu_598_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten14_op_fu_612_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_s_fu_626_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_3_fu_639_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_309_fu_655_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_145_fu_659_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_3_fu_650_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal m_mid2_fu_664_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_21_cast1_fu_684_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_313_fu_716_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_24_fu_694_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_trn_cast_fu_700_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl82_cast1_fu_712_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal C1_mapData_addr1_fu_733_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_25_trn_cast_fu_729_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_27_1_fu_678_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_316_fu_745_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_148_fu_783_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal C1_mapData_addr2_cast_fu_780_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl50_fu_790_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal C1_mapData_addr4_fu_800_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C1_mapData_addr5_fu_811_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_2_fu_770_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_319_fu_822_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_27_3_fu_775_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_322_fu_834_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal C1_mapData_addr6_fu_851_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C1_mapData_addr7_fu_861_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_4_fu_846_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_325_fu_871_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_310_fu_890_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl81_cast_fu_897_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl82_cast_fu_901_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal C1_v_addr9_fu_904_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal C1_v_addr9_cast_fu_910_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_15_trn_cast_fu_887_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_146_fu_923_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_147_fu_934_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl_fu_930_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl49_fu_941_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal C1_v_addr5_fu_945_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_trn_fu_920_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal C1_v_addr6_fu_951_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_to_int_fu_966_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_80_fu_969_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_149_fu_979_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_989_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_983_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_82_fu_995_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_83_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_365_ce : STD_LOGIC;
    signal grp_fu_372_ce : STD_LOGIC;
    signal tmp_83_fu_377_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st40_fsm_26 : STD_LOGIC;
    signal ap_sig_bdd_891 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (26 downto 0);

    component dateport_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dateport_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dateport_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    dateport_fadd_32ns_32ns_32_5_full_dsp_U0 : component dateport_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_365_p0,
        din1 => grp_fu_365_p1,
        ce => grp_fu_365_ce,
        dout => grp_fu_365_p2);

    dateport_fmul_32ns_32ns_32_4_max_dsp_U1 : component dateport_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_372_p0,
        din1 => grp_fu_372_p1,
        ce => grp_fu_372_ce,
        dout => grp_fu_372_p2);

    dateport_fcmp_32ns_32ns_1_1_U2 : component dateport_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => tmp_83_fu_377_p0,
        din1 => tmp_83_fu_377_p1,
        opcode => tmp_83_fu_377_opcode,
        dout => tmp_83_fu_377_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and not((ap_const_lv1_0 = exitcond_flatten_fu_510_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond7_fu_387_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((exitcond_flatten_reg_1049 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg21_fsm_25))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond7_fu_387_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg21_fsm_25) and not((exitcond_flatten_reg_1049 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_1_reg_297 assign process. --
    i_1_reg_297_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond7_fu_387_p2)))) then 
                i_1_reg_297 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_1049_pp0_it1))) then 
                i_1_reg_297 <= i_1_mid2_reg_1098;
            end if; 
        end if;
    end process;

    -- i_reg_253 assign process. --
    i_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond6_fu_433_p2)))) then 
                i_reg_253 <= i_2_reg_1018;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_253 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- indvar_flatten3_reg_286 assign process. --
    indvar_flatten3_reg_286_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond7_fu_387_p2)))) then 
                indvar_flatten3_reg_286 <= ap_const_lv15_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_1049 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4))) then 
                indvar_flatten3_reg_286 <= indvar_flatten_next3_reg_1053;
            end if; 
        end if;
    end process;

    -- indvar_flatten4_reg_309 assign process. --
    indvar_flatten4_reg_309_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond7_fu_387_p2)))) then 
                indvar_flatten4_reg_309 <= ap_const_lv13_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_1049 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4))) then 
                indvar_flatten4_reg_309 <= indvar_flatten_next4_reg_1093;
            end if; 
        end if;
    end process;

    -- indvar_flatten_reg_331 assign process. --
    indvar_flatten_reg_331_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond7_fu_387_p2)))) then 
                indvar_flatten_reg_331 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_1049 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4))) then 
                indvar_flatten_reg_331 <= indvar_flatten_next_reg_1088;
            end if; 
        end if;
    end process;

    -- j_1_reg_320 assign process. --
    j_1_reg_320_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond7_fu_387_p2)))) then 
                j_1_reg_320 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_1049 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4))) then 
                j_1_reg_320 <= j_1_mid2_reg_1105;
            end if; 
        end if;
    end process;

    -- j_reg_264 assign process. --
    j_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond5_fu_484_p2)))) then 
                j_reg_264 <= j_2_reg_1031;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond7_fu_387_p2))) then 
                j_reg_264 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- k_1_reg_342 assign process. --
    k_1_reg_342_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond7_fu_387_p2)))) then 
                k_1_reg_342 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_1049 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4))) then 
                k_1_reg_342 <= k_1_mid2_reg_1111;
            end if; 
        end if;
    end process;

    -- k_reg_275 assign process. --
    k_reg_275_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond6_fu_433_p2))) then 
                k_reg_275 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond5_fu_484_p2))) then 
                k_reg_275 <= k_2_fu_490_p2;
            end if; 
        end if;
    end process;

    -- m_reg_353 assign process. --
    m_reg_353_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond7_fu_387_p2)))) then 
                m_reg_353 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_1049 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4))) then 
                m_reg_353 <= m_1_reg_1148;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_9) and not((ap_const_lv1_0 = ap_reg_ppstg_ifzero_reg_1153_pp0_it1)))) then
                C1_bias_load_reg_1305 <= C1_bias_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1049 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5))) then
                C1_mapData_addr2_reg_1137 <= C1_mapData_addr2_fu_739_p2;
                ifzero_reg_1153 <= ifzero_fu_764_p2;
                tmp_22_reg_1120 <= tmp_22_fu_688_p2;
                    tmp_311_reg_1127(4 downto 2) <= tmp_311_fu_704_p3(4 downto 2);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1049 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_6))) then
                C1_mapData_addr3_reg_1162 <= C1_mapData_addr3_fu_794_p2;
                inputimg_load_1_reg_1174 <= inputimg_q1;
                inputimg_load_reg_1157 <= inputimg_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1049 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_7))) then
                C1_mapData_load_1_reg_1199 <= C1_mapData_q1;
                inputimg_load_2_reg_1204 <= inputimg_q0;
                inputimg_load_3_reg_1214 <= inputimg_q1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1049 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_8))) then
                C1_mapData_load_2_reg_1229 <= C1_mapData_q0;
                C1_mapData_load_3_reg_1234 <= C1_mapData_q1;
                inputimg_load_4_reg_1239 <= inputimg_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1049 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_9))) then
                C1_mapData_load_4_reg_1255 <= C1_mapData_q0;
                C1_v_addr4_reg_1249 <= C1_v_addr4_fu_914_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond6_fu_433_p2))) then
                    C1_v_addr11_reg_1036(31 downto 2) <= C1_v_addr11_fu_478_p2(31 downto 2);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond7_fu_387_p2))) then
                    C1_v_addr8_cast_reg_1023(9 downto 2) <= C1_v_addr8_cast_fu_429_p1(9 downto 2);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1049 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_10))) then
                C1_v_addr_7_reg_1265 <= tmp_312_fu_957_p1(13 - 1 downto 0);
                    tmp_312_reg_1260(31 downto 0) <= tmp_312_fu_957_p1(31 downto 0);
                tmp_31_reg_1270 <= grp_fu_372_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4)) then
                ap_reg_ppstg_exitcond_flatten_reg_1049_pp0_it1 <= exitcond_flatten_reg_1049;
                exitcond_flatten_reg_1049 <= exitcond_flatten_fu_510_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5)) then
                ap_reg_ppstg_i_1_mid2_reg_1098_pp0_it1 <= i_1_mid2_reg_1098;
                ap_reg_ppstg_ifzero_reg_1153_pp0_it1 <= ifzero_reg_1153;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_10)) then
                    ap_reg_ppstg_tmp_312_reg_1260_pp0_it1(31 downto 0) <= tmp_312_reg_1260(31 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_lv1_0 = exitcond_flatten_fu_510_p2))) then
                exitcond1_mid3_reg_1082 <= exitcond1_mid3_fu_592_p2;
                exitcond_flatten7_reg_1058 <= exitcond_flatten7_fu_522_p2;
                exitcond_flatten_mid_reg_1070 <= exitcond_flatten_mid_fu_560_p2;
                j_1_mid_reg_1064 <= j_1_mid_fu_528_p3;
                k_1_mid_reg_1076 <= k_1_mid_fu_572_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_reg_1049 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5))) then
                i_1_mid2_reg_1098 <= i_1_mid2_fu_632_p3;
                j_1_mid2_reg_1105 <= j_1_mid2_fu_644_p3;
                k_1_mid2_reg_1111 <= k_1_mid2_fu_672_p3;
                m_1_reg_1148 <= m_1_fu_758_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_2_reg_1018 <= i_2_fu_393_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4))) then
                indvar_flatten_next3_reg_1053 <= indvar_flatten_next3_fu_516_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_lv1_0 = exitcond_flatten_fu_510_p2))) then
                indvar_flatten_next4_reg_1093 <= indvar_flatten_next4_fu_618_p3;
                indvar_flatten_next_reg_1088 <= indvar_flatten_next_fu_604_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                j_2_reg_1031 <= j_2_fu_439_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg11_fsm_15) and (exitcond_flatten_reg_1049 = ap_const_lv1_0)) or ((exitcond_flatten_reg_1049 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg15_fsm_19)) or ((exitcond_flatten_reg_1049 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg19_fsm_23)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_1049_pp0_it1)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_1049_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_9)))) then
                reg_382 <= grp_fu_365_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg10_fsm_14) and not((ap_const_lv1_0 = ap_reg_ppstg_ifzero_reg_1153_pp0_it1)))) then
                temp_reg_1310 <= grp_fu_365_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1049 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_11))) then
                tmp_31_1_reg_1280 <= grp_fu_372_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1049 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg8_fsm_12))) then
                tmp_31_2_reg_1285 <= grp_fu_372_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1049 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg9_fsm_13))) then
                tmp_31_3_reg_1290 <= grp_fu_372_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1049 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg10_fsm_14))) then
                tmp_31_4_reg_1295 <= grp_fu_372_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg11_fsm_15) and not((ap_const_lv1_0 = ap_reg_ppstg_ifzero_reg_1153_pp0_it1)))) then
                tmp_84_reg_1317 <= tmp_84_fu_1001_p2;
            end if;
        end if;
    end process;
    C1_v_addr8_cast_reg_1023(1 downto 0) <= "00";
    C1_v_addr11_reg_1036(1 downto 0) <= "00";
    tmp_311_reg_1127(1 downto 0) <= "00";
    tmp_312_reg_1260(63 downto 32) <= "00000000000000000000000000000000";
    ap_reg_ppstg_tmp_312_reg_1260_pp0_it1(63 downto 32) <= "00000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, exitcond7_fu_387_p2, exitcond6_fu_433_p2, exitcond_flatten_fu_510_p2, exitcond5_fu_484_p2, ap_sig_cseq_ST_pp0_stg12_fsm_16)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((ap_const_lv1_0 = exitcond7_fu_387_p2)) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_4;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((ap_const_lv1_0 = exitcond6_fu_433_p2)) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st4_fsm_3 => 
                if ((ap_const_lv1_0 = exitcond5_fu_484_p2)) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_pp0_stg0_fsm_4 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond_flatten_fu_510_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st40_fsm_26;
                end if;
            when ap_ST_pp0_stg1_fsm_5 => 
                ap_NS_fsm <= ap_ST_pp0_stg2_fsm_6;
            when ap_ST_pp0_stg2_fsm_6 => 
                ap_NS_fsm <= ap_ST_pp0_stg3_fsm_7;
            when ap_ST_pp0_stg3_fsm_7 => 
                ap_NS_fsm <= ap_ST_pp0_stg4_fsm_8;
            when ap_ST_pp0_stg4_fsm_8 => 
                ap_NS_fsm <= ap_ST_pp0_stg5_fsm_9;
            when ap_ST_pp0_stg5_fsm_9 => 
                ap_NS_fsm <= ap_ST_pp0_stg6_fsm_10;
            when ap_ST_pp0_stg6_fsm_10 => 
                ap_NS_fsm <= ap_ST_pp0_stg7_fsm_11;
            when ap_ST_pp0_stg7_fsm_11 => 
                ap_NS_fsm <= ap_ST_pp0_stg8_fsm_12;
            when ap_ST_pp0_stg8_fsm_12 => 
                ap_NS_fsm <= ap_ST_pp0_stg9_fsm_13;
            when ap_ST_pp0_stg9_fsm_13 => 
                ap_NS_fsm <= ap_ST_pp0_stg10_fsm_14;
            when ap_ST_pp0_stg10_fsm_14 => 
                ap_NS_fsm <= ap_ST_pp0_stg11_fsm_15;
            when ap_ST_pp0_stg11_fsm_15 => 
                ap_NS_fsm <= ap_ST_pp0_stg12_fsm_16;
            when ap_ST_pp0_stg12_fsm_16 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg12_fsm_16) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it0))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg13_fsm_17;
                else
                    ap_NS_fsm <= ap_ST_st40_fsm_26;
                end if;
            when ap_ST_pp0_stg13_fsm_17 => 
                ap_NS_fsm <= ap_ST_pp0_stg14_fsm_18;
            when ap_ST_pp0_stg14_fsm_18 => 
                ap_NS_fsm <= ap_ST_pp0_stg15_fsm_19;
            when ap_ST_pp0_stg15_fsm_19 => 
                ap_NS_fsm <= ap_ST_pp0_stg16_fsm_20;
            when ap_ST_pp0_stg16_fsm_20 => 
                ap_NS_fsm <= ap_ST_pp0_stg17_fsm_21;
            when ap_ST_pp0_stg17_fsm_21 => 
                ap_NS_fsm <= ap_ST_pp0_stg18_fsm_22;
            when ap_ST_pp0_stg18_fsm_22 => 
                ap_NS_fsm <= ap_ST_pp0_stg19_fsm_23;
            when ap_ST_pp0_stg19_fsm_23 => 
                ap_NS_fsm <= ap_ST_pp0_stg20_fsm_24;
            when ap_ST_pp0_stg20_fsm_24 => 
                ap_NS_fsm <= ap_ST_pp0_stg21_fsm_25;
            when ap_ST_pp0_stg21_fsm_25 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_4;
            when ap_ST_st40_fsm_26 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    C1_bias_address0 <= tmp_s_fu_962_p1(3 - 1 downto 0);

    -- C1_bias_ce0 assign process. --
    C1_bias_ce0_assign_proc : process(ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg4_fsm_8)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_8))) then 
            C1_bias_ce0 <= ap_const_logic_1;
        else 
            C1_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C1_mapData_addr1_fu_733_p2 <= std_logic_vector(unsigned(tmp_trn_cast_fu_700_p1) + unsigned(p_shl82_cast1_fu_712_p1));
    C1_mapData_addr2_cast_fu_780_p1 <= std_logic_vector(resize(unsigned(C1_mapData_addr2_reg_1137),32));
    C1_mapData_addr2_fu_739_p2 <= std_logic_vector(unsigned(C1_mapData_addr1_fu_733_p2) + unsigned(tmp_25_trn_cast_fu_729_p1));
    C1_mapData_addr3_fu_794_p2 <= std_logic_vector(unsigned(C1_mapData_addr2_cast_fu_780_p1) + unsigned(p_shl50_fu_790_p1));
    C1_mapData_addr4_fu_800_p2 <= std_logic_vector(unsigned(C1_mapData_addr3_fu_794_p2) + unsigned(ap_const_lv32_4));
    C1_mapData_addr5_fu_811_p2 <= std_logic_vector(unsigned(C1_mapData_addr3_fu_794_p2) + unsigned(ap_const_lv32_3));
    C1_mapData_addr6_fu_851_p2 <= std_logic_vector(unsigned(C1_mapData_addr3_reg_1162) + unsigned(ap_const_lv32_2));
    C1_mapData_addr7_fu_861_p2 <= std_logic_vector(unsigned(C1_mapData_addr3_reg_1162) + unsigned(ap_const_lv32_1));

    -- C1_mapData_address0 assign process. --
    C1_mapData_address0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_6, ap_sig_cseq_ST_pp0_stg3_fsm_7, ap_sig_cseq_ST_pp0_stg4_fsm_8, tmp_315_fu_806_p1, tmp_321_fu_856_p1, tmp_327_fu_883_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_8)) then 
                C1_mapData_address0 <= tmp_327_fu_883_p1(8 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_7)) then 
                C1_mapData_address0 <= tmp_321_fu_856_p1(8 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_6)) then 
                C1_mapData_address0 <= tmp_315_fu_806_p1(8 - 1 downto 0);
            else 
                C1_mapData_address0 <= "XXXXXXXX";
            end if;
        else 
            C1_mapData_address0 <= "XXXXXXXX";
        end if; 
    end process;


    -- C1_mapData_address1 assign process. --
    C1_mapData_address1_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_6, ap_sig_cseq_ST_pp0_stg3_fsm_7, tmp_318_fu_817_p1, tmp_324_fu_866_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_7)) then 
                C1_mapData_address1 <= tmp_324_fu_866_p1(8 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_6)) then 
                C1_mapData_address1 <= tmp_318_fu_817_p1(8 - 1 downto 0);
            else 
                C1_mapData_address1 <= "XXXXXXXX";
            end if;
        else 
            C1_mapData_address1 <= "XXXXXXXX";
        end if; 
    end process;


    -- C1_mapData_ce0 assign process. --
    C1_mapData_ce0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_6, ap_sig_cseq_ST_pp0_stg3_fsm_7, ap_sig_cseq_ST_pp0_stg4_fsm_8)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_6)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_7)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_8)))) then 
            C1_mapData_ce0 <= ap_const_logic_1;
        else 
            C1_mapData_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- C1_mapData_ce1 assign process. --
    C1_mapData_ce1_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_6, ap_sig_cseq_ST_pp0_stg3_fsm_7)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_6)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_7)))) then 
            C1_mapData_ce1 <= ap_const_logic_1;
        else 
            C1_mapData_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    C1_v_addr10_fu_449_p2 <= std_logic_vector(signed(C1_v_addr8_cast_reg_1023) + signed(tmp_14_trn_cast_fu_445_p1));
    C1_v_addr11_fu_478_p2 <= std_logic_vector(signed(p_shl51_fu_462_p1) - signed(p_shl52_fu_474_p1));
    C1_v_addr12_fu_500_p2 <= std_logic_vector(signed(C1_v_addr11_reg_1036) + signed(tmp_17_trn_fu_496_p1));
    C1_v_addr4_fu_914_p2 <= std_logic_vector(signed(C1_v_addr9_cast_fu_910_p1) + signed(tmp_15_trn_cast_fu_887_p1));
    C1_v_addr5_fu_945_p2 <= std_logic_vector(signed(p_shl_fu_930_p1) - signed(p_shl49_fu_941_p1));
    C1_v_addr6_fu_951_p2 <= std_logic_vector(signed(C1_v_addr5_fu_945_p2) + signed(tmp_18_trn_fu_920_p1));
        C1_v_addr8_cast_fu_429_p1 <= std_logic_vector(resize(signed(C1_v_addr8_fu_423_p2),10));

    C1_v_addr8_fu_423_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_407_p1) - unsigned(p_shl74_cast_fu_419_p1));
        C1_v_addr9_cast_fu_910_p1 <= std_logic_vector(resize(signed(C1_v_addr9_fu_904_p2),10));

    C1_v_addr9_fu_904_p2 <= std_logic_vector(unsigned(p_shl81_cast_fu_897_p1) - unsigned(p_shl82_cast_fu_901_p1));

    -- C1_v_address0 assign process. --
    C1_v_address0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg5_fsm_9, ap_sig_cseq_ST_st4_fsm_3, tmp_312_fu_957_p1, ap_sig_cseq_ST_pp0_stg6_fsm_10, C1_v_addr_7_reg_1265, tmp_328_fu_505_p1)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_9))) then 
            C1_v_address0 <= C1_v_addr_7_reg_1265;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            C1_v_address0 <= tmp_328_fu_505_p1(13 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_10))) then 
            C1_v_address0 <= tmp_312_fu_957_p1(13 - 1 downto 0);
        else 
            C1_v_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    -- C1_v_ce0 assign process. --
    C1_v_ce0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg5_fsm_9, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_pp0_stg6_fsm_10)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_10)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_9)))) then 
            C1_v_ce0 <= ap_const_logic_1;
        else 
            C1_v_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- C1_v_d0 assign process. --
    C1_v_d0_assign_proc : process(grp_fu_365_p2, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg5_fsm_9, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_9))) then 
            C1_v_d0 <= grp_fu_365_p2;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            C1_v_d0 <= ap_const_lv32_0;
        else 
            C1_v_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- C1_v_we0 assign process. --
    C1_v_we0_assign_proc : process(ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond_flatten_reg_1049_pp0_it1, ap_sig_cseq_ST_pp0_stg5_fsm_9, ap_sig_cseq_ST_st4_fsm_3, exitcond5_fu_484_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond5_fu_484_p2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_1049_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_9)))) then 
            C1_v_we0 <= ap_const_logic_1;
        else 
            C1_v_we0 <= ap_const_logic_0;
        end if; 
    end process;

    C1_y_address0 <= ap_reg_ppstg_tmp_312_reg_1260_pp0_it1(13 - 1 downto 0);

    -- C1_y_ce0 assign process. --
    C1_y_ce0_assign_proc : process(ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg12_fsm_16)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg12_fsm_16))) then 
            C1_y_ce0 <= ap_const_logic_1;
        else 
            C1_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C1_y_d0 <= 
        temp_reg_1310 when (tmp_84_reg_1317(0) = '1') else 
        ap_const_lv32_0;

    -- C1_y_we0 assign process. --
    C1_y_we0_assign_proc : process(ap_reg_ppiten_pp0_it1, ap_reg_ppstg_ifzero_reg_1153_pp0_it1, ap_sig_cseq_ST_pp0_stg12_fsm_16)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_const_lv1_0 = ap_reg_ppstg_ifzero_reg_1153_pp0_it1)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg12_fsm_16)))) then 
            C1_y_we0 <= ap_const_logic_1;
        else 
            C1_y_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st40_fsm_26)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_26))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st40_fsm_26)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_26)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_110 assign process. --
    ap_sig_bdd_110_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_110 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    -- ap_sig_bdd_125 assign process. --
    ap_sig_bdd_125_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_125 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    -- ap_sig_bdd_134 assign process. --
    ap_sig_bdd_134_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_134 <= (ap_const_lv1_1 = ap_CS_fsm(23 downto 23));
    end process;


    -- ap_sig_bdd_143 assign process. --
    ap_sig_bdd_143_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_143 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_154 assign process. --
    ap_sig_bdd_154_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_154 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_165 assign process. --
    ap_sig_bdd_165_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_165 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_180 assign process. --
    ap_sig_bdd_180_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_180 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_194 assign process. --
    ap_sig_bdd_194_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_194 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_202 assign process. --
    ap_sig_bdd_202_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_202 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_258 assign process. --
    ap_sig_bdd_258_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_258 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_278 assign process. --
    ap_sig_bdd_278_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_278 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_296 assign process. --
    ap_sig_bdd_296_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_296 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_314 assign process. --
    ap_sig_bdd_314_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_314 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_329 assign process. --
    ap_sig_bdd_329_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_329 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_339 assign process. --
    ap_sig_bdd_339_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_339 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_348 assign process. --
    ap_sig_bdd_348_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_348 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_357 assign process. --
    ap_sig_bdd_357_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_357 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_381 assign process. --
    ap_sig_bdd_381_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_381 <= (ap_const_lv1_1 = ap_CS_fsm(25 downto 25));
    end process;


    -- ap_sig_bdd_448 assign process. --
    ap_sig_bdd_448_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_448 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    -- ap_sig_bdd_45 assign process. --
    ap_sig_bdd_45_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_45 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_891 assign process. --
    ap_sig_bdd_891_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_891 <= (ap_const_lv1_1 = ap_CS_fsm(26 downto 26));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_4 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_4_assign_proc : process(ap_sig_bdd_202)
    begin
        if (ap_sig_bdd_202) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg10_fsm_14 assign process. --
    ap_sig_cseq_ST_pp0_stg10_fsm_14_assign_proc : process(ap_sig_bdd_357)
    begin
        if (ap_sig_bdd_357) then 
            ap_sig_cseq_ST_pp0_stg10_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg10_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg11_fsm_15 assign process. --
    ap_sig_cseq_ST_pp0_stg11_fsm_15_assign_proc : process(ap_sig_bdd_110)
    begin
        if (ap_sig_bdd_110) then 
            ap_sig_cseq_ST_pp0_stg11_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg11_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg12_fsm_16 assign process. --
    ap_sig_cseq_ST_pp0_stg12_fsm_16_assign_proc : process(ap_sig_bdd_448)
    begin
        if (ap_sig_bdd_448) then 
            ap_sig_cseq_ST_pp0_stg12_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg12_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg15_fsm_19 assign process. --
    ap_sig_cseq_ST_pp0_stg15_fsm_19_assign_proc : process(ap_sig_bdd_125)
    begin
        if (ap_sig_bdd_125) then 
            ap_sig_cseq_ST_pp0_stg15_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg15_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg19_fsm_23 assign process. --
    ap_sig_cseq_ST_pp0_stg19_fsm_23_assign_proc : process(ap_sig_bdd_134)
    begin
        if (ap_sig_bdd_134) then 
            ap_sig_cseq_ST_pp0_stg19_fsm_23 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg19_fsm_23 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg1_fsm_5 assign process. --
    ap_sig_cseq_ST_pp0_stg1_fsm_5_assign_proc : process(ap_sig_bdd_143)
    begin
        if (ap_sig_bdd_143) then 
            ap_sig_cseq_ST_pp0_stg1_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg1_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg21_fsm_25 assign process. --
    ap_sig_cseq_ST_pp0_stg21_fsm_25_assign_proc : process(ap_sig_bdd_381)
    begin
        if (ap_sig_bdd_381) then 
            ap_sig_cseq_ST_pp0_stg21_fsm_25 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg21_fsm_25 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg2_fsm_6 assign process. --
    ap_sig_cseq_ST_pp0_stg2_fsm_6_assign_proc : process(ap_sig_bdd_258)
    begin
        if (ap_sig_bdd_258) then 
            ap_sig_cseq_ST_pp0_stg2_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg2_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg3_fsm_7 assign process. --
    ap_sig_cseq_ST_pp0_stg3_fsm_7_assign_proc : process(ap_sig_bdd_278)
    begin
        if (ap_sig_bdd_278) then 
            ap_sig_cseq_ST_pp0_stg3_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg3_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg4_fsm_8 assign process. --
    ap_sig_cseq_ST_pp0_stg4_fsm_8_assign_proc : process(ap_sig_bdd_296)
    begin
        if (ap_sig_bdd_296) then 
            ap_sig_cseq_ST_pp0_stg4_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg4_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg5_fsm_9 assign process. --
    ap_sig_cseq_ST_pp0_stg5_fsm_9_assign_proc : process(ap_sig_bdd_154)
    begin
        if (ap_sig_bdd_154) then 
            ap_sig_cseq_ST_pp0_stg5_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg5_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg6_fsm_10 assign process. --
    ap_sig_cseq_ST_pp0_stg6_fsm_10_assign_proc : process(ap_sig_bdd_314)
    begin
        if (ap_sig_bdd_314) then 
            ap_sig_cseq_ST_pp0_stg6_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg6_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg7_fsm_11 assign process. --
    ap_sig_cseq_ST_pp0_stg7_fsm_11_assign_proc : process(ap_sig_bdd_329)
    begin
        if (ap_sig_bdd_329) then 
            ap_sig_cseq_ST_pp0_stg7_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg7_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg8_fsm_12 assign process. --
    ap_sig_cseq_ST_pp0_stg8_fsm_12_assign_proc : process(ap_sig_bdd_339)
    begin
        if (ap_sig_bdd_339) then 
            ap_sig_cseq_ST_pp0_stg8_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg8_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg9_fsm_13 assign process. --
    ap_sig_cseq_ST_pp0_stg9_fsm_13_assign_proc : process(ap_sig_bdd_348)
    begin
        if (ap_sig_bdd_348) then 
            ap_sig_cseq_ST_pp0_stg9_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg9_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_45)
    begin
        if (ap_sig_bdd_45) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_165)
    begin
        if (ap_sig_bdd_165) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_180)
    begin
        if (ap_sig_bdd_180) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st40_fsm_26 assign process. --
    ap_sig_cseq_ST_st40_fsm_26_assign_proc : process(ap_sig_bdd_891)
    begin
        if (ap_sig_bdd_891) then 
            ap_sig_cseq_ST_st40_fsm_26 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st40_fsm_26 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_194)
    begin
        if (ap_sig_bdd_194) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_mid3_fu_592_p2 <= (exitcond1_mid_fu_548_p2 and not_exitcond_flatten_mid_fu_586_p2);
    exitcond1_mid_fu_548_p2 <= (exitcond_fu_542_p2 and not_exitcond_flatten_fu_536_p2);
    exitcond5_fu_484_p2 <= "1" when (k_reg_275 = ap_const_lv5_1C) else "0";
    exitcond6_fu_433_p2 <= "1" when (j_reg_264 = ap_const_lv5_1C) else "0";
    exitcond7_fu_387_p2 <= "1" when (i_reg_253 = ap_const_lv3_6) else "0";
    exitcond_flatten7_fu_522_p2 <= "1" when (indvar_flatten4_phi_fu_313_p4 = ap_const_lv13_F50) else "0";
    exitcond_flatten8_fu_554_p2 <= "1" when (indvar_flatten_phi_fu_335_p4 = ap_const_lv8_8C) else "0";
    exitcond_flatten_fu_510_p2 <= "1" when (indvar_flatten3_phi_fu_290_p4 = ap_const_lv15_5BE0) else "0";
    exitcond_flatten_mid_fu_560_p2 <= (exitcond_flatten8_fu_554_p2 and not_exitcond_flatten_fu_536_p2);
    exitcond_flatten_not_fu_580_p2 <= (exitcond_flatten8_fu_554_p2 xor ap_const_lv1_1);
    exitcond_fu_542_p2 <= "1" when (m_phi_fu_357_p4 = ap_const_lv3_5) else "0";
    grp_fu_365_ce <= ap_const_logic_1;

    -- grp_fu_365_p0 assign process. --
    grp_fu_365_p0_assign_proc : process(C1_v_q0, grp_fu_365_p2, reg_382, ap_sig_cseq_ST_pp0_stg11_fsm_15, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg15_fsm_19, ap_sig_cseq_ST_pp0_stg19_fsm_23, ap_sig_cseq_ST_pp0_stg1_fsm_5, ap_sig_cseq_ST_pp0_stg6_fsm_10, ap_sig_cseq_ST_pp0_stg7_fsm_11)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_10))) then 
            grp_fu_365_p0 <= reg_382;
        elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg11_fsm_15) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg15_fsm_19)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg19_fsm_23)))) then 
            grp_fu_365_p0 <= grp_fu_365_p2;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_11))) then 
            grp_fu_365_p0 <= C1_v_q0;
        else 
            grp_fu_365_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_365_p1 assign process. --
    grp_fu_365_p1_assign_proc : process(ap_sig_cseq_ST_pp0_stg11_fsm_15, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg15_fsm_19, ap_sig_cseq_ST_pp0_stg19_fsm_23, ap_sig_cseq_ST_pp0_stg1_fsm_5, ap_sig_cseq_ST_pp0_stg6_fsm_10, tmp_31_reg_1270, ap_sig_cseq_ST_pp0_stg7_fsm_11, tmp_31_1_reg_1280, tmp_31_2_reg_1285, tmp_31_3_reg_1290, tmp_31_4_reg_1295, C1_bias_load_reg_1305)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_10))) then 
            grp_fu_365_p1 <= C1_bias_load_reg_1305;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5))) then 
            grp_fu_365_p1 <= tmp_31_4_reg_1295;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg19_fsm_23))) then 
            grp_fu_365_p1 <= tmp_31_3_reg_1290;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg15_fsm_19))) then 
            grp_fu_365_p1 <= tmp_31_2_reg_1285;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg11_fsm_15) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            grp_fu_365_p1 <= tmp_31_1_reg_1280;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_11))) then 
            grp_fu_365_p1 <= tmp_31_reg_1270;
        else 
            grp_fu_365_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_372_ce <= ap_const_logic_1;

    -- grp_fu_372_p0 assign process. --
    grp_fu_372_p0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg5_fsm_9, inputimg_load_reg_1157, inputimg_load_1_reg_1174, ap_sig_cseq_ST_pp0_stg3_fsm_7, inputimg_load_2_reg_1204, inputimg_load_3_reg_1214, ap_sig_cseq_ST_pp0_stg4_fsm_8, inputimg_load_4_reg_1239, ap_sig_cseq_ST_pp0_stg6_fsm_10, ap_sig_cseq_ST_pp0_stg7_fsm_11)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_11)) then 
                grp_fu_372_p0 <= inputimg_load_4_reg_1239;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_10)) then 
                grp_fu_372_p0 <= inputimg_load_3_reg_1214;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_9)) then 
                grp_fu_372_p0 <= inputimg_load_2_reg_1204;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_8)) then 
                grp_fu_372_p0 <= inputimg_load_1_reg_1174;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_7)) then 
                grp_fu_372_p0 <= inputimg_load_reg_1157;
            else 
                grp_fu_372_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_372_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_372_p1 assign process. --
    grp_fu_372_p1_assign_proc : process(C1_mapData_q0, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg5_fsm_9, ap_sig_cseq_ST_pp0_stg3_fsm_7, C1_mapData_load_1_reg_1199, C1_mapData_load_2_reg_1229, ap_sig_cseq_ST_pp0_stg4_fsm_8, C1_mapData_load_3_reg_1234, C1_mapData_load_4_reg_1255, ap_sig_cseq_ST_pp0_stg6_fsm_10, ap_sig_cseq_ST_pp0_stg7_fsm_11)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg7_fsm_11)) then 
                grp_fu_372_p1 <= C1_mapData_load_4_reg_1255;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_10)) then 
                grp_fu_372_p1 <= C1_mapData_load_3_reg_1234;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_9)) then 
                grp_fu_372_p1 <= C1_mapData_load_2_reg_1229;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_8)) then 
                grp_fu_372_p1 <= C1_mapData_load_1_reg_1199;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_7)) then 
                grp_fu_372_p1 <= C1_mapData_q0;
            else 
                grp_fu_372_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_372_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_1_mid2_fu_632_p3 <= 
        i_s_fu_626_p2 when (exitcond_flatten7_reg_1058(0) = '1') else 
        i_1_phi_fu_301_p4;

    -- i_1_phi_fu_301_p4 assign process. --
    i_1_phi_fu_301_p4_assign_proc : process(i_1_reg_297, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_5, ap_reg_ppstg_exitcond_flatten_reg_1049_pp0_it1, i_1_mid2_reg_1098)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_1049_pp0_it1))) then 
            i_1_phi_fu_301_p4 <= i_1_mid2_reg_1098;
        else 
            i_1_phi_fu_301_p4 <= i_1_reg_297;
        end if; 
    end process;

    i_2_fu_393_p2 <= std_logic_vector(unsigned(i_reg_253) + unsigned(ap_const_lv3_1));
    i_s_fu_626_p2 <= std_logic_vector(unsigned(i_1_phi_fu_301_p4) + unsigned(ap_const_lv3_1));
    ifzero_fu_764_p2 <= "1" when (m_1_fu_758_p2 = ap_const_lv3_5) else "0";
    indvar_flatten14_op_fu_612_p2 <= std_logic_vector(unsigned(indvar_flatten4_phi_fu_313_p4) + unsigned(ap_const_lv13_1));

    -- indvar_flatten3_phi_fu_290_p4 assign process. --
    indvar_flatten3_phi_fu_290_p4_assign_proc : process(indvar_flatten3_reg_286, ap_reg_ppiten_pp0_it1, exitcond_flatten_reg_1049, ap_sig_cseq_ST_pp0_stg0_fsm_4, indvar_flatten_next3_reg_1053)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_1049 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4))) then 
            indvar_flatten3_phi_fu_290_p4 <= indvar_flatten_next3_reg_1053;
        else 
            indvar_flatten3_phi_fu_290_p4 <= indvar_flatten3_reg_286;
        end if; 
    end process;


    -- indvar_flatten4_phi_fu_313_p4 assign process. --
    indvar_flatten4_phi_fu_313_p4_assign_proc : process(indvar_flatten4_reg_309, ap_reg_ppiten_pp0_it1, exitcond_flatten_reg_1049, ap_sig_cseq_ST_pp0_stg0_fsm_4, indvar_flatten_next4_reg_1093)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_1049 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4))) then 
            indvar_flatten4_phi_fu_313_p4 <= indvar_flatten_next4_reg_1093;
        else 
            indvar_flatten4_phi_fu_313_p4 <= indvar_flatten4_reg_309;
        end if; 
    end process;

    indvar_flatten_next3_fu_516_p2 <= std_logic_vector(unsigned(indvar_flatten3_phi_fu_290_p4) + unsigned(ap_const_lv15_1));
    indvar_flatten_next4_fu_618_p3 <= 
        ap_const_lv13_1 when (exitcond_flatten7_fu_522_p2(0) = '1') else 
        indvar_flatten14_op_fu_612_p2;
    indvar_flatten_next_fu_604_p3 <= 
        ap_const_lv8_1 when (tmp_308_fu_566_p2(0) = '1') else 
        indvar_flatten_op_fu_598_p2;
    indvar_flatten_op_fu_598_p2 <= std_logic_vector(unsigned(indvar_flatten_phi_fu_335_p4) + unsigned(ap_const_lv8_1));

    -- indvar_flatten_phi_fu_335_p4 assign process. --
    indvar_flatten_phi_fu_335_p4_assign_proc : process(indvar_flatten_reg_331, ap_reg_ppiten_pp0_it1, exitcond_flatten_reg_1049, ap_sig_cseq_ST_pp0_stg0_fsm_4, indvar_flatten_next_reg_1088)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_1049 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4))) then 
            indvar_flatten_phi_fu_335_p4 <= indvar_flatten_next_reg_1088;
        else 
            indvar_flatten_phi_fu_335_p4 <= indvar_flatten_reg_331;
        end if; 
    end process;


    -- inputimg_address0 assign process. --
    inputimg_address0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_5, ap_sig_cseq_ST_pp0_stg2_fsm_6, ap_sig_cseq_ST_pp0_stg3_fsm_7, tmp_314_fu_724_p1, tmp_320_fu_829_p1, tmp_326_fu_878_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_7)) then 
                inputimg_address0 <= tmp_326_fu_878_p1(10 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_6)) then 
                inputimg_address0 <= tmp_320_fu_829_p1(10 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5)) then 
                inputimg_address0 <= tmp_314_fu_724_p1(10 - 1 downto 0);
            else 
                inputimg_address0 <= "XXXXXXXXXX";
            end if;
        else 
            inputimg_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    -- inputimg_address1 assign process. --
    inputimg_address1_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_5, ap_sig_cseq_ST_pp0_stg2_fsm_6, tmp_317_fu_753_p1, tmp_323_fu_841_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_6)) then 
                inputimg_address1 <= tmp_323_fu_841_p1(10 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5)) then 
                inputimg_address1 <= tmp_317_fu_753_p1(10 - 1 downto 0);
            else 
                inputimg_address1 <= "XXXXXXXXXX";
            end if;
        else 
            inputimg_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    -- inputimg_ce0 assign process. --
    inputimg_ce0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_5, ap_sig_cseq_ST_pp0_stg2_fsm_6, ap_sig_cseq_ST_pp0_stg3_fsm_7)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_6)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_7)))) then 
            inputimg_ce0 <= ap_const_logic_1;
        else 
            inputimg_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- inputimg_ce1 assign process. --
    inputimg_ce1_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_5, ap_sig_cseq_ST_pp0_stg2_fsm_6)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_6)))) then 
            inputimg_ce1 <= ap_const_logic_1;
        else 
            inputimg_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_mid2_fu_644_p3 <= 
        j_3_fu_639_p2 when (exitcond_flatten_mid_reg_1070(0) = '1') else 
        j_1_mid_reg_1064;
    j_1_mid_fu_528_p3 <= 
        ap_const_lv5_0 when (exitcond_flatten7_fu_522_p2(0) = '1') else 
        j_1_phi_fu_324_p4;

    -- j_1_phi_fu_324_p4 assign process. --
    j_1_phi_fu_324_p4_assign_proc : process(j_1_reg_320, ap_reg_ppiten_pp0_it1, exitcond_flatten_reg_1049, ap_sig_cseq_ST_pp0_stg0_fsm_4, j_1_mid2_reg_1105)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_1049 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4))) then 
            j_1_phi_fu_324_p4 <= j_1_mid2_reg_1105;
        else 
            j_1_phi_fu_324_p4 <= j_1_reg_320;
        end if; 
    end process;

    j_2_fu_439_p2 <= std_logic_vector(unsigned(j_reg_264) + unsigned(ap_const_lv5_1));
    j_3_fu_639_p2 <= std_logic_vector(unsigned(j_1_mid_reg_1064) + unsigned(ap_const_lv5_1));
    k_1_mid2_fu_672_p3 <= 
        k_3_fu_650_p2 when (exitcond1_mid3_reg_1082(0) = '1') else 
        k_1_mid_reg_1076;
    k_1_mid_fu_572_p3 <= 
        ap_const_lv5_0 when (tmp_308_fu_566_p2(0) = '1') else 
        k_1_phi_fu_346_p4;

    -- k_1_phi_fu_346_p4 assign process. --
    k_1_phi_fu_346_p4_assign_proc : process(k_1_reg_342, ap_reg_ppiten_pp0_it1, exitcond_flatten_reg_1049, ap_sig_cseq_ST_pp0_stg0_fsm_4, k_1_mid2_reg_1111)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_1049 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4))) then 
            k_1_phi_fu_346_p4 <= k_1_mid2_reg_1111;
        else 
            k_1_phi_fu_346_p4 <= k_1_reg_342;
        end if; 
    end process;

    k_2_fu_490_p2 <= std_logic_vector(unsigned(k_reg_275) + unsigned(ap_const_lv5_1));
    k_3_fu_650_p2 <= std_logic_vector(unsigned(k_1_mid_reg_1076) + unsigned(ap_const_lv5_1));
    m_1_fu_758_p2 <= std_logic_vector(unsigned(m_mid2_fu_664_p3) + unsigned(ap_const_lv3_1));
    m_mid2_fu_664_p3 <= 
        ap_const_lv3_0 when (tmp_145_fu_659_p2(0) = '1') else 
        m_reg_353;

    -- m_phi_fu_357_p4 assign process. --
    m_phi_fu_357_p4_assign_proc : process(m_reg_353, ap_reg_ppiten_pp0_it1, exitcond_flatten_reg_1049, ap_sig_cseq_ST_pp0_stg0_fsm_4, m_1_reg_1148)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_1049 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4))) then 
            m_phi_fu_357_p4 <= m_1_reg_1148;
        else 
            m_phi_fu_357_p4 <= m_reg_353;
        end if; 
    end process;

    not_exitcond_flatten_fu_536_p2 <= (exitcond_flatten7_fu_522_p2 xor ap_const_lv1_1);
    not_exitcond_flatten_mid_fu_586_p2 <= (exitcond_flatten7_fu_522_p2 or exitcond_flatten_not_fu_580_p2);
    notlhs_fu_983_p2 <= "0" when (tmp_80_fu_969_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_989_p2 <= "1" when (tmp_149_fu_979_p1 = ap_const_lv23_0) else "0";
        p_shl49_fu_941_p1 <= std_logic_vector(resize(signed(tmp_147_fu_934_p3),32));

    p_shl50_fu_790_p1 <= std_logic_vector(resize(unsigned(tmp_148_fu_783_p3),32));
        p_shl51_fu_462_p1 <= std_logic_vector(resize(signed(tmp_150_fu_454_p3),32));

        p_shl52_fu_474_p1 <= std_logic_vector(resize(signed(tmp_151_fu_466_p3),32));

    p_shl74_cast_fu_419_p1 <= std_logic_vector(resize(unsigned(tmp_307_fu_411_p3),9));
    p_shl81_cast_fu_897_p1 <= std_logic_vector(resize(unsigned(tmp_310_fu_890_p3),9));
    p_shl82_cast1_fu_712_p1 <= std_logic_vector(resize(unsigned(tmp_311_fu_704_p3),6));
    p_shl82_cast_fu_901_p1 <= std_logic_vector(resize(unsigned(tmp_311_reg_1127),9));
    p_shl_cast_fu_407_p1 <= std_logic_vector(resize(unsigned(tmp_fu_399_p3),9));
        p_shl_fu_930_p1 <= std_logic_vector(resize(signed(tmp_146_fu_923_p3),32));

    temp_to_int_fu_966_p1 <= temp_reg_1310;
    tmp_145_fu_659_p2 <= (tmp_309_fu_655_p2 or exitcond_flatten7_reg_1058);
    tmp_146_fu_923_p3 <= (C1_v_addr4_reg_1249 & ap_const_lv5_0);
    tmp_147_fu_934_p3 <= (C1_v_addr4_reg_1249 & ap_const_lv2_0);
    tmp_148_fu_783_p3 <= (C1_mapData_addr2_reg_1137 & ap_const_lv2_0);
    tmp_149_fu_979_p1 <= temp_to_int_fu_966_p1(23 - 1 downto 0);
    tmp_14_trn_cast_fu_445_p1 <= std_logic_vector(resize(unsigned(j_reg_264),10));
    tmp_150_fu_454_p3 <= (C1_v_addr10_fu_449_p2 & ap_const_lv5_0);
    tmp_151_fu_466_p3 <= (C1_v_addr10_fu_449_p2 & ap_const_lv2_0);
    tmp_15_trn_cast_fu_887_p1 <= std_logic_vector(resize(unsigned(j_1_mid2_reg_1105),10));
    tmp_17_trn_fu_496_p1 <= std_logic_vector(resize(unsigned(k_reg_275),32));
    tmp_18_trn_fu_920_p1 <= std_logic_vector(resize(unsigned(k_1_mid2_reg_1111),32));
    tmp_21_cast1_fu_684_p1 <= std_logic_vector(resize(unsigned(m_mid2_fu_664_p3),5));
    tmp_22_fu_688_p2 <= std_logic_vector(unsigned(tmp_21_cast1_fu_684_p1) + unsigned(j_1_mid2_fu_644_p3));
    tmp_24_fu_694_p2 <= std_logic_vector(signed(ap_const_lv3_4) - signed(m_mid2_fu_664_p3));
    tmp_25_trn_cast_fu_729_p1 <= std_logic_vector(resize(unsigned(tmp_24_fu_694_p2),6));
    tmp_27_1_fu_678_p2 <= std_logic_vector(unsigned(k_1_mid2_fu_672_p3) + unsigned(ap_const_lv5_1));
    tmp_27_2_fu_770_p2 <= std_logic_vector(unsigned(k_1_mid2_reg_1111) + unsigned(ap_const_lv5_2));
    tmp_27_3_fu_775_p2 <= std_logic_vector(unsigned(k_1_mid2_reg_1111) + unsigned(ap_const_lv5_3));
    tmp_27_4_fu_846_p2 <= std_logic_vector(unsigned(k_1_mid2_reg_1111) + unsigned(ap_const_lv5_4));
    tmp_307_fu_411_p3 <= (i_reg_253 & ap_const_lv2_0);
    tmp_308_fu_566_p2 <= (exitcond_flatten_mid_fu_560_p2 or exitcond_flatten7_fu_522_p2);
    tmp_309_fu_655_p2 <= (exitcond1_mid3_reg_1082 or exitcond_flatten_mid_reg_1070);
    tmp_310_fu_890_p3 <= (i_1_mid2_reg_1098 & ap_const_lv5_0);
    tmp_311_fu_704_p3 <= (i_1_mid2_fu_632_p3 & ap_const_lv2_0);
    tmp_312_fu_957_p1 <= std_logic_vector(resize(unsigned(C1_v_addr6_fu_951_p2),64));
    tmp_313_fu_716_p3 <= (tmp_22_fu_688_p2 & k_1_mid2_fu_672_p3);
    tmp_314_fu_724_p1 <= std_logic_vector(resize(unsigned(tmp_313_fu_716_p3),64));
    tmp_315_fu_806_p1 <= std_logic_vector(resize(unsigned(C1_mapData_addr4_fu_800_p2),64));
    tmp_316_fu_745_p3 <= (tmp_22_fu_688_p2 & tmp_27_1_fu_678_p2);
    tmp_317_fu_753_p1 <= std_logic_vector(resize(unsigned(tmp_316_fu_745_p3),64));
    tmp_318_fu_817_p1 <= std_logic_vector(resize(unsigned(C1_mapData_addr5_fu_811_p2),64));
    tmp_319_fu_822_p3 <= (tmp_22_reg_1120 & tmp_27_2_fu_770_p2);
    tmp_320_fu_829_p1 <= std_logic_vector(resize(unsigned(tmp_319_fu_822_p3),64));
    tmp_321_fu_856_p1 <= std_logic_vector(resize(unsigned(C1_mapData_addr6_fu_851_p2),64));
    tmp_322_fu_834_p3 <= (tmp_22_reg_1120 & tmp_27_3_fu_775_p2);
    tmp_323_fu_841_p1 <= std_logic_vector(resize(unsigned(tmp_322_fu_834_p3),64));
    tmp_324_fu_866_p1 <= std_logic_vector(resize(unsigned(C1_mapData_addr7_fu_861_p2),64));
    tmp_325_fu_871_p3 <= (tmp_22_reg_1120 & tmp_27_4_fu_846_p2);
    tmp_326_fu_878_p1 <= std_logic_vector(resize(unsigned(tmp_325_fu_871_p3),64));
    tmp_327_fu_883_p1 <= std_logic_vector(resize(unsigned(C1_mapData_addr3_reg_1162),64));
    tmp_328_fu_505_p1 <= std_logic_vector(resize(unsigned(C1_v_addr12_fu_500_p2),64));
    tmp_80_fu_969_p4 <= temp_to_int_fu_966_p1(30 downto 23);
    tmp_82_fu_995_p2 <= (notrhs_fu_989_p2 or notlhs_fu_983_p2);
    tmp_83_fu_377_opcode <= ap_const_lv5_2;
    tmp_83_fu_377_p0 <= temp_reg_1310;
    tmp_83_fu_377_p1 <= ap_const_lv32_0;
    tmp_84_fu_1001_p2 <= (tmp_82_fu_995_p2 and tmp_83_fu_377_p2);
    tmp_fu_399_p3 <= (i_reg_253 & ap_const_lv5_0);
    tmp_s_fu_962_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_i_1_mid2_reg_1098_pp0_it1),64));
    tmp_trn_cast_fu_700_p1 <= std_logic_vector(resize(unsigned(i_1_mid2_fu_632_p3),6));
end behav;
