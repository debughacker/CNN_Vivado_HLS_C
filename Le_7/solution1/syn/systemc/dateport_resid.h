// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __dateport_resid_H__
#define __dateport_resid_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct dateport_resid_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 1;
  static const unsigned AddressRange = 100;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(dateport_resid_ram) {
        ram[0] = "0b1";
        for (unsigned i = 1; i < 11 ; i = i + 1) {
            ram[i] = "0b0";
        }
        ram[11] = "0b1";
        for (unsigned i = 12; i < 22 ; i = i + 1) {
            ram[i] = "0b0";
        }
        ram[22] = "0b1";
        for (unsigned i = 23; i < 33 ; i = i + 1) {
            ram[i] = "0b0";
        }
        ram[33] = "0b1";
        for (unsigned i = 34; i < 44 ; i = i + 1) {
            ram[i] = "0b0";
        }
        ram[44] = "0b1";
        for (unsigned i = 45; i < 55 ; i = i + 1) {
            ram[i] = "0b0";
        }
        ram[55] = "0b1";
        for (unsigned i = 56; i < 66 ; i = i + 1) {
            ram[i] = "0b0";
        }
        ram[66] = "0b1";
        for (unsigned i = 67; i < 77 ; i = i + 1) {
            ram[i] = "0b0";
        }
        ram[77] = "0b1";
        for (unsigned i = 78; i < 88 ; i = i + 1) {
            ram[i] = "0b0";
        }
        ram[88] = "0b1";
        for (unsigned i = 89; i < 99 ; i = i + 1) {
            ram[i] = "0b0";
        }
        ram[99] = "0b1";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(dateport_resid) {


static const unsigned DataWidth = 1;
static const unsigned AddressRange = 100;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


dateport_resid_ram* meminst;


SC_CTOR(dateport_resid) {
meminst = new dateport_resid_ram("dateport_resid_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~dateport_resid() {
    delete meminst;
}


};//endmodule
#endif
