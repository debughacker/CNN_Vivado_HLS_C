-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dateport_update_C5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    S4_y_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    S4_y_ce0 : OUT STD_LOGIC;
    S4_y_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C5_dmapData_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    C5_dmapData_ce0 : OUT STD_LOGIC;
    C5_dmapData_we0 : OUT STD_LOGIC;
    C5_dmapData_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C5_dmapData_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C5_d_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    C5_d_ce0 : OUT STD_LOGIC;
    C5_d_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C5_dbias_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    C5_dbias_ce0 : OUT STD_LOGIC;
    C5_dbias_we0 : OUT STD_LOGIC;
    C5_dbias_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C5_dbias_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of dateport_update_C5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000100";
    constant ap_ST_pp0_stg0_fsm_3 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000001000";
    constant ap_ST_st10_fsm_4 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000010000";
    constant ap_ST_st11_fsm_5 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000100000";
    constant ap_ST_st12_fsm_6 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000001000000";
    constant ap_ST_st13_fsm_7 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000010000000";
    constant ap_ST_st14_fsm_8 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000100000000";
    constant ap_ST_st15_fsm_9 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000001000000000";
    constant ap_ST_st16_fsm_10 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000010000000000";
    constant ap_ST_st17_fsm_11 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000100000000000";
    constant ap_ST_st18_fsm_12 : STD_LOGIC_VECTOR (21 downto 0) := "0000000001000000000000";
    constant ap_ST_st19_fsm_13 : STD_LOGIC_VECTOR (21 downto 0) := "0000000010000000000000";
    constant ap_ST_st20_fsm_14 : STD_LOGIC_VECTOR (21 downto 0) := "0000000100000000000000";
    constant ap_ST_st21_fsm_15 : STD_LOGIC_VECTOR (21 downto 0) := "0000001000000000000000";
    constant ap_ST_st22_fsm_16 : STD_LOGIC_VECTOR (21 downto 0) := "0000010000000000000000";
    constant ap_ST_st23_fsm_17 : STD_LOGIC_VECTOR (21 downto 0) := "0000100000000000000000";
    constant ap_ST_st24_fsm_18 : STD_LOGIC_VECTOR (21 downto 0) := "0001000000000000000000";
    constant ap_ST_st25_fsm_19 : STD_LOGIC_VECTOR (21 downto 0) := "0010000000000000000000";
    constant ap_ST_st26_fsm_20 : STD_LOGIC_VECTOR (21 downto 0) := "0100000000000000000000";
    constant ap_ST_st27_fsm_21 : STD_LOGIC_VECTOR (21 downto 0) := "1000000000000000000000";
    constant ap_true : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv9_1E0 : STD_LOGIC_VECTOR (8 downto 0) := "111100000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_40 : BOOLEAN;
    signal indvar_flatten_reg_191 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_reg_202 : STD_LOGIC_VECTOR (2 downto 0);
    signal m_reg_213 : STD_LOGIC_VECTOR (2 downto 0);
    signal reg_267 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_85 : BOOLEAN;
    signal ap_sig_cseq_ST_st21_fsm_15 : STD_LOGIC;
    signal ap_sig_bdd_92 : BOOLEAN;
    signal grp_fu_257_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_273 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st18_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_102 : BOOLEAN;
    signal ap_sig_cseq_ST_st26_fsm_20 : STD_LOGIC;
    signal ap_sig_bdd_109 : BOOLEAN;
    signal indvar_flatten_next8_fu_285_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten_next8_reg_642 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_119 : BOOLEAN;
    signal j_mid2_fu_297_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_mid2_reg_647 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_flatten9_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_mid2_fu_311_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_mid2_reg_655 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_154_trn_cast1_fu_324_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_154_trn_cast1_reg_666 : STD_LOGIC_VECTOR (9 downto 0);
    signal S4_y_addr9_fu_341_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal S4_y_addr9_reg_671 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_flatten_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_676 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_142 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_flatten_reg_676_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_676_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_676_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten_reg_676_pp0_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_353_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal m_mid2_fu_365_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal m_mid2_reg_685 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_m_mid2_reg_685_pp0_it1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_m_mid2_reg_685_pp0_it2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_m_mid2_reg_685_pp0_it3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_m_mid2_reg_685_pp0_it4 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_mid2_fu_379_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_mid2_reg_691 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_k_mid2_reg_691_pp0_it1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_k_mid2_reg_691_pp0_it2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_k_mid2_reg_691_pp0_it3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_k_mid2_reg_691_pp0_it4 : STD_LOGIC_VECTOR (2 downto 0);
    signal m_7_fu_387_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal C5_dmapData_addr3_fu_503_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C5_dmapData_addr3_reg_714 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_199 : BOOLEAN;
    signal k_5_fu_515_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_5_reg_722 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_208 : BOOLEAN;
    signal C5_dmapData_addr5_fu_542_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C5_dmapData_addr5_reg_727 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond2_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_addr_fu_564_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_addr_reg_732 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_16_fu_570_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal m_8_fu_581_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal m_8_reg_745 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_228 : BOOLEAN;
    signal C5_dmapData_addr_reg_750 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond1_fu_575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal C5_dmapData_load_reg_760 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_243 : BOOLEAN;
    signal tmp_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_69_reg_765 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_19_fu_627_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_19_reg_773 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st20_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_254 : BOOLEAN;
    signal C5_dbias_addr_reg_778 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_fu_621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal C5_dbias_load_reg_788 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_ce0 : STD_LOGIC;
    signal tmp_we0 : STD_LOGIC;
    signal tmp_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten7_reg_158 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_reg_169 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_180 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_phi_fu_206_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_1_reg_224 : STD_LOGIC_VECTOR (2 downto 0);
    signal m_1_reg_235 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st19_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_304 : BOOLEAN;
    signal i_1_reg_246 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st27_fsm_21 : STD_LOGIC;
    signal ap_sig_bdd_313 : BOOLEAN;
    signal tmp_s_fu_319_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_191_fu_432_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_193_fu_466_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_195_fu_596_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_196_fu_616_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_98_fu_633_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_261_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_257_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_257_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_341 : BOOLEAN;
    signal ap_sig_cseq_ST_st22_fsm_16 : STD_LOGIC;
    signal ap_sig_bdd_348 : BOOLEAN;
    signal grp_fu_261_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_261_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond16_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_fu_305_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_189_fu_330_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_154_trn_cast_fu_327_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_cast_fu_337_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond17_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_s_fu_373_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_155_trn_cast_fu_393_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal S4_y_addr1_fu_396_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_133_fu_408_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal S4_y_addr10_cast_fu_401_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl28_fu_416_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal S4_y_addr2_fu_420_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_159_trn_fu_405_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal S4_y_addr3_fu_426_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_192_fu_443_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_155_trn_cast1_fu_437_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl27_cast_fu_450_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_addr11_fu_454_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_159_trn_cast_fu_440_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_addr12_fu_460_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_190_fu_471_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal C5_dmapData_addr1_cast_fu_478_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal C5_dmapData_addr2_fu_482_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_132_fu_491_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl26_fu_499_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal C5_dmapData_addr2_cast_fu_487_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_156_trn_fu_527_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal C5_dmapData_addr4_fu_531_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_134_fu_536_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_101_fu_521_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_194_fu_552_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl29_cast_fu_560_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_158_trn_cast_fu_548_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_161_trn_fu_587_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal C5_dmapData_addr6_fu_591_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_102_fu_601_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_163_trn_cast_fu_607_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_addr10_fu_611_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_257_ce : STD_LOGIC;
    signal grp_fu_261_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (21 downto 0);

    component dateport_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dateport_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dateport_update_C1_tmp IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    tmp_U : component dateport_update_C1_tmp
    generic map (
        DataWidth => 32,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tmp_address0,
        ce0 => tmp_ce0,
        we0 => tmp_we0,
        d0 => tmp_d0,
        q0 => tmp_q0);

    dateport_fadd_32ns_32ns_32_5_full_dsp_U93 : component dateport_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_257_p0,
        din1 => grp_fu_257_p1,
        ce => grp_fu_257_ce,
        dout => grp_fu_257_p2);

    dateport_fmul_32ns_32ns_32_4_max_dsp_U94 : component dateport_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_261_p0,
        din1 => grp_fu_261_p1,
        ce => grp_fu_261_ce,
        dout => grp_fu_261_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and not((ap_const_lv1_0 = exitcond_flatten_fu_347_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_lv1_0 = exitcond_flatten_fu_347_p2))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and not((ap_const_lv1_0 = exitcond_flatten_fu_347_p2))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it4 assign process. --
    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it5 assign process. --
    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
            end if;
        end if;
    end process;


    -- i_1_reg_246 assign process. --
    i_1_reg_246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_flatten9_fu_279_p2 = ap_const_lv1_0)))) then 
                i_1_reg_246 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_21)) then 
                i_1_reg_246 <= i_19_reg_773;
            end if; 
        end if;
    end process;

    -- i_reg_169 assign process. --
    i_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_5) and not((ap_const_lv1_0 = exitcond2_fu_509_p2)))) then 
                i_reg_169 <= i_mid2_reg_655;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_169 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- indvar_flatten7_reg_158 assign process. --
    indvar_flatten7_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_5) and not((ap_const_lv1_0 = exitcond2_fu_509_p2)))) then 
                indvar_flatten7_reg_158 <= indvar_flatten_next8_reg_642;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                indvar_flatten7_reg_158 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    -- indvar_flatten_reg_191 assign process. --
    indvar_flatten_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_lv1_0 = exitcond_flatten_fu_347_p2))) then 
                indvar_flatten_reg_191 <= indvar_flatten_next_fu_353_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                indvar_flatten_reg_191 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- j_reg_180 assign process. --
    j_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_5) and not((ap_const_lv1_0 = exitcond2_fu_509_p2)))) then 
                j_reg_180 <= j_16_fu_570_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                j_reg_180 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- k_1_reg_224 assign process. --
    k_1_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_6) and not((ap_const_lv1_0 = exitcond1_fu_575_p2)))) then 
                k_1_reg_224 <= k_5_reg_722;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_4)) then 
                k_1_reg_224 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- k_reg_202 assign process. --
    k_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = exitcond_flatten_reg_676))) then 
                k_reg_202 <= k_mid2_reg_691;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                k_reg_202 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- m_1_reg_235 assign process. --
    m_1_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_5) and (ap_const_lv1_0 = exitcond2_fu_509_p2))) then 
                m_1_reg_235 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_13)) then 
                m_1_reg_235 <= m_8_reg_745;
            end if; 
        end if;
    end process;

    -- m_reg_213 assign process. --
    m_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_lv1_0 = exitcond_flatten_fu_347_p2))) then 
                m_reg_213 <= m_7_fu_387_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                m_reg_213 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_14) and (ap_const_lv1_0 = exitcond_fu_621_p2))) then
                C5_dbias_addr_reg_778 <= tmp_98_fu_633_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_15)) then
                C5_dbias_load_reg_788 <= C5_dbias_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_4)) then
                C5_dmapData_addr3_reg_714 <= C5_dmapData_addr3_fu_503_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_5) and (ap_const_lv1_0 = exitcond2_fu_509_p2))) then
                C5_dmapData_addr5_reg_727 <= C5_dmapData_addr5_fu_542_p2;
                p_addr_reg_732 <= p_addr_fu_564_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_6) and (ap_const_lv1_0 = exitcond1_fu_575_p2))) then
                C5_dmapData_addr_reg_750 <= tmp_195_fu_596_p1(14 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_7)) then
                C5_dmapData_load_reg_760 <= C5_dmapData_q0;
                empty_69_reg_765 <= tmp_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                S4_y_addr9_reg_671 <= S4_y_addr9_fu_341_p2;
                    tmp_154_trn_cast1_reg_666(4 downto 0) <= tmp_154_trn_cast1_fu_324_p1(4 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3)) then
                ap_reg_ppstg_exitcond_flatten_reg_676_pp0_it1 <= exitcond_flatten_reg_676;
                ap_reg_ppstg_k_mid2_reg_691_pp0_it1 <= k_mid2_reg_691;
                ap_reg_ppstg_m_mid2_reg_685_pp0_it1 <= m_mid2_reg_685;
                exitcond_flatten_reg_676 <= exitcond_flatten_fu_347_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_true = ap_true)) then
                ap_reg_ppstg_exitcond_flatten_reg_676_pp0_it2 <= ap_reg_ppstg_exitcond_flatten_reg_676_pp0_it1;
                ap_reg_ppstg_exitcond_flatten_reg_676_pp0_it3 <= ap_reg_ppstg_exitcond_flatten_reg_676_pp0_it2;
                ap_reg_ppstg_exitcond_flatten_reg_676_pp0_it4 <= ap_reg_ppstg_exitcond_flatten_reg_676_pp0_it3;
                ap_reg_ppstg_k_mid2_reg_691_pp0_it2 <= ap_reg_ppstg_k_mid2_reg_691_pp0_it1;
                ap_reg_ppstg_k_mid2_reg_691_pp0_it3 <= ap_reg_ppstg_k_mid2_reg_691_pp0_it2;
                ap_reg_ppstg_k_mid2_reg_691_pp0_it4 <= ap_reg_ppstg_k_mid2_reg_691_pp0_it3;
                ap_reg_ppstg_m_mid2_reg_685_pp0_it2 <= ap_reg_ppstg_m_mid2_reg_685_pp0_it1;
                ap_reg_ppstg_m_mid2_reg_685_pp0_it3 <= ap_reg_ppstg_m_mid2_reg_685_pp0_it2;
                ap_reg_ppstg_m_mid2_reg_685_pp0_it4 <= ap_reg_ppstg_m_mid2_reg_685_pp0_it3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_14)) then
                i_19_reg_773 <= i_19_fu_627_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_flatten9_fu_279_p2 = ap_const_lv1_0))) then
                i_mid2_reg_655 <= i_mid2_fu_311_p3;
                j_mid2_reg_647 <= j_mid2_fu_297_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                indvar_flatten_next8_reg_642 <= indvar_flatten_next8_fu_285_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_5)) then
                k_5_reg_722 <= k_5_fu_515_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_lv1_0 = exitcond_flatten_fu_347_p2))) then
                k_mid2_reg_691 <= k_mid2_fu_379_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_6)) then
                m_8_reg_745 <= m_8_fu_581_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_lv1_0 = exitcond_flatten_fu_347_p2))) then
                m_mid2_reg_685 <= m_mid2_fu_365_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_15))) then
                reg_267 <= C5_d_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_12) or (ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_20))) then
                reg_273 <= grp_fu_257_p2;
            end if;
        end if;
    end process;
    tmp_154_trn_cast1_reg_666(9 downto 5) <= "00000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_flatten9_fu_279_p2, exitcond_flatten_fu_347_p2, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it4, ap_reg_ppiten_pp0_it5, exitcond2_fu_509_p2, exitcond1_fu_575_p2, exitcond_fu_621_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond_flatten9_fu_279_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st20_fsm_14;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_3;
            when ap_ST_pp0_stg0_fsm_3 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it4)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond_flatten_fu_347_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_3;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond_flatten_fu_347_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then
                    ap_NS_fsm <= ap_ST_st10_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_4;
                end if;
            when ap_ST_st10_fsm_4 => 
                ap_NS_fsm <= ap_ST_st11_fsm_5;
            when ap_ST_st11_fsm_5 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_509_p2))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st12_fsm_6;
                end if;
            when ap_ST_st12_fsm_6 => 
                if ((ap_const_lv1_0 = exitcond1_fu_575_p2)) then
                    ap_NS_fsm <= ap_ST_st13_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st11_fsm_5;
                end if;
            when ap_ST_st13_fsm_7 => 
                ap_NS_fsm <= ap_ST_st14_fsm_8;
            when ap_ST_st14_fsm_8 => 
                ap_NS_fsm <= ap_ST_st15_fsm_9;
            when ap_ST_st15_fsm_9 => 
                ap_NS_fsm <= ap_ST_st16_fsm_10;
            when ap_ST_st16_fsm_10 => 
                ap_NS_fsm <= ap_ST_st17_fsm_11;
            when ap_ST_st17_fsm_11 => 
                ap_NS_fsm <= ap_ST_st18_fsm_12;
            when ap_ST_st18_fsm_12 => 
                ap_NS_fsm <= ap_ST_st19_fsm_13;
            when ap_ST_st19_fsm_13 => 
                ap_NS_fsm <= ap_ST_st12_fsm_6;
            when ap_ST_st20_fsm_14 => 
                if (not((ap_const_lv1_0 = exitcond_fu_621_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st21_fsm_15;
                end if;
            when ap_ST_st21_fsm_15 => 
                ap_NS_fsm <= ap_ST_st22_fsm_16;
            when ap_ST_st22_fsm_16 => 
                ap_NS_fsm <= ap_ST_st23_fsm_17;
            when ap_ST_st23_fsm_17 => 
                ap_NS_fsm <= ap_ST_st24_fsm_18;
            when ap_ST_st24_fsm_18 => 
                ap_NS_fsm <= ap_ST_st25_fsm_19;
            when ap_ST_st25_fsm_19 => 
                ap_NS_fsm <= ap_ST_st26_fsm_20;
            when ap_ST_st26_fsm_20 => 
                ap_NS_fsm <= ap_ST_st27_fsm_21;
            when ap_ST_st27_fsm_21 => 
                ap_NS_fsm <= ap_ST_st20_fsm_14;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    -- C5_d_address0 assign process. --
    C5_d_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st20_fsm_14, tmp_s_fu_319_p1, tmp_98_fu_633_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_14)) then 
            C5_d_address0 <= tmp_98_fu_633_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            C5_d_address0 <= tmp_s_fu_319_p1(5 - 1 downto 0);
        else 
            C5_d_address0 <= "XXXXX";
        end if; 
    end process;


    -- C5_d_ce0 assign process. --
    C5_d_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st20_fsm_14)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_14))) then 
            C5_d_ce0 <= ap_const_logic_1;
        else 
            C5_d_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- C5_dbias_address0 assign process. --
    C5_dbias_address0_assign_proc : process(ap_sig_cseq_ST_st20_fsm_14, C5_dbias_addr_reg_778, ap_sig_cseq_ST_st27_fsm_21, tmp_98_fu_633_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_21)) then 
            C5_dbias_address0 <= C5_dbias_addr_reg_778;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_14)) then 
            C5_dbias_address0 <= tmp_98_fu_633_p1(5 - 1 downto 0);
        else 
            C5_dbias_address0 <= "XXXXX";
        end if; 
    end process;


    -- C5_dbias_ce0 assign process. --
    C5_dbias_ce0_assign_proc : process(ap_sig_cseq_ST_st20_fsm_14, ap_sig_cseq_ST_st27_fsm_21)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_21))) then 
            C5_dbias_ce0 <= ap_const_logic_1;
        else 
            C5_dbias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C5_dbias_d0 <= reg_273;

    -- C5_dbias_we0 assign process. --
    C5_dbias_we0_assign_proc : process(ap_sig_cseq_ST_st27_fsm_21)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_21))) then 
            C5_dbias_we0 <= ap_const_logic_1;
        else 
            C5_dbias_we0 <= ap_const_logic_0;
        end if; 
    end process;

    C5_dmapData_addr1_cast_fu_478_p1 <= std_logic_vector(resize(unsigned(tmp_190_fu_471_p3),10));
    C5_dmapData_addr2_cast_fu_487_p1 <= std_logic_vector(resize(unsigned(C5_dmapData_addr2_fu_482_p2),32));
    C5_dmapData_addr2_fu_482_p2 <= std_logic_vector(unsigned(tmp_154_trn_cast1_reg_666) + unsigned(C5_dmapData_addr1_cast_fu_478_p1));
    C5_dmapData_addr3_fu_503_p2 <= std_logic_vector(unsigned(p_shl26_fu_499_p1) + unsigned(C5_dmapData_addr2_cast_fu_487_p1));
    C5_dmapData_addr4_fu_531_p2 <= std_logic_vector(unsigned(tmp_156_trn_fu_527_p1) + unsigned(C5_dmapData_addr3_reg_714));
    C5_dmapData_addr5_fu_542_p2 <= std_logic_vector(unsigned(tmp_134_fu_536_p2) + unsigned(C5_dmapData_addr4_fu_531_p2));
    C5_dmapData_addr6_fu_591_p2 <= std_logic_vector(unsigned(tmp_161_trn_fu_587_p1) + unsigned(C5_dmapData_addr5_reg_727));

    -- C5_dmapData_address0 assign process. --
    C5_dmapData_address0_assign_proc : process(ap_sig_cseq_ST_st12_fsm_6, C5_dmapData_addr_reg_750, ap_sig_cseq_ST_st19_fsm_13, tmp_195_fu_596_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_13)) then 
            C5_dmapData_address0 <= C5_dmapData_addr_reg_750;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_6)) then 
            C5_dmapData_address0 <= tmp_195_fu_596_p1(14 - 1 downto 0);
        else 
            C5_dmapData_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    -- C5_dmapData_ce0 assign process. --
    C5_dmapData_ce0_assign_proc : process(ap_sig_cseq_ST_st12_fsm_6, ap_sig_cseq_ST_st19_fsm_13)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_13))) then 
            C5_dmapData_ce0 <= ap_const_logic_1;
        else 
            C5_dmapData_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C5_dmapData_d0 <= reg_273;

    -- C5_dmapData_we0 assign process. --
    C5_dmapData_we0_assign_proc : process(ap_sig_cseq_ST_st19_fsm_13)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_13))) then 
            C5_dmapData_we0 <= ap_const_logic_1;
        else 
            C5_dmapData_we0 <= ap_const_logic_0;
        end if; 
    end process;

    S4_y_addr10_cast_fu_401_p1 <= std_logic_vector(resize(unsigned(S4_y_addr1_fu_396_p2),32));
    S4_y_addr1_fu_396_p2 <= std_logic_vector(unsigned(S4_y_addr9_reg_671) + unsigned(tmp_155_trn_cast_fu_393_p1));
    S4_y_addr2_fu_420_p2 <= std_logic_vector(unsigned(S4_y_addr10_cast_fu_401_p1) + unsigned(p_shl28_fu_416_p1));
    S4_y_addr3_fu_426_p2 <= std_logic_vector(unsigned(S4_y_addr2_fu_420_p2) + unsigned(tmp_159_trn_fu_405_p1));
    S4_y_addr9_fu_341_p2 <= std_logic_vector(unsigned(tmp_154_trn_cast_fu_327_p1) + unsigned(p_shl_cast_fu_337_p1));
    S4_y_address0 <= tmp_191_fu_432_p1(9 - 1 downto 0);

    -- S4_y_ce0 assign process. --
    S4_y_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_3, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            S4_y_ce0 <= ap_const_logic_1;
        else 
            S4_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st20_fsm_14, exitcond_fu_621_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_14) and not((ap_const_lv1_0 = exitcond_fu_621_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st20_fsm_14, exitcond_fu_621_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_14) and not((ap_const_lv1_0 = exitcond_fu_621_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_102 assign process. --
    ap_sig_bdd_102_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_102 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_109 assign process. --
    ap_sig_bdd_109_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_109 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    -- ap_sig_bdd_119 assign process. --
    ap_sig_bdd_119_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_119 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_142 assign process. --
    ap_sig_bdd_142_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_142 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_199 assign process. --
    ap_sig_bdd_199_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_199 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_208 assign process. --
    ap_sig_bdd_208_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_208 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_228 assign process. --
    ap_sig_bdd_228_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_228 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_243 assign process. --
    ap_sig_bdd_243_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_243 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_254 assign process. --
    ap_sig_bdd_254_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_254 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_304 assign process. --
    ap_sig_bdd_304_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_304 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_313 assign process. --
    ap_sig_bdd_313_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_313 <= (ap_const_lv1_1 = ap_CS_fsm(21 downto 21));
    end process;


    -- ap_sig_bdd_341 assign process. --
    ap_sig_bdd_341_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_341 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_348 assign process. --
    ap_sig_bdd_348_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_348 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    -- ap_sig_bdd_40 assign process. --
    ap_sig_bdd_40_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_40 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_85 assign process. --
    ap_sig_bdd_85_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_85 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_92 assign process. --
    ap_sig_bdd_92_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_92 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_3 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_3_assign_proc : process(ap_sig_bdd_142)
    begin
        if (ap_sig_bdd_142) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st10_fsm_4 assign process. --
    ap_sig_cseq_ST_st10_fsm_4_assign_proc : process(ap_sig_bdd_199)
    begin
        if (ap_sig_bdd_199) then 
            ap_sig_cseq_ST_st10_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_5 assign process. --
    ap_sig_cseq_ST_st11_fsm_5_assign_proc : process(ap_sig_bdd_208)
    begin
        if (ap_sig_bdd_208) then 
            ap_sig_cseq_ST_st11_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st12_fsm_6 assign process. --
    ap_sig_cseq_ST_st12_fsm_6_assign_proc : process(ap_sig_bdd_228)
    begin
        if (ap_sig_bdd_228) then 
            ap_sig_cseq_ST_st12_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st13_fsm_7 assign process. --
    ap_sig_cseq_ST_st13_fsm_7_assign_proc : process(ap_sig_bdd_243)
    begin
        if (ap_sig_bdd_243) then 
            ap_sig_cseq_ST_st13_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_8 assign process. --
    ap_sig_cseq_ST_st14_fsm_8_assign_proc : process(ap_sig_bdd_341)
    begin
        if (ap_sig_bdd_341) then 
            ap_sig_cseq_ST_st14_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st18_fsm_12 assign process. --
    ap_sig_cseq_ST_st18_fsm_12_assign_proc : process(ap_sig_bdd_102)
    begin
        if (ap_sig_bdd_102) then 
            ap_sig_cseq_ST_st18_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st19_fsm_13 assign process. --
    ap_sig_cseq_ST_st19_fsm_13_assign_proc : process(ap_sig_bdd_304)
    begin
        if (ap_sig_bdd_304) then 
            ap_sig_cseq_ST_st19_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_40)
    begin
        if (ap_sig_bdd_40) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st20_fsm_14 assign process. --
    ap_sig_cseq_ST_st20_fsm_14_assign_proc : process(ap_sig_bdd_254)
    begin
        if (ap_sig_bdd_254) then 
            ap_sig_cseq_ST_st20_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st21_fsm_15 assign process. --
    ap_sig_cseq_ST_st21_fsm_15_assign_proc : process(ap_sig_bdd_92)
    begin
        if (ap_sig_bdd_92) then 
            ap_sig_cseq_ST_st21_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st22_fsm_16 assign process. --
    ap_sig_cseq_ST_st22_fsm_16_assign_proc : process(ap_sig_bdd_348)
    begin
        if (ap_sig_bdd_348) then 
            ap_sig_cseq_ST_st22_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st22_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st26_fsm_20 assign process. --
    ap_sig_cseq_ST_st26_fsm_20_assign_proc : process(ap_sig_bdd_109)
    begin
        if (ap_sig_bdd_109) then 
            ap_sig_cseq_ST_st26_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st26_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st27_fsm_21 assign process. --
    ap_sig_cseq_ST_st27_fsm_21_assign_proc : process(ap_sig_bdd_313)
    begin
        if (ap_sig_bdd_313) then 
            ap_sig_cseq_ST_st27_fsm_21 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st27_fsm_21 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_119)
    begin
        if (ap_sig_bdd_119) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_85)
    begin
        if (ap_sig_bdd_85) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond16_fu_291_p2 <= "1" when (j_reg_180 = ap_const_lv5_10) else "0";
    exitcond17_fu_359_p2 <= "1" when (m_reg_213 = ap_const_lv3_5) else "0";
    exitcond1_fu_575_p2 <= "1" when (m_1_reg_235 = ap_const_lv3_5) else "0";
    exitcond2_fu_509_p2 <= "1" when (k_1_reg_224 = ap_const_lv3_5) else "0";
    exitcond_flatten9_fu_279_p2 <= "1" when (indvar_flatten7_reg_158 = ap_const_lv9_1E0) else "0";
    exitcond_flatten_fu_347_p2 <= "1" when (indvar_flatten_reg_191 = ap_const_lv5_19) else "0";
    exitcond_fu_621_p2 <= "1" when (i_1_reg_246 = ap_const_lv5_1E) else "0";
    grp_fu_257_ce <= ap_const_logic_1;

    -- grp_fu_257_p0 assign process. --
    grp_fu_257_p0_assign_proc : process(C5_dmapData_load_reg_760, C5_dbias_load_reg_788, ap_sig_cseq_ST_st14_fsm_8, ap_sig_cseq_ST_st22_fsm_16)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_16)) then 
            grp_fu_257_p0 <= C5_dbias_load_reg_788;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_8)) then 
            grp_fu_257_p0 <= C5_dmapData_load_reg_760;
        else 
            grp_fu_257_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_257_p1 assign process. --
    grp_fu_257_p1_assign_proc : process(reg_267, empty_69_reg_765, ap_sig_cseq_ST_st14_fsm_8, ap_sig_cseq_ST_st22_fsm_16)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_16)) then 
            grp_fu_257_p1 <= reg_267;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_8)) then 
            grp_fu_257_p1 <= empty_69_reg_765;
        else 
            grp_fu_257_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_261_ce <= ap_const_logic_1;
    grp_fu_261_p0 <= S4_y_q0;
    grp_fu_261_p1 <= reg_267;
    i_19_fu_627_p2 <= std_logic_vector(unsigned(i_1_reg_246) + unsigned(ap_const_lv5_1));
    i_4_fu_305_p2 <= std_logic_vector(unsigned(i_reg_169) + unsigned(ap_const_lv5_1));
    i_mid2_fu_311_p3 <= 
        i_4_fu_305_p2 when (exitcond16_fu_291_p2(0) = '1') else 
        i_reg_169;
    indvar_flatten_next8_fu_285_p2 <= std_logic_vector(unsigned(indvar_flatten7_reg_158) + unsigned(ap_const_lv9_1));
    indvar_flatten_next_fu_353_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_191) + unsigned(ap_const_lv5_1));
    j_16_fu_570_p2 <= std_logic_vector(unsigned(j_mid2_reg_647) + unsigned(ap_const_lv5_1));
    j_mid2_fu_297_p3 <= 
        ap_const_lv5_0 when (exitcond16_fu_291_p2(0) = '1') else 
        j_reg_180;
    k_5_fu_515_p2 <= std_logic_vector(unsigned(k_1_reg_224) + unsigned(ap_const_lv3_1));
    k_mid2_fu_379_p3 <= 
        k_s_fu_373_p2 when (exitcond17_fu_359_p2(0) = '1') else 
        k_phi_fu_206_p4;

    -- k_phi_fu_206_p4 assign process. --
    k_phi_fu_206_p4_assign_proc : process(k_reg_202, exitcond_flatten_reg_676, ap_sig_cseq_ST_pp0_stg0_fsm_3, ap_reg_ppiten_pp0_it1, k_mid2_reg_691)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = exitcond_flatten_reg_676))) then 
            k_phi_fu_206_p4 <= k_mid2_reg_691;
        else 
            k_phi_fu_206_p4 <= k_reg_202;
        end if; 
    end process;

    k_s_fu_373_p2 <= std_logic_vector(unsigned(k_phi_fu_206_p4) + unsigned(ap_const_lv3_1));
    m_7_fu_387_p2 <= std_logic_vector(unsigned(m_mid2_fu_365_p3) + unsigned(ap_const_lv3_1));
    m_8_fu_581_p2 <= std_logic_vector(unsigned(m_1_reg_235) + unsigned(ap_const_lv3_1));
    m_mid2_fu_365_p3 <= 
        ap_const_lv3_0 when (exitcond17_fu_359_p2(0) = '1') else 
        m_reg_213;
    p_addr10_fu_611_p2 <= std_logic_vector(unsigned(tmp_163_trn_cast_fu_607_p1) + unsigned(p_addr_reg_732));
    p_addr11_fu_454_p2 <= std_logic_vector(unsigned(tmp_155_trn_cast1_fu_437_p1) + unsigned(p_shl27_cast_fu_450_p1));
    p_addr12_fu_460_p2 <= std_logic_vector(unsigned(p_addr11_fu_454_p2) + unsigned(tmp_159_trn_cast_fu_440_p1));
    p_addr_fu_564_p2 <= std_logic_vector(unsigned(p_shl29_cast_fu_560_p1) + unsigned(tmp_158_trn_cast_fu_548_p1));
    p_shl26_fu_499_p1 <= std_logic_vector(resize(unsigned(tmp_132_fu_491_p3),32));
    p_shl27_cast_fu_450_p1 <= std_logic_vector(resize(unsigned(tmp_192_fu_443_p3),6));
    p_shl28_fu_416_p1 <= std_logic_vector(resize(unsigned(tmp_133_fu_408_p3),32));
    p_shl29_cast_fu_560_p1 <= std_logic_vector(resize(unsigned(tmp_194_fu_552_p3),6));
    p_shl_cast_fu_337_p1 <= std_logic_vector(resize(unsigned(tmp_189_fu_330_p3),8));
    tmp_101_fu_521_p2 <= std_logic_vector(signed(ap_const_lv3_4) - signed(k_1_reg_224));
    tmp_102_fu_601_p2 <= std_logic_vector(signed(ap_const_lv3_4) - signed(m_1_reg_235));
    tmp_132_fu_491_p3 <= (C5_dmapData_addr2_fu_482_p2 & ap_const_lv2_0);
    tmp_133_fu_408_p3 <= (S4_y_addr1_fu_396_p2 & ap_const_lv2_0);
    tmp_134_fu_536_p2 <= std_logic_vector(shift_left(unsigned(C5_dmapData_addr4_fu_531_p2),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    tmp_154_trn_cast1_fu_324_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_647),10));
    tmp_154_trn_cast_fu_327_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_647),8));
    tmp_155_trn_cast1_fu_437_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_k_mid2_reg_691_pp0_it4),6));
    tmp_155_trn_cast_fu_393_p1 <= std_logic_vector(resize(unsigned(k_mid2_reg_691),8));
    tmp_156_trn_fu_527_p1 <= std_logic_vector(resize(unsigned(k_1_reg_224),32));
    tmp_158_trn_cast_fu_548_p1 <= std_logic_vector(resize(unsigned(tmp_101_fu_521_p2),6));
    tmp_159_trn_cast_fu_440_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_m_mid2_reg_685_pp0_it4),6));
    tmp_159_trn_fu_405_p1 <= std_logic_vector(resize(unsigned(m_mid2_reg_685),32));
    tmp_161_trn_fu_587_p1 <= std_logic_vector(resize(unsigned(m_1_reg_235),32));
    tmp_163_trn_cast_fu_607_p1 <= std_logic_vector(resize(unsigned(tmp_102_fu_601_p2),6));
    tmp_189_fu_330_p3 <= (j_mid2_reg_647 & ap_const_lv2_0);
    tmp_190_fu_471_p3 <= (i_mid2_reg_655 & ap_const_lv4_0);
    tmp_191_fu_432_p1 <= std_logic_vector(resize(unsigned(S4_y_addr3_fu_426_p2),64));
    tmp_192_fu_443_p3 <= (ap_reg_ppstg_k_mid2_reg_691_pp0_it4 & ap_const_lv2_0);
    tmp_193_fu_466_p1 <= std_logic_vector(resize(unsigned(p_addr12_fu_460_p2),64));
    tmp_194_fu_552_p3 <= (tmp_101_fu_521_p2 & ap_const_lv2_0);
    tmp_195_fu_596_p1 <= std_logic_vector(resize(unsigned(C5_dmapData_addr6_fu_591_p2),64));
    tmp_196_fu_616_p1 <= std_logic_vector(resize(unsigned(p_addr10_fu_611_p2),64));
    tmp_98_fu_633_p1 <= std_logic_vector(resize(unsigned(i_1_reg_246),64));

    -- tmp_address0 assign process. --
    tmp_address0_assign_proc : process(ap_reg_ppiten_pp0_it5, ap_sig_cseq_ST_st12_fsm_6, tmp_193_fu_466_p1, tmp_196_fu_616_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it5)) then 
            tmp_address0 <= tmp_193_fu_466_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_6)) then 
            tmp_address0 <= tmp_196_fu_616_p1(5 - 1 downto 0);
        else 
            tmp_address0 <= "XXXXX";
        end if; 
    end process;


    -- tmp_ce0 assign process. --
    tmp_ce0_assign_proc : process(ap_reg_ppiten_pp0_it5, ap_sig_cseq_ST_st12_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_6))) then 
            tmp_ce0 <= ap_const_logic_1;
        else 
            tmp_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_d0 <= grp_fu_261_p2;
    tmp_s_fu_319_p1 <= std_logic_vector(resize(unsigned(i_mid2_fu_311_p3),64));

    -- tmp_we0 assign process. --
    tmp_we0_assign_proc : process(ap_reg_ppiten_pp0_it5, ap_reg_ppstg_exitcond_flatten_reg_676_pp0_it4)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it5) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten_reg_676_pp0_it4)))) then 
            tmp_we0 <= ap_const_logic_1;
        else 
            tmp_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
