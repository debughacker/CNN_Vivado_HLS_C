-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dateport_DC3_layer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    C3_bias_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    C3_bias_ce0 : OUT STD_LOGIC;
    C3_bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    S4_d_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    S4_d_ce0 : OUT STD_LOGIC;
    S4_d_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C3_y_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    C3_y_ce0 : OUT STD_LOGIC;
    C3_y_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C3_y_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    C3_y_ce1 : OUT STD_LOGIC;
    C3_y_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    C3_d_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    C3_d_ce0 : OUT STD_LOGIC;
    C3_d_we0 : OUT STD_LOGIC;
    C3_d_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C3_d_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    C3_d_ce1 : OUT STD_LOGIC;
    C3_d_we1 : OUT STD_LOGIC;
    C3_d_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of dateport_DC3_layer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_3E800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111110100000000000000000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_39 : BOOLEAN;
    signal grp_fu_207_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_239 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_83 : BOOLEAN;
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_90 : BOOLEAN;
    signal grp_fu_211_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_244 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_13_fu_255_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_13_reg_745 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_102 : BOOLEAN;
    signal exitcond_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal C3_bias_load_reg_755 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_116 : BOOLEAN;
    signal S4_d_addr12_fu_282_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal S4_d_addr12_reg_761 : STD_LOGIC_VECTOR (7 downto 0);
    signal C3_y_addr5_fu_312_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal C3_y_addr5_reg_766 : STD_LOGIC_VECTOR (8 downto 0);
    signal S4_d_addr14_fu_365_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal S4_d_addr14_reg_775 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_129 : BOOLEAN;
    signal tmp_s_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal C3_y_addr7_fu_404_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C3_y_addr7_reg_780 : STD_LOGIC_VECTOR (31 downto 0);
    signal C3_y_addr9_fu_443_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C3_y_addr9_reg_786 : STD_LOGIC_VECTOR (31 downto 0);
    signal S4_d_addr15_fu_469_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal S4_d_addr15_reg_795 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_146 : BOOLEAN;
    signal tmp_62_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_112_fu_483_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_112_reg_800 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_113_fu_503_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_113_reg_810 : STD_LOGIC_VECTOR (63 downto 0);
    signal C3_y_addr10_fu_508_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C3_y_addr10_reg_820 : STD_LOGIC_VECTOR (31 downto 0);
    signal C3_y_addr4_fu_513_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C3_y_addr4_reg_825 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_9_fu_518_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_9_reg_830 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_10_fu_524_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal C3_y_load_reg_840 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_175 : BOOLEAN;
    signal C3_y_load_4_reg_845 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_114_fu_530_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_114_reg_850 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_115_fu_534_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_115_reg_860 : STD_LOGIC_VECTOR (63 downto 0);
    signal C3_y_load_5_reg_870 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_192 : BOOLEAN;
    signal C3_y_load_6_reg_875 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_44_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_44_reg_885 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_fu_620_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_reg_890 : STD_LOGIC_VECTOR (0 downto 0);
    signal S4_d_load_reg_895 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_207 : BOOLEAN;
    signal p_0_i_fu_626_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_0_i3_fu_634_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_54_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_54_reg_911 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_59_fu_720_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_59_reg_916 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0_i6_fu_726_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_224 : BOOLEAN;
    signal p_0_i9_fu_734_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_215_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_64_reg_931 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st16_fsm_15 : STD_LOGIC;
    signal ap_sig_bdd_235 : BOOLEAN;
    signal grp_fu_220_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_67_reg_936 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_69_reg_941 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st17_fsm_16 : STD_LOGIC;
    signal ap_sig_bdd_245 : BOOLEAN;
    signal tmp_71_reg_946 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_172 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_184 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_reg_196 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st21_fsm_20 : STD_LOGIC;
    signal ap_sig_bdd_265 : BOOLEAN;
    signal tmp_fu_261_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_111_fu_538_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st20_fsm_19 : STD_LOGIC;
    signal ap_sig_bdd_275 : BOOLEAN;
    signal grp_fu_207_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_207_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_289 : BOOLEAN;
    signal grp_fu_211_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_211_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_215_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_215_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st18_fsm_17 : STD_LOGIC;
    signal ap_sig_bdd_302 : BOOLEAN;
    signal grp_fu_220_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_220_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_229_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_229_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_234_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_234_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_108_fu_270_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_trn_cast_fu_266_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl41_cast_fu_278_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_109_fu_288_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_110_fu_300_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl42_cast_fu_308_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_cast_fu_296_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_87_fu_330_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_76_trn_cast_fu_340_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal S4_d_addr13_fu_344_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_88_fu_353_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_fu_361_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal S4_d_addr13_cast_fu_349_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_77_trn_cast_fu_371_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal C3_y_addr6_fu_375_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_89_fu_380_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_90_fu_392_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl16_fu_388_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl17_fu_400_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_61_fu_324_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_79_trn6_cast_fu_410_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal C3_y_addr8_fu_414_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_91_fu_419_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_92_fu_431_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl18_fu_427_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl19_fu_439_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_63_fu_455_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_82_trn_fu_465_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_83_trn_fu_474_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal C3_y_addr11_fu_478_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_66_fu_488_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_87_trn_fu_494_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal C3_y_addr12_fu_498_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_to_int_fu_542_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_fu_546_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_93_fu_556_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_fu_572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_3_to_int_fu_584_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_fu_588_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_94_fu_598_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs6_fu_608_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs5_fu_602_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_fu_614_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_4_to_int_fu_642_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_50_fu_646_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_95_fu_656_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs8_fu_666_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs7_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_52_fu_672_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_5_to_int_fu_684_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_55_fu_688_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_96_fu_698_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs1_fu_708_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs9_fu_702_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_57_fu_714_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_207_ce : STD_LOGIC;
    signal grp_fu_211_ce : STD_LOGIC;
    signal grp_fu_215_ce : STD_LOGIC;
    signal grp_fu_220_ce : STD_LOGIC;
    signal grp_fu_229_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_234_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);

    component dateport_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dateport_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dateport_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    dateport_fadd_32ns_32ns_32_5_full_dsp_U54 : component dateport_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_207_p0,
        din1 => grp_fu_207_p1,
        ce => grp_fu_207_ce,
        dout => grp_fu_207_p2);

    dateport_fadd_32ns_32ns_32_5_full_dsp_U55 : component dateport_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_211_p0,
        din1 => grp_fu_211_p1,
        ce => grp_fu_211_ce,
        dout => grp_fu_211_p2);

    dateport_fmul_32ns_32ns_32_4_max_dsp_U56 : component dateport_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_215_p0,
        din1 => grp_fu_215_p1,
        ce => grp_fu_215_ce,
        dout => grp_fu_215_p2);

    dateport_fmul_32ns_32ns_32_4_max_dsp_U57 : component dateport_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_220_p0,
        din1 => grp_fu_220_p1,
        ce => grp_fu_220_ce,
        dout => grp_fu_220_p2);

    dateport_fcmp_32ns_32ns_1_1_U58 : component dateport_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_229_p0,
        din1 => grp_fu_229_p1,
        opcode => grp_fu_229_opcode,
        dout => grp_fu_229_p2);

    dateport_fcmp_32ns_32ns_1_1_U59 : component dateport_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_234_p0,
        din1 => grp_fu_234_p1,
        opcode => grp_fu_234_opcode,
        dout => grp_fu_234_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- i_reg_172 assign process. --
    i_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = tmp_s_fu_318_p2))) then 
                i_reg_172 <= i_13_reg_745;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_172 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- j_reg_184 assign process. --
    j_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                j_reg_184 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = tmp_62_fu_449_p2))) then 
                j_reg_184 <= j_10_fu_524_p2;
            end if; 
        end if;
    end process;

    -- k_reg_196 assign process. --
    k_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_s_fu_318_p2)))) then 
                k_reg_196 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
                k_reg_196 <= k_9_reg_830;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                C3_bias_load_reg_755 <= C3_bias_q0;
                    C3_y_addr5_reg_766(8 downto 1) <= C3_y_addr5_fu_312_p2(8 downto 1);
                S4_d_addr12_reg_761 <= S4_d_addr12_fu_282_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = tmp_62_fu_449_p2)))) then
                C3_y_addr10_reg_820 <= C3_y_addr10_fu_508_p2;
                    C3_y_addr4_reg_825(31 downto 1) <= C3_y_addr4_fu_513_p2(31 downto 1);
                S4_d_addr15_reg_795 <= S4_d_addr15_fu_469_p2;
                k_9_reg_830 <= k_9_fu_518_p2;
                    tmp_112_reg_800(31 downto 0) <= tmp_112_fu_483_p1(31 downto 0);
                    tmp_113_reg_810(31 downto 1) <= tmp_113_fu_503_p1(31 downto 1);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_s_fu_318_p2)))) then
                    C3_y_addr7_reg_780(31 downto 1) <= C3_y_addr7_fu_404_p2(31 downto 1);
                    C3_y_addr9_reg_786(31 downto 2) <= C3_y_addr9_fu_443_p2(31 downto 2);
                S4_d_addr14_reg_775 <= S4_d_addr14_fu_365_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                C3_y_load_4_reg_845 <= C3_y_q1;
                C3_y_load_reg_840 <= C3_y_q0;
                    tmp_114_reg_850(31 downto 0) <= tmp_114_fu_530_p1(31 downto 0);
                    tmp_115_reg_860(31 downto 1) <= tmp_115_fu_534_p1(31 downto 1);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                C3_y_load_5_reg_870 <= C3_y_q0;
                C3_y_load_6_reg_875 <= C3_y_q1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then
                S4_d_load_reg_895 <= S4_d_q0;
                tmp_54_reg_911 <= tmp_54_fu_678_p2;
                tmp_59_reg_916 <= tmp_59_fu_720_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_13_reg_745 <= i_13_fu_255_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11))) then
                reg_239 <= grp_fu_207_p2;
                reg_244 <= grp_fu_211_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then
                tmp_44_reg_885 <= tmp_44_fu_578_p2;
                tmp_49_reg_890 <= tmp_49_fu_620_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then
                tmp_64_reg_931 <= grp_fu_215_p2;
                tmp_67_reg_936 <= grp_fu_220_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then
                tmp_69_reg_941 <= grp_fu_215_p2;
                tmp_71_reg_946 <= grp_fu_220_p2;
            end if;
        end if;
    end process;
    C3_y_addr5_reg_766(0) <= '0';
    C3_y_addr7_reg_780(0) <= '0';
    C3_y_addr9_reg_786(1 downto 0) <= "10";
    tmp_112_reg_800(63 downto 32) <= "00000000000000000000000000000000";
    tmp_113_reg_810(0) <= '1';
    tmp_113_reg_810(63 downto 32) <= "00000000000000000000000000000000";
    C3_y_addr4_reg_825(0) <= '1';
    tmp_114_reg_850(63 downto 32) <= "00000000000000000000000000000000";
    tmp_115_reg_860(0) <= '1';
    tmp_115_reg_860(63 downto 32) <= "00000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_fu_249_p2, tmp_s_fu_318_p2, tmp_62_fu_449_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond_fu_249_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_lv1_0 = tmp_s_fu_318_p2))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st5_fsm_4 => 
                if ((ap_const_lv1_0 = tmp_62_fu_449_p2)) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    C3_bias_address0 <= tmp_fu_261_p1(4 - 1 downto 0);

    -- C3_bias_ce0 assign process. --
    C3_bias_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            C3_bias_ce0 <= ap_const_logic_1;
        else 
            C3_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- C3_d_address0 assign process. --
    C3_d_address0_assign_proc : process(tmp_112_reg_800, tmp_114_reg_850, ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_st20_fsm_19)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
            C3_d_address0 <= tmp_114_reg_850(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            C3_d_address0 <= tmp_112_reg_800(11 - 1 downto 0);
        else 
            C3_d_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    -- C3_d_address1 assign process. --
    C3_d_address1_assign_proc : process(tmp_113_reg_810, tmp_115_reg_860, ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_st20_fsm_19)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
            C3_d_address1 <= tmp_115_reg_860(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            C3_d_address1 <= tmp_113_reg_810(11 - 1 downto 0);
        else 
            C3_d_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    -- C3_d_ce0 assign process. --
    C3_d_ce0_assign_proc : process(ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_st20_fsm_19)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19))) then 
            C3_d_ce0 <= ap_const_logic_1;
        else 
            C3_d_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- C3_d_ce1 assign process. --
    C3_d_ce1_assign_proc : process(ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_st20_fsm_19)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19))) then 
            C3_d_ce1 <= ap_const_logic_1;
        else 
            C3_d_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    C3_d_d0 <= grp_fu_215_p2;
    C3_d_d1 <= grp_fu_220_p2;

    -- C3_d_we0 assign process. --
    C3_d_we0_assign_proc : process(ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_st20_fsm_19)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19))) then 
            C3_d_we0 <= ap_const_logic_1;
        else 
            C3_d_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- C3_d_we1 assign process. --
    C3_d_we1_assign_proc : process(ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_st20_fsm_19)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19))) then 
            C3_d_we1 <= ap_const_logic_1;
        else 
            C3_d_we1 <= ap_const_logic_0;
        end if; 
    end process;

    C3_y_addr10_fu_508_p2 <= std_logic_vector(unsigned(tmp_83_trn_fu_474_p1) + unsigned(C3_y_addr9_reg_786));
    C3_y_addr11_fu_478_p2 <= std_logic_vector(unsigned(tmp_83_trn_fu_474_p1) + unsigned(C3_y_addr7_reg_780));
    C3_y_addr12_fu_498_p2 <= std_logic_vector(unsigned(tmp_87_trn_fu_494_p1) + unsigned(C3_y_addr7_reg_780));
    C3_y_addr4_fu_513_p2 <= std_logic_vector(unsigned(tmp_87_trn_fu_494_p1) + unsigned(C3_y_addr9_reg_786));
    C3_y_addr5_fu_312_p2 <= std_logic_vector(unsigned(p_shl42_cast_fu_308_p1) + unsigned(p_shl_cast_fu_296_p1));
    C3_y_addr6_fu_375_p2 <= std_logic_vector(unsigned(tmp_77_trn_cast_fu_371_p1) + unsigned(C3_y_addr5_reg_766));
    C3_y_addr7_fu_404_p2 <= std_logic_vector(unsigned(p_shl16_fu_388_p1) + unsigned(p_shl17_fu_400_p1));
    C3_y_addr8_fu_414_p2 <= std_logic_vector(unsigned(tmp_79_trn6_cast_fu_410_p1) + unsigned(C3_y_addr5_reg_766));
    C3_y_addr9_fu_443_p2 <= std_logic_vector(unsigned(p_shl18_fu_427_p1) + unsigned(p_shl19_fu_439_p1));

    -- C3_y_address0 assign process. --
    C3_y_address0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, tmp_112_fu_483_p1, ap_sig_cseq_ST_st6_fsm_5, tmp_114_fu_530_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            C3_y_address0 <= tmp_114_fu_530_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            C3_y_address0 <= tmp_112_fu_483_p1(11 - 1 downto 0);
        else 
            C3_y_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    -- C3_y_address1 assign process. --
    C3_y_address1_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, tmp_113_fu_503_p1, ap_sig_cseq_ST_st6_fsm_5, tmp_115_fu_534_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            C3_y_address1 <= tmp_115_fu_534_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            C3_y_address1 <= tmp_113_fu_503_p1(11 - 1 downto 0);
        else 
            C3_y_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    -- C3_y_ce0 assign process. --
    C3_y_ce0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5))) then 
            C3_y_ce0 <= ap_const_logic_1;
        else 
            C3_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- C3_y_ce1 assign process. --
    C3_y_ce1_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5))) then 
            C3_y_ce1 <= ap_const_logic_1;
        else 
            C3_y_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    S4_d_addr12_fu_282_p2 <= std_logic_vector(unsigned(tmp_trn_cast_fu_266_p1) + unsigned(p_shl41_cast_fu_278_p1));
    S4_d_addr13_cast_fu_349_p1 <= std_logic_vector(resize(unsigned(S4_d_addr13_fu_344_p2),32));
    S4_d_addr13_fu_344_p2 <= std_logic_vector(unsigned(tmp_76_trn_cast_fu_340_p1) + unsigned(S4_d_addr12_reg_761));
    S4_d_addr14_fu_365_p2 <= std_logic_vector(unsigned(p_shl_fu_361_p1) + unsigned(S4_d_addr13_cast_fu_349_p1));
    S4_d_addr15_fu_469_p2 <= std_logic_vector(unsigned(tmp_82_trn_fu_465_p1) + unsigned(S4_d_addr14_reg_775));
    S4_d_address0 <= tmp_111_fu_538_p1(9 - 1 downto 0);

    -- S4_d_ce0 assign process. --
    S4_d_ce0_assign_proc : process(ap_sig_cseq_ST_st12_fsm_11)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            S4_d_ce0 <= ap_const_logic_1;
        else 
            S4_d_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_249_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_fu_249_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_249_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_fu_249_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_102 assign process. --
    ap_sig_bdd_102_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_102 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_116 assign process. --
    ap_sig_bdd_116_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_116 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_129 assign process. --
    ap_sig_bdd_129_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_129 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_146 assign process. --
    ap_sig_bdd_146_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_146 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_175 assign process. --
    ap_sig_bdd_175_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_175 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_192 assign process. --
    ap_sig_bdd_192_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_192 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_207 assign process. --
    ap_sig_bdd_207_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_207 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_224 assign process. --
    ap_sig_bdd_224_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_224 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_235 assign process. --
    ap_sig_bdd_235_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_235 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    -- ap_sig_bdd_245 assign process. --
    ap_sig_bdd_245_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_245 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    -- ap_sig_bdd_265 assign process. --
    ap_sig_bdd_265_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_265 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    -- ap_sig_bdd_275 assign process. --
    ap_sig_bdd_275_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_275 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    -- ap_sig_bdd_289 assign process. --
    ap_sig_bdd_289_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_289 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_302 assign process. --
    ap_sig_bdd_302_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_302 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    -- ap_sig_bdd_39 assign process. --
    ap_sig_bdd_39_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_39 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_83 assign process. --
    ap_sig_bdd_83_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_83 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_90 assign process. --
    ap_sig_bdd_90_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_90 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_cseq_ST_st11_fsm_10 assign process. --
    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_bdd_83)
    begin
        if (ap_sig_bdd_83) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st12_fsm_11 assign process. --
    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_bdd_90)
    begin
        if (ap_sig_bdd_90) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st13_fsm_12 assign process. --
    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_bdd_207)
    begin
        if (ap_sig_bdd_207) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_13 assign process. --
    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_bdd_224)
    begin
        if (ap_sig_bdd_224) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st16_fsm_15 assign process. --
    ap_sig_cseq_ST_st16_fsm_15_assign_proc : process(ap_sig_bdd_235)
    begin
        if (ap_sig_bdd_235) then 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st17_fsm_16 assign process. --
    ap_sig_cseq_ST_st17_fsm_16_assign_proc : process(ap_sig_bdd_245)
    begin
        if (ap_sig_bdd_245) then 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st18_fsm_17 assign process. --
    ap_sig_cseq_ST_st18_fsm_17_assign_proc : process(ap_sig_bdd_302)
    begin
        if (ap_sig_bdd_302) then 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_39)
    begin
        if (ap_sig_bdd_39) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st20_fsm_19 assign process. --
    ap_sig_cseq_ST_st20_fsm_19_assign_proc : process(ap_sig_bdd_275)
    begin
        if (ap_sig_bdd_275) then 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st21_fsm_20 assign process. --
    ap_sig_cseq_ST_st21_fsm_20_assign_proc : process(ap_sig_bdd_265)
    begin
        if (ap_sig_bdd_265) then 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_102)
    begin
        if (ap_sig_bdd_102) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_116)
    begin
        if (ap_sig_bdd_116) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_129)
    begin
        if (ap_sig_bdd_129) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_146)
    begin
        if (ap_sig_bdd_146) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_175)
    begin
        if (ap_sig_bdd_175) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_192)
    begin
        if (ap_sig_bdd_192) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_289)
    begin
        if (ap_sig_bdd_289) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_249_p2 <= "1" when (i_reg_172 = ap_const_lv5_10) else "0";
    grp_fu_207_ce <= ap_const_logic_1;

    -- grp_fu_207_p0 assign process. --
    grp_fu_207_p0_assign_proc : process(C3_y_load_reg_840, C3_y_load_5_reg_870, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            grp_fu_207_p0 <= C3_y_load_5_reg_870;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            grp_fu_207_p0 <= C3_y_load_reg_840;
        else 
            grp_fu_207_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_207_p1 <= C3_bias_load_reg_755;
    grp_fu_211_ce <= ap_const_logic_1;

    -- grp_fu_211_p0 assign process. --
    grp_fu_211_p0_assign_proc : process(C3_y_load_4_reg_845, ap_sig_cseq_ST_st7_fsm_6, C3_y_load_6_reg_875, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            grp_fu_211_p0 <= C3_y_load_6_reg_875;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            grp_fu_211_p0 <= C3_y_load_4_reg_845;
        else 
            grp_fu_211_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_211_p1 <= C3_bias_load_reg_755;
    grp_fu_215_ce <= ap_const_logic_1;

    -- grp_fu_215_p0 assign process. --
    grp_fu_215_p0_assign_proc : process(S4_d_q0, S4_d_load_reg_895, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st14_fsm_13, tmp_64_reg_931, tmp_69_reg_941, ap_sig_cseq_ST_st17_fsm_16, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
            grp_fu_215_p0 <= tmp_69_reg_941;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then 
            grp_fu_215_p0 <= tmp_64_reg_931;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            grp_fu_215_p0 <= S4_d_load_reg_895;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            grp_fu_215_p0 <= S4_d_q0;
        else 
            grp_fu_215_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_215_p1 assign process. --
    grp_fu_215_p1_assign_proc : process(ap_sig_cseq_ST_st13_fsm_12, p_0_i_fu_626_p3, p_0_i6_fu_726_p3, ap_sig_cseq_ST_st14_fsm_13, ap_sig_cseq_ST_st17_fsm_16, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
            grp_fu_215_p1 <= ap_const_lv32_3E800000;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            grp_fu_215_p1 <= p_0_i6_fu_726_p3;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            grp_fu_215_p1 <= p_0_i_fu_626_p3;
        else 
            grp_fu_215_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_220_ce <= ap_const_logic_1;

    -- grp_fu_220_p0 assign process. --
    grp_fu_220_p0_assign_proc : process(S4_d_q0, S4_d_load_reg_895, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st14_fsm_13, tmp_67_reg_936, ap_sig_cseq_ST_st17_fsm_16, tmp_71_reg_946, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
            grp_fu_220_p0 <= tmp_71_reg_946;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then 
            grp_fu_220_p0 <= tmp_67_reg_936;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            grp_fu_220_p0 <= S4_d_load_reg_895;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            grp_fu_220_p0 <= S4_d_q0;
        else 
            grp_fu_220_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_220_p1 assign process. --
    grp_fu_220_p1_assign_proc : process(ap_sig_cseq_ST_st13_fsm_12, p_0_i3_fu_634_p3, ap_sig_cseq_ST_st14_fsm_13, p_0_i9_fu_734_p3, ap_sig_cseq_ST_st17_fsm_16, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
            grp_fu_220_p1 <= ap_const_lv32_3E800000;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            grp_fu_220_p1 <= p_0_i9_fu_734_p3;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            grp_fu_220_p1 <= p_0_i3_fu_634_p3;
        else 
            grp_fu_220_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_229_opcode <= ap_const_lv5_2;
    grp_fu_229_p0 <= reg_239;
    grp_fu_229_p1 <= ap_const_lv32_0;
    grp_fu_234_opcode <= ap_const_lv5_2;
    grp_fu_234_p0 <= reg_244;
    grp_fu_234_p1 <= ap_const_lv32_0;
    i_13_fu_255_p2 <= std_logic_vector(unsigned(i_reg_172) + unsigned(ap_const_lv5_1));
    j_10_fu_524_p2 <= std_logic_vector(unsigned(j_reg_184) + unsigned(ap_const_lv4_2));
    k_9_fu_518_p2 <= std_logic_vector(unsigned(ap_const_lv4_2) + unsigned(k_reg_196));
    notlhs5_fu_602_p2 <= "0" when (tmp_45_fu_588_p4 = ap_const_lv8_FF) else "1";
    notlhs7_fu_660_p2 <= "0" when (tmp_50_fu_646_p4 = ap_const_lv8_FF) else "1";
    notlhs9_fu_702_p2 <= "0" when (tmp_55_fu_688_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_560_p2 <= "0" when (tmp_40_fu_546_p4 = ap_const_lv8_FF) else "1";
    notrhs1_fu_708_p2 <= "1" when (tmp_96_fu_698_p1 = ap_const_lv23_0) else "0";
    notrhs6_fu_608_p2 <= "1" when (tmp_94_fu_598_p1 = ap_const_lv23_0) else "0";
    notrhs8_fu_666_p2 <= "1" when (tmp_95_fu_656_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_566_p2 <= "1" when (tmp_93_fu_556_p1 = ap_const_lv23_0) else "0";
    p_0_i3_fu_634_p3 <= 
        ap_const_lv32_3F800000 when (tmp_49_reg_890(0) = '1') else 
        ap_const_lv32_0;
    p_0_i6_fu_726_p3 <= 
        ap_const_lv32_3F800000 when (tmp_54_reg_911(0) = '1') else 
        ap_const_lv32_0;
    p_0_i9_fu_734_p3 <= 
        ap_const_lv32_3F800000 when (tmp_59_reg_916(0) = '1') else 
        ap_const_lv32_0;
    p_0_i_fu_626_p3 <= 
        ap_const_lv32_3F800000 when (tmp_44_reg_885(0) = '1') else 
        ap_const_lv32_0;
    p_shl16_fu_388_p1 <= std_logic_vector(resize(unsigned(tmp_89_fu_380_p3),32));
    p_shl17_fu_400_p1 <= std_logic_vector(resize(unsigned(tmp_90_fu_392_p3),32));
    p_shl18_fu_427_p1 <= std_logic_vector(resize(unsigned(tmp_91_fu_419_p3),32));
    p_shl19_fu_439_p1 <= std_logic_vector(resize(unsigned(tmp_92_fu_431_p3),32));
    p_shl41_cast_fu_278_p1 <= std_logic_vector(resize(unsigned(tmp_108_fu_270_p3),8));
    p_shl42_cast_fu_308_p1 <= std_logic_vector(resize(unsigned(tmp_110_fu_300_p3),9));
    p_shl_cast_fu_296_p1 <= std_logic_vector(resize(unsigned(tmp_109_fu_288_p3),9));
    p_shl_fu_361_p1 <= std_logic_vector(resize(unsigned(tmp_88_fu_353_p3),32));
    temp_3_to_int_fu_584_p1 <= reg_244;
    temp_4_to_int_fu_642_p1 <= reg_239;
    temp_5_to_int_fu_684_p1 <= reg_244;
    temp_to_int_fu_542_p1 <= reg_239;
    tmp_108_fu_270_p3 <= (i_reg_172 & ap_const_lv2_0);
    tmp_109_fu_288_p3 <= (i_reg_172 & ap_const_lv3_0);
    tmp_110_fu_300_p3 <= (i_reg_172 & ap_const_lv1_0);
    tmp_111_fu_538_p1 <= std_logic_vector(resize(unsigned(S4_d_addr15_reg_795),64));
    tmp_112_fu_483_p1 <= std_logic_vector(resize(unsigned(C3_y_addr11_fu_478_p2),64));
    tmp_113_fu_503_p1 <= std_logic_vector(resize(unsigned(C3_y_addr12_fu_498_p2),64));
    tmp_114_fu_530_p1 <= std_logic_vector(resize(unsigned(C3_y_addr10_reg_820),64));
    tmp_115_fu_534_p1 <= std_logic_vector(resize(unsigned(C3_y_addr4_reg_825),64));
    tmp_40_fu_546_p4 <= temp_to_int_fu_542_p1(30 downto 23);
    tmp_42_fu_572_p2 <= (notrhs_fu_566_p2 or notlhs_fu_560_p2);
    tmp_44_fu_578_p2 <= (tmp_42_fu_572_p2 and grp_fu_229_p2);
    tmp_45_fu_588_p4 <= temp_3_to_int_fu_584_p1(30 downto 23);
    tmp_47_fu_614_p2 <= (notrhs6_fu_608_p2 or notlhs5_fu_602_p2);
    tmp_49_fu_620_p2 <= (tmp_47_fu_614_p2 and grp_fu_234_p2);
    tmp_50_fu_646_p4 <= temp_4_to_int_fu_642_p1(30 downto 23);
    tmp_52_fu_672_p2 <= (notrhs8_fu_666_p2 or notlhs7_fu_660_p2);
    tmp_54_fu_678_p2 <= (tmp_52_fu_672_p2 and grp_fu_229_p2);
    tmp_55_fu_688_p4 <= temp_5_to_int_fu_684_p1(30 downto 23);
    tmp_57_fu_714_p2 <= (notrhs1_fu_708_p2 or notlhs9_fu_702_p2);
    tmp_59_fu_720_p2 <= (tmp_57_fu_714_p2 and grp_fu_234_p2);
    tmp_61_fu_324_p2 <= (j_reg_184 or ap_const_lv4_1);
    tmp_62_fu_449_p2 <= "1" when (unsigned(k_reg_196) < unsigned(ap_const_lv4_A)) else "0";
    tmp_63_fu_455_p4 <= k_reg_196(3 downto 1);
    tmp_66_fu_488_p2 <= (k_reg_196 or ap_const_lv4_1);
    tmp_76_trn_cast_fu_340_p1 <= std_logic_vector(resize(unsigned(tmp_87_fu_330_p4),8));
    tmp_77_trn_cast_fu_371_p1 <= std_logic_vector(resize(unsigned(j_reg_184),9));
    tmp_79_trn6_cast_fu_410_p1 <= std_logic_vector(resize(unsigned(tmp_61_fu_324_p2),9));
    tmp_82_trn_fu_465_p1 <= std_logic_vector(resize(unsigned(tmp_63_fu_455_p4),32));
    tmp_83_trn_fu_474_p1 <= std_logic_vector(resize(unsigned(k_reg_196),32));
    tmp_87_fu_330_p4 <= j_reg_184(3 downto 1);
    tmp_87_trn_fu_494_p1 <= std_logic_vector(resize(unsigned(tmp_66_fu_488_p2),32));
    tmp_88_fu_353_p3 <= (S4_d_addr13_fu_344_p2 & ap_const_lv2_0);
    tmp_89_fu_380_p3 <= (C3_y_addr6_fu_375_p2 & ap_const_lv3_0);
    tmp_90_fu_392_p3 <= (C3_y_addr6_fu_375_p2 & ap_const_lv1_0);
    tmp_91_fu_419_p3 <= (C3_y_addr8_fu_414_p2 & ap_const_lv3_0);
    tmp_92_fu_431_p3 <= (C3_y_addr8_fu_414_p2 & ap_const_lv1_0);
    tmp_93_fu_556_p1 <= temp_to_int_fu_542_p1(23 - 1 downto 0);
    tmp_94_fu_598_p1 <= temp_3_to_int_fu_584_p1(23 - 1 downto 0);
    tmp_95_fu_656_p1 <= temp_4_to_int_fu_642_p1(23 - 1 downto 0);
    tmp_96_fu_698_p1 <= temp_5_to_int_fu_684_p1(23 - 1 downto 0);
    tmp_fu_261_p1 <= std_logic_vector(resize(unsigned(i_reg_172),64));
    tmp_s_fu_318_p2 <= "1" when (unsigned(j_reg_184) < unsigned(ap_const_lv4_A)) else "0";
    tmp_trn_cast_fu_266_p1 <= std_logic_vector(resize(unsigned(i_reg_172),8));
end behav;
