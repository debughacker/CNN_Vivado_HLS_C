-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dateport_DC1_layer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    C1_bias_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    C1_bias_ce0 : OUT STD_LOGIC;
    C1_bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    S2_d_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    S2_d_ce0 : OUT STD_LOGIC;
    S2_d_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C1_v_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    C1_v_ce0 : OUT STD_LOGIC;
    C1_v_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C1_v_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    C1_v_ce1 : OUT STD_LOGIC;
    C1_v_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    C1_d_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    C1_d_ce0 : OUT STD_LOGIC;
    C1_d_we0 : OUT STD_LOGIC;
    C1_d_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C1_d_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    C1_d_ce1 : OUT STD_LOGIC;
    C1_d_we1 : OUT STD_LOGIC;
    C1_d_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of dateport_DC1_layer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_3E800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111110100000000000000000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_39 : BOOLEAN;
    signal grp_fu_211_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_243 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_83 : BOOLEAN;
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_90 : BOOLEAN;
    signal grp_fu_215_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_248 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_17_fu_259_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_17_reg_773 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_102 : BOOLEAN;
    signal exitcond_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal C1_bias_load_reg_783 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_116 : BOOLEAN;
    signal S2_d_addr10_cast_fu_300_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal S2_d_addr10_cast_reg_789 : STD_LOGIC_VECTOR (8 downto 0);
    signal C1_v_addr1_cast_fu_334_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal C1_v_addr1_cast_reg_794 : STD_LOGIC_VECTOR (9 downto 0);
    signal S2_d_addr4_fu_393_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal S2_d_addr4_reg_803 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_129 : BOOLEAN;
    signal tmp_s_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal C1_v_addr3_fu_432_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C1_v_addr3_reg_808 : STD_LOGIC_VECTOR (31 downto 0);
    signal C1_v_addr9_fu_471_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C1_v_addr9_reg_814 : STD_LOGIC_VECTOR (31 downto 0);
    signal S2_d_addr5_fu_497_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal S2_d_addr5_reg_823 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_146 : BOOLEAN;
    signal tmp_81_fu_477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_150_fu_511_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_150_reg_828 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_151_fu_531_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_151_reg_838 : STD_LOGIC_VECTOR (63 downto 0);
    signal C1_v_addr7_fu_536_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C1_v_addr7_reg_848 : STD_LOGIC_VECTOR (31 downto 0);
    signal C1_v_addr4_fu_541_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C1_v_addr4_reg_853 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_12_fu_546_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_12_reg_858 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_13_fu_552_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal C1_v_load_reg_868 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_175 : BOOLEAN;
    signal C1_v_load_1_reg_873 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_152_fu_558_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_152_reg_878 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_153_fu_562_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_153_reg_888 : STD_LOGIC_VECTOR (63 downto 0);
    signal C1_v_load_2_reg_898 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_192 : BOOLEAN;
    signal C1_v_load_3_reg_903 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_64_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_64_reg_913 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_69_fu_648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_69_reg_918 : STD_LOGIC_VECTOR (0 downto 0);
    signal S2_d_load_reg_923 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_207 : BOOLEAN;
    signal p_0_i_fu_654_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_0_i1_fu_662_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_74_fu_706_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_74_reg_939 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_79_fu_748_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_79_reg_944 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0_i2_fu_754_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_224 : BOOLEAN;
    signal p_0_i3_fu_762_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_219_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_82_reg_959 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st16_fsm_15 : STD_LOGIC;
    signal ap_sig_bdd_235 : BOOLEAN;
    signal grp_fu_224_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_85_reg_964 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_87_reg_969 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st17_fsm_16 : STD_LOGIC;
    signal ap_sig_bdd_245 : BOOLEAN;
    signal tmp_89_reg_974 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_176 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_188 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_reg_200 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st21_fsm_20 : STD_LOGIC;
    signal ap_sig_bdd_265 : BOOLEAN;
    signal tmp_fu_265_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_149_fu_566_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st20_fsm_19 : STD_LOGIC;
    signal ap_sig_bdd_275 : BOOLEAN;
    signal grp_fu_211_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_211_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_289 : BOOLEAN;
    signal grp_fu_215_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_215_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_219_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_219_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st18_fsm_17 : STD_LOGIC;
    signal ap_sig_bdd_302 : BOOLEAN;
    signal grp_fu_224_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_224_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_233_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_233_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_238_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_238_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_145_fu_270_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_146_fu_282_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl58_cast_fu_278_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl59_cast_fu_290_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal S2_d_addr2_fu_294_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_147_fu_304_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_148_fu_316_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_cast_fu_312_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl57_cast_fu_324_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal C1_v_addr1_fu_328_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_113_fu_350_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_114_trn_cast_fu_360_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal S2_d_addr3_fu_364_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_114_fu_369_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_115_fu_381_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_fu_377_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl32_fu_389_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_115_trn_cast_fu_399_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal C1_v_addr2_fu_403_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_116_fu_408_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_117_fu_420_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl33_fu_416_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl34_fu_428_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_80_fu_344_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_117_trn6_cast_fu_438_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal C1_v_addr8_fu_442_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_118_fu_447_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_119_fu_459_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl35_fu_455_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl36_fu_467_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_f7_cast_fu_483_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_119_trn_fu_493_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_120_trn_fu_502_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal C1_v_addr5_fu_506_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_84_fu_516_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_124_trn_fu_522_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal C1_v_addr6_fu_526_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_to_int_fu_570_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_60_fu_574_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_120_fu_584_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_62_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_6_to_int_fu_612_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_65_fu_616_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_121_fu_626_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs8_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs7_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_67_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_7_to_int_fu_670_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_70_fu_674_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_122_fu_684_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs2_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs9_fu_688_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_72_fu_700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_8_to_int_fu_712_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_75_fu_716_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_123_fu_726_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs3_fu_736_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_fu_730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_77_fu_742_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_211_ce : STD_LOGIC;
    signal grp_fu_215_ce : STD_LOGIC;
    signal grp_fu_219_ce : STD_LOGIC;
    signal grp_fu_224_ce : STD_LOGIC;
    signal grp_fu_233_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_238_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);

    component dateport_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dateport_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dateport_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    dateport_fadd_32ns_32ns_32_5_full_dsp_U70 : component dateport_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_211_p0,
        din1 => grp_fu_211_p1,
        ce => grp_fu_211_ce,
        dout => grp_fu_211_p2);

    dateport_fadd_32ns_32ns_32_5_full_dsp_U71 : component dateport_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_215_p0,
        din1 => grp_fu_215_p1,
        ce => grp_fu_215_ce,
        dout => grp_fu_215_p2);

    dateport_fmul_32ns_32ns_32_4_max_dsp_U72 : component dateport_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_219_p0,
        din1 => grp_fu_219_p1,
        ce => grp_fu_219_ce,
        dout => grp_fu_219_p2);

    dateport_fmul_32ns_32ns_32_4_max_dsp_U73 : component dateport_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_224_p0,
        din1 => grp_fu_224_p1,
        ce => grp_fu_224_ce,
        dout => grp_fu_224_p2);

    dateport_fcmp_32ns_32ns_1_1_U74 : component dateport_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_233_p0,
        din1 => grp_fu_233_p1,
        opcode => grp_fu_233_opcode,
        dout => grp_fu_233_p2);

    dateport_fcmp_32ns_32ns_1_1_U75 : component dateport_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_238_p0,
        din1 => grp_fu_238_p1,
        opcode => grp_fu_238_opcode,
        dout => grp_fu_238_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- i_reg_176 assign process. --
    i_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = tmp_s_fu_338_p2))) then 
                i_reg_176 <= i_17_reg_773;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_176 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- j_reg_188 assign process. --
    j_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                j_reg_188 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = tmp_81_fu_477_p2))) then 
                j_reg_188 <= j_13_fu_552_p2;
            end if; 
        end if;
    end process;

    -- k_reg_200 assign process. --
    k_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_s_fu_338_p2)))) then 
                k_reg_200 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
                k_reg_200 <= k_12_reg_858;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                C1_bias_load_reg_783 <= C1_bias_q0;
                    C1_v_addr1_cast_reg_794(9 downto 2) <= C1_v_addr1_cast_fu_334_p1(9 downto 2);
                    S2_d_addr10_cast_reg_789(8 downto 1) <= S2_d_addr10_cast_fu_300_p1(8 downto 1);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_s_fu_338_p2)))) then
                    C1_v_addr3_reg_808(31 downto 2) <= C1_v_addr3_fu_432_p2(31 downto 2);
                    C1_v_addr9_reg_814(31 downto 3) <= C1_v_addr9_fu_471_p2(31 downto 3);
                    S2_d_addr4_reg_803(31 downto 1) <= S2_d_addr4_fu_393_p2(31 downto 1);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = tmp_81_fu_477_p2)))) then
                    C1_v_addr4_reg_853(31 downto 1) <= C1_v_addr4_fu_541_p2(31 downto 1);
                C1_v_addr7_reg_848 <= C1_v_addr7_fu_536_p2;
                S2_d_addr5_reg_823 <= S2_d_addr5_fu_497_p2;
                k_12_reg_858 <= k_12_fu_546_p2;
                    tmp_150_reg_828(31 downto 0) <= tmp_150_fu_511_p1(31 downto 0);
                    tmp_151_reg_838(31 downto 1) <= tmp_151_fu_531_p1(31 downto 1);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                C1_v_load_1_reg_873 <= C1_v_q1;
                C1_v_load_reg_868 <= C1_v_q0;
                    tmp_152_reg_878(31 downto 0) <= tmp_152_fu_558_p1(31 downto 0);
                    tmp_153_reg_888(31 downto 1) <= tmp_153_fu_562_p1(31 downto 1);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                C1_v_load_2_reg_898 <= C1_v_q0;
                C1_v_load_3_reg_903 <= C1_v_q1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then
                S2_d_load_reg_923 <= S2_d_q0;
                tmp_74_reg_939 <= tmp_74_fu_706_p2;
                tmp_79_reg_944 <= tmp_79_fu_748_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_17_reg_773 <= i_17_fu_259_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11))) then
                reg_243 <= grp_fu_211_p2;
                reg_248 <= grp_fu_215_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then
                tmp_64_reg_913 <= tmp_64_fu_606_p2;
                tmp_69_reg_918 <= tmp_69_fu_648_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then
                tmp_82_reg_959 <= grp_fu_219_p2;
                tmp_85_reg_964 <= grp_fu_224_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then
                tmp_87_reg_969 <= grp_fu_219_p2;
                tmp_89_reg_974 <= grp_fu_224_p2;
            end if;
        end if;
    end process;
    S2_d_addr10_cast_reg_789(0) <= '0';
    C1_v_addr1_cast_reg_794(1 downto 0) <= "00";
    S2_d_addr4_reg_803(0) <= '0';
    C1_v_addr3_reg_808(1 downto 0) <= "00";
    C1_v_addr9_reg_814(2 downto 0) <= "100";
    tmp_150_reg_828(63 downto 32) <= "00000000000000000000000000000000";
    tmp_151_reg_838(0) <= '1';
    tmp_151_reg_838(63 downto 32) <= "00000000000000000000000000000000";
    C1_v_addr4_reg_853(0) <= '1';
    tmp_152_reg_878(63 downto 32) <= "00000000000000000000000000000000";
    tmp_153_reg_888(0) <= '1';
    tmp_153_reg_888(63 downto 32) <= "00000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_fu_253_p2, tmp_s_fu_338_p2, tmp_81_fu_477_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond_fu_253_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_lv1_0 = tmp_s_fu_338_p2))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st5_fsm_4 => 
                if ((ap_const_lv1_0 = tmp_81_fu_477_p2)) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    C1_bias_address0 <= tmp_fu_265_p1(3 - 1 downto 0);

    -- C1_bias_ce0 assign process. --
    C1_bias_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            C1_bias_ce0 <= ap_const_logic_1;
        else 
            C1_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- C1_d_address0 assign process. --
    C1_d_address0_assign_proc : process(tmp_150_reg_828, tmp_152_reg_878, ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_st20_fsm_19)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
            C1_d_address0 <= tmp_152_reg_878(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            C1_d_address0 <= tmp_150_reg_828(13 - 1 downto 0);
        else 
            C1_d_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    -- C1_d_address1 assign process. --
    C1_d_address1_assign_proc : process(tmp_151_reg_838, tmp_153_reg_888, ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_st20_fsm_19)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
            C1_d_address1 <= tmp_153_reg_888(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            C1_d_address1 <= tmp_151_reg_838(13 - 1 downto 0);
        else 
            C1_d_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    -- C1_d_ce0 assign process. --
    C1_d_ce0_assign_proc : process(ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_st20_fsm_19)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19))) then 
            C1_d_ce0 <= ap_const_logic_1;
        else 
            C1_d_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- C1_d_ce1 assign process. --
    C1_d_ce1_assign_proc : process(ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_st20_fsm_19)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19))) then 
            C1_d_ce1 <= ap_const_logic_1;
        else 
            C1_d_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    C1_d_d0 <= grp_fu_219_p2;
    C1_d_d1 <= grp_fu_224_p2;

    -- C1_d_we0 assign process. --
    C1_d_we0_assign_proc : process(ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_st20_fsm_19)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19))) then 
            C1_d_we0 <= ap_const_logic_1;
        else 
            C1_d_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- C1_d_we1 assign process. --
    C1_d_we1_assign_proc : process(ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_st20_fsm_19)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19))) then 
            C1_d_we1 <= ap_const_logic_1;
        else 
            C1_d_we1 <= ap_const_logic_0;
        end if; 
    end process;

        C1_v_addr1_cast_fu_334_p1 <= std_logic_vector(resize(signed(C1_v_addr1_fu_328_p2),10));

    C1_v_addr1_fu_328_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_312_p1) - unsigned(p_shl57_cast_fu_324_p1));
    C1_v_addr2_fu_403_p2 <= std_logic_vector(signed(C1_v_addr1_cast_reg_794) + signed(tmp_115_trn_cast_fu_399_p1));
    C1_v_addr3_fu_432_p2 <= std_logic_vector(signed(p_shl33_fu_416_p1) - signed(p_shl34_fu_428_p1));
    C1_v_addr4_fu_541_p2 <= std_logic_vector(signed(C1_v_addr9_reg_814) + signed(tmp_124_trn_fu_522_p1));
    C1_v_addr5_fu_506_p2 <= std_logic_vector(signed(C1_v_addr3_reg_808) + signed(tmp_120_trn_fu_502_p1));
    C1_v_addr6_fu_526_p2 <= std_logic_vector(signed(C1_v_addr3_reg_808) + signed(tmp_124_trn_fu_522_p1));
    C1_v_addr7_fu_536_p2 <= std_logic_vector(signed(C1_v_addr9_reg_814) + signed(tmp_120_trn_fu_502_p1));
    C1_v_addr8_fu_442_p2 <= std_logic_vector(signed(C1_v_addr1_cast_reg_794) + signed(tmp_117_trn6_cast_fu_438_p1));
    C1_v_addr9_fu_471_p2 <= std_logic_vector(signed(p_shl35_fu_455_p1) - signed(p_shl36_fu_467_p1));

    -- C1_v_address0 assign process. --
    C1_v_address0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, tmp_150_fu_511_p1, ap_sig_cseq_ST_st6_fsm_5, tmp_152_fu_558_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            C1_v_address0 <= tmp_152_fu_558_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            C1_v_address0 <= tmp_150_fu_511_p1(13 - 1 downto 0);
        else 
            C1_v_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    -- C1_v_address1 assign process. --
    C1_v_address1_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, tmp_151_fu_531_p1, ap_sig_cseq_ST_st6_fsm_5, tmp_153_fu_562_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            C1_v_address1 <= tmp_153_fu_562_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            C1_v_address1 <= tmp_151_fu_531_p1(13 - 1 downto 0);
        else 
            C1_v_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    -- C1_v_ce0 assign process. --
    C1_v_ce0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5))) then 
            C1_v_ce0 <= ap_const_logic_1;
        else 
            C1_v_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- C1_v_ce1 assign process. --
    C1_v_ce1_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5))) then 
            C1_v_ce1 <= ap_const_logic_1;
        else 
            C1_v_ce1 <= ap_const_logic_0;
        end if; 
    end process;

        S2_d_addr10_cast_fu_300_p1 <= std_logic_vector(resize(signed(S2_d_addr2_fu_294_p2),9));

    S2_d_addr2_fu_294_p2 <= std_logic_vector(unsigned(p_shl58_cast_fu_278_p1) - unsigned(p_shl59_cast_fu_290_p1));
    S2_d_addr3_fu_364_p2 <= std_logic_vector(signed(S2_d_addr10_cast_reg_789) + signed(tmp_114_trn_cast_fu_360_p1));
    S2_d_addr4_fu_393_p2 <= std_logic_vector(signed(p_shl_fu_377_p1) - signed(p_shl32_fu_389_p1));
    S2_d_addr5_fu_497_p2 <= std_logic_vector(signed(S2_d_addr4_reg_803) + signed(tmp_119_trn_fu_493_p1));
    S2_d_address0 <= tmp_149_fu_566_p1(11 - 1 downto 0);

    -- S2_d_ce0 assign process. --
    S2_d_ce0_assign_proc : process(ap_sig_cseq_ST_st12_fsm_11)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            S2_d_ce0 <= ap_const_logic_1;
        else 
            S2_d_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_253_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_fu_253_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_253_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_fu_253_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_102 assign process. --
    ap_sig_bdd_102_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_102 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_116 assign process. --
    ap_sig_bdd_116_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_116 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_129 assign process. --
    ap_sig_bdd_129_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_129 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_146 assign process. --
    ap_sig_bdd_146_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_146 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_175 assign process. --
    ap_sig_bdd_175_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_175 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_192 assign process. --
    ap_sig_bdd_192_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_192 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_207 assign process. --
    ap_sig_bdd_207_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_207 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_224 assign process. --
    ap_sig_bdd_224_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_224 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_235 assign process. --
    ap_sig_bdd_235_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_235 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    -- ap_sig_bdd_245 assign process. --
    ap_sig_bdd_245_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_245 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    -- ap_sig_bdd_265 assign process. --
    ap_sig_bdd_265_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_265 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    -- ap_sig_bdd_275 assign process. --
    ap_sig_bdd_275_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_275 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    -- ap_sig_bdd_289 assign process. --
    ap_sig_bdd_289_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_289 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_302 assign process. --
    ap_sig_bdd_302_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_302 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    -- ap_sig_bdd_39 assign process. --
    ap_sig_bdd_39_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_39 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_83 assign process. --
    ap_sig_bdd_83_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_83 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_90 assign process. --
    ap_sig_bdd_90_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_90 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_cseq_ST_st11_fsm_10 assign process. --
    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_bdd_83)
    begin
        if (ap_sig_bdd_83) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st12_fsm_11 assign process. --
    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_bdd_90)
    begin
        if (ap_sig_bdd_90) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st13_fsm_12 assign process. --
    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_bdd_207)
    begin
        if (ap_sig_bdd_207) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_13 assign process. --
    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_bdd_224)
    begin
        if (ap_sig_bdd_224) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st16_fsm_15 assign process. --
    ap_sig_cseq_ST_st16_fsm_15_assign_proc : process(ap_sig_bdd_235)
    begin
        if (ap_sig_bdd_235) then 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st17_fsm_16 assign process. --
    ap_sig_cseq_ST_st17_fsm_16_assign_proc : process(ap_sig_bdd_245)
    begin
        if (ap_sig_bdd_245) then 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st18_fsm_17 assign process. --
    ap_sig_cseq_ST_st18_fsm_17_assign_proc : process(ap_sig_bdd_302)
    begin
        if (ap_sig_bdd_302) then 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_39)
    begin
        if (ap_sig_bdd_39) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st20_fsm_19 assign process. --
    ap_sig_cseq_ST_st20_fsm_19_assign_proc : process(ap_sig_bdd_275)
    begin
        if (ap_sig_bdd_275) then 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st21_fsm_20 assign process. --
    ap_sig_cseq_ST_st21_fsm_20_assign_proc : process(ap_sig_bdd_265)
    begin
        if (ap_sig_bdd_265) then 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_102)
    begin
        if (ap_sig_bdd_102) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_116)
    begin
        if (ap_sig_bdd_116) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_129)
    begin
        if (ap_sig_bdd_129) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_146)
    begin
        if (ap_sig_bdd_146) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_175)
    begin
        if (ap_sig_bdd_175) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_192)
    begin
        if (ap_sig_bdd_192) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_289)
    begin
        if (ap_sig_bdd_289) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_253_p2 <= "1" when (i_reg_176 = ap_const_lv3_6) else "0";
    grp_fu_211_ce <= ap_const_logic_1;

    -- grp_fu_211_p0 assign process. --
    grp_fu_211_p0_assign_proc : process(C1_v_load_reg_868, C1_v_load_2_reg_898, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            grp_fu_211_p0 <= C1_v_load_2_reg_898;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            grp_fu_211_p0 <= C1_v_load_reg_868;
        else 
            grp_fu_211_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_211_p1 <= C1_bias_load_reg_783;
    grp_fu_215_ce <= ap_const_logic_1;

    -- grp_fu_215_p0 assign process. --
    grp_fu_215_p0_assign_proc : process(C1_v_load_1_reg_873, ap_sig_cseq_ST_st7_fsm_6, C1_v_load_3_reg_903, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            grp_fu_215_p0 <= C1_v_load_3_reg_903;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            grp_fu_215_p0 <= C1_v_load_1_reg_873;
        else 
            grp_fu_215_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_215_p1 <= C1_bias_load_reg_783;
    grp_fu_219_ce <= ap_const_logic_1;

    -- grp_fu_219_p0 assign process. --
    grp_fu_219_p0_assign_proc : process(S2_d_q0, S2_d_load_reg_923, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st14_fsm_13, tmp_82_reg_959, tmp_87_reg_969, ap_sig_cseq_ST_st17_fsm_16, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
            grp_fu_219_p0 <= tmp_87_reg_969;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then 
            grp_fu_219_p0 <= tmp_82_reg_959;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            grp_fu_219_p0 <= S2_d_load_reg_923;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            grp_fu_219_p0 <= S2_d_q0;
        else 
            grp_fu_219_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_219_p1 assign process. --
    grp_fu_219_p1_assign_proc : process(ap_sig_cseq_ST_st13_fsm_12, p_0_i_fu_654_p3, p_0_i2_fu_754_p3, ap_sig_cseq_ST_st14_fsm_13, ap_sig_cseq_ST_st17_fsm_16, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
            grp_fu_219_p1 <= ap_const_lv32_3E800000;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            grp_fu_219_p1 <= p_0_i2_fu_754_p3;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            grp_fu_219_p1 <= p_0_i_fu_654_p3;
        else 
            grp_fu_219_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_224_ce <= ap_const_logic_1;

    -- grp_fu_224_p0 assign process. --
    grp_fu_224_p0_assign_proc : process(S2_d_q0, S2_d_load_reg_923, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st14_fsm_13, tmp_85_reg_964, ap_sig_cseq_ST_st17_fsm_16, tmp_89_reg_974, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
            grp_fu_224_p0 <= tmp_89_reg_974;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then 
            grp_fu_224_p0 <= tmp_85_reg_964;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            grp_fu_224_p0 <= S2_d_load_reg_923;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            grp_fu_224_p0 <= S2_d_q0;
        else 
            grp_fu_224_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_224_p1 assign process. --
    grp_fu_224_p1_assign_proc : process(ap_sig_cseq_ST_st13_fsm_12, p_0_i1_fu_662_p3, ap_sig_cseq_ST_st14_fsm_13, p_0_i3_fu_762_p3, ap_sig_cseq_ST_st17_fsm_16, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
            grp_fu_224_p1 <= ap_const_lv32_3E800000;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            grp_fu_224_p1 <= p_0_i3_fu_762_p3;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            grp_fu_224_p1 <= p_0_i1_fu_662_p3;
        else 
            grp_fu_224_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_233_opcode <= ap_const_lv5_2;
    grp_fu_233_p0 <= reg_243;
    grp_fu_233_p1 <= ap_const_lv32_0;
    grp_fu_238_opcode <= ap_const_lv5_2;
    grp_fu_238_p0 <= reg_248;
    grp_fu_238_p1 <= ap_const_lv32_0;
    i_17_fu_259_p2 <= std_logic_vector(unsigned(i_reg_176) + unsigned(ap_const_lv3_1));
    j_13_fu_552_p2 <= std_logic_vector(unsigned(j_reg_188) + unsigned(ap_const_lv5_2));
    k_12_fu_546_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(k_reg_200));
    notlhs1_fu_730_p2 <= "0" when (tmp_75_fu_716_p4 = ap_const_lv8_FF) else "1";
    notlhs7_fu_630_p2 <= "0" when (tmp_65_fu_616_p4 = ap_const_lv8_FF) else "1";
    notlhs9_fu_688_p2 <= "0" when (tmp_70_fu_674_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_588_p2 <= "0" when (tmp_60_fu_574_p4 = ap_const_lv8_FF) else "1";
    notrhs2_fu_694_p2 <= "1" when (tmp_122_fu_684_p1 = ap_const_lv23_0) else "0";
    notrhs3_fu_736_p2 <= "1" when (tmp_123_fu_726_p1 = ap_const_lv23_0) else "0";
    notrhs8_fu_636_p2 <= "1" when (tmp_121_fu_626_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_594_p2 <= "1" when (tmp_120_fu_584_p1 = ap_const_lv23_0) else "0";
    p_0_i1_fu_662_p3 <= 
        ap_const_lv32_3F800000 when (tmp_69_reg_918(0) = '1') else 
        ap_const_lv32_0;
    p_0_i2_fu_754_p3 <= 
        ap_const_lv32_3F800000 when (tmp_74_reg_939(0) = '1') else 
        ap_const_lv32_0;
    p_0_i3_fu_762_p3 <= 
        ap_const_lv32_3F800000 when (tmp_79_reg_944(0) = '1') else 
        ap_const_lv32_0;
    p_0_i_fu_654_p3 <= 
        ap_const_lv32_3F800000 when (tmp_64_reg_913(0) = '1') else 
        ap_const_lv32_0;
    p_lshr_f7_cast_fu_483_p4 <= k_reg_200(4 downto 1);
        p_shl32_fu_389_p1 <= std_logic_vector(resize(signed(tmp_115_fu_381_p3),32));

        p_shl33_fu_416_p1 <= std_logic_vector(resize(signed(tmp_116_fu_408_p3),32));

        p_shl34_fu_428_p1 <= std_logic_vector(resize(signed(tmp_117_fu_420_p3),32));

        p_shl35_fu_455_p1 <= std_logic_vector(resize(signed(tmp_118_fu_447_p3),32));

        p_shl36_fu_467_p1 <= std_logic_vector(resize(signed(tmp_119_fu_459_p3),32));

    p_shl57_cast_fu_324_p1 <= std_logic_vector(resize(unsigned(tmp_148_fu_316_p3),9));
    p_shl58_cast_fu_278_p1 <= std_logic_vector(resize(unsigned(tmp_145_fu_270_p3),8));
    p_shl59_cast_fu_290_p1 <= std_logic_vector(resize(unsigned(tmp_146_fu_282_p3),8));
    p_shl_cast_fu_312_p1 <= std_logic_vector(resize(unsigned(tmp_147_fu_304_p3),9));
        p_shl_fu_377_p1 <= std_logic_vector(resize(signed(tmp_114_fu_369_p3),32));

    temp_6_to_int_fu_612_p1 <= reg_248;
    temp_7_to_int_fu_670_p1 <= reg_243;
    temp_8_to_int_fu_712_p1 <= reg_248;
    temp_to_int_fu_570_p1 <= reg_243;
    tmp_113_fu_350_p4 <= j_reg_188(4 downto 1);
    tmp_114_fu_369_p3 <= (S2_d_addr3_fu_364_p2 & ap_const_lv4_0);
    tmp_114_trn_cast_fu_360_p1 <= std_logic_vector(resize(unsigned(tmp_113_fu_350_p4),9));
    tmp_115_fu_381_p3 <= (S2_d_addr3_fu_364_p2 & ap_const_lv1_0);
    tmp_115_trn_cast_fu_399_p1 <= std_logic_vector(resize(unsigned(j_reg_188),10));
    tmp_116_fu_408_p3 <= (C1_v_addr2_fu_403_p2 & ap_const_lv5_0);
    tmp_117_fu_420_p3 <= (C1_v_addr2_fu_403_p2 & ap_const_lv2_0);
    tmp_117_trn6_cast_fu_438_p1 <= std_logic_vector(resize(unsigned(tmp_80_fu_344_p2),10));
    tmp_118_fu_447_p3 <= (C1_v_addr8_fu_442_p2 & ap_const_lv5_0);
    tmp_119_fu_459_p3 <= (C1_v_addr8_fu_442_p2 & ap_const_lv2_0);
    tmp_119_trn_fu_493_p1 <= std_logic_vector(resize(unsigned(p_lshr_f7_cast_fu_483_p4),32));
    tmp_120_fu_584_p1 <= temp_to_int_fu_570_p1(23 - 1 downto 0);
    tmp_120_trn_fu_502_p1 <= std_logic_vector(resize(unsigned(k_reg_200),32));
    tmp_121_fu_626_p1 <= temp_6_to_int_fu_612_p1(23 - 1 downto 0);
    tmp_122_fu_684_p1 <= temp_7_to_int_fu_670_p1(23 - 1 downto 0);
    tmp_123_fu_726_p1 <= temp_8_to_int_fu_712_p1(23 - 1 downto 0);
    tmp_124_trn_fu_522_p1 <= std_logic_vector(resize(unsigned(tmp_84_fu_516_p2),32));
    tmp_145_fu_270_p3 <= (i_reg_176 & ap_const_lv4_0);
    tmp_146_fu_282_p3 <= (i_reg_176 & ap_const_lv1_0);
    tmp_147_fu_304_p3 <= (i_reg_176 & ap_const_lv5_0);
    tmp_148_fu_316_p3 <= (i_reg_176 & ap_const_lv2_0);
    tmp_149_fu_566_p1 <= std_logic_vector(resize(unsigned(S2_d_addr5_reg_823),64));
    tmp_150_fu_511_p1 <= std_logic_vector(resize(unsigned(C1_v_addr5_fu_506_p2),64));
    tmp_151_fu_531_p1 <= std_logic_vector(resize(unsigned(C1_v_addr6_fu_526_p2),64));
    tmp_152_fu_558_p1 <= std_logic_vector(resize(unsigned(C1_v_addr7_reg_848),64));
    tmp_153_fu_562_p1 <= std_logic_vector(resize(unsigned(C1_v_addr4_reg_853),64));
    tmp_60_fu_574_p4 <= temp_to_int_fu_570_p1(30 downto 23);
    tmp_62_fu_600_p2 <= (notrhs_fu_594_p2 or notlhs_fu_588_p2);
    tmp_64_fu_606_p2 <= (tmp_62_fu_600_p2 and grp_fu_233_p2);
    tmp_65_fu_616_p4 <= temp_6_to_int_fu_612_p1(30 downto 23);
    tmp_67_fu_642_p2 <= (notrhs8_fu_636_p2 or notlhs7_fu_630_p2);
    tmp_69_fu_648_p2 <= (tmp_67_fu_642_p2 and grp_fu_238_p2);
    tmp_70_fu_674_p4 <= temp_7_to_int_fu_670_p1(30 downto 23);
    tmp_72_fu_700_p2 <= (notrhs2_fu_694_p2 or notlhs9_fu_688_p2);
    tmp_74_fu_706_p2 <= (tmp_72_fu_700_p2 and grp_fu_233_p2);
    tmp_75_fu_716_p4 <= temp_8_to_int_fu_712_p1(30 downto 23);
    tmp_77_fu_742_p2 <= (notrhs3_fu_736_p2 or notlhs1_fu_730_p2);
    tmp_79_fu_748_p2 <= (tmp_77_fu_742_p2 and grp_fu_238_p2);
    tmp_80_fu_344_p2 <= (j_reg_188 or ap_const_lv5_1);
    tmp_81_fu_477_p2 <= "1" when (unsigned(k_reg_200) < unsigned(ap_const_lv5_1C)) else "0";
    tmp_84_fu_516_p2 <= (k_reg_200 or ap_const_lv5_1);
    tmp_fu_265_p1 <= std_logic_vector(resize(unsigned(i_reg_176),64));
    tmp_s_fu_338_p2 <= "1" when (unsigned(j_reg_188) < unsigned(ap_const_lv5_1C)) else "0";
end behav;
