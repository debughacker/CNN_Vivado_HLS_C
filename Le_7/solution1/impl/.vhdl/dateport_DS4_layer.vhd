-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dateport_DS4_layer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    S4_d_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    S4_d_ce0 : OUT STD_LOGIC;
    S4_d_we0 : OUT STD_LOGIC;
    S4_d_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    S4_d_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    S4_d_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    S4_d_ce1 : OUT STD_LOGIC;
    S4_d_we1 : OUT STD_LOGIC;
    S4_d_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    S4_d_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    C5_d_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    C5_d_ce0 : OUT STD_LOGIC;
    C5_d_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C5_mapData_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    C5_mapData_ce0 : OUT STD_LOGIC;
    C5_mapData_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C5_mapData_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    C5_mapData_ce1 : OUT STD_LOGIC;
    C5_mapData_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of dateport_DS4_layer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_pp0_stg0_fsm_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_pp0_stg1_fsm_5 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_pp0_stg2_fsm_6 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_pp0_stg3_fsm_7 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_pp0_stg4_fsm_8 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_st21_fsm_9 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv12_960 : STD_LOGIC_VECTOR (11 downto 0) := "100101100000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv8_96 : STD_LOGIC_VECTOR (7 downto 0) := "10010110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_28 : BOOLEAN;
    signal indvar_flatten5_reg_228 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_1_reg_239 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_reg_250 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_reg_261 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_reg_272 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_283_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_293 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_78 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal exitcond_flatten5_reg_750 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_flatten5_reg_750_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg1_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_98 : BOOLEAN;
    signal ap_reg_ppstg_exitcond_flatten5_reg_750_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg4_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_109 : BOOLEAN;
    signal exitcond6_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_120 : BOOLEAN;
    signal i_12_fu_305_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_12_reg_719 : STD_LOGIC_VECTOR (4 downto 0);
    signal S4_d_addr1_fu_327_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal S4_d_addr1_reg_724 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_1_fu_339_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_1_reg_732 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_135 : BOOLEAN;
    signal S4_d_addr10_fu_370_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal S4_d_addr10_reg_737 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond5_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal q_1_fu_382_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_149 : BOOLEAN;
    signal exitcond_flatten5_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next5_fu_408_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal indvar_flatten_next5_reg_754 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_1_mid2_fu_452_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_mid2_reg_759 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_mid2_fu_472_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_mid2_reg_766 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_mid2_fu_480_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_mid2_reg_773 : STD_LOGIC_VECTOR (4 downto 0);
    signal C5_mapData_addr8_fu_504_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal C5_mapData_addr8_reg_779 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_flatten_next_fu_516_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten_next_reg_785 : STD_LOGIC_VECTOR (7 downto 0);
    signal C5_mapData_addr2_fu_569_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C5_mapData_addr2_reg_795 : STD_LOGIC_VECTOR (31 downto 0);
    signal S4_d_addr4_fu_619_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal S4_d_addr4_reg_808 : STD_LOGIC_VECTOR (31 downto 0);
    signal S4_d_addr_1_reg_816 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_reg_ppstg_S4_d_addr_1_reg_816_pp0_it1 : STD_LOGIC_VECTOR (8 downto 0);
    signal k_8_fu_630_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_8_reg_822 : STD_LOGIC_VECTOR (2 downto 0);
    signal C5_d_load_reg_827 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp0_stg2_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_193 : BOOLEAN;
    signal S4_d_load_reg_837 : STD_LOGIC_VECTOR (31 downto 0);
    signal S4_d_addr_2_reg_847 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_reg_ppstg_S4_d_addr_2_reg_847_pp0_it1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_reg_ppstg_S4_d_addr_2_reg_847_pp0_it2 : STD_LOGIC_VECTOR (8 downto 0);
    signal S4_d_addr_3_reg_857 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_reg_ppstg_S4_d_addr_3_reg_857_pp0_it1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_reg_ppstg_S4_d_addr_3_reg_857_pp0_it2 : STD_LOGIC_VECTOR (8 downto 0);
    signal S4_d_addr_4_reg_862 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_reg_ppstg_S4_d_addr_4_reg_862_pp0_it1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_reg_ppstg_S4_d_addr_4_reg_862_pp0_it2 : STD_LOGIC_VECTOR (8 downto 0);
    signal S4_d_addr_5_reg_868 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_reg_ppstg_S4_d_addr_5_reg_868_pp0_it1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_reg_ppstg_S4_d_addr_5_reg_868_pp0_it2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_pp0_stg3_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_232 : BOOLEAN;
    signal S4_d_load_1_reg_879 : STD_LOGIC_VECTOR (31 downto 0);
    signal C5_mapData_load_2_reg_884 : STD_LOGIC_VECTOR (31 downto 0);
    signal S4_d_load_2_reg_889 : STD_LOGIC_VECTOR (31 downto 0);
    signal C5_mapData_load_3_reg_904 : STD_LOGIC_VECTOR (31 downto 0);
    signal S4_d_load_3_reg_909 : STD_LOGIC_VECTOR (31 downto 0);
    signal C5_mapData_load_4_reg_914 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_287_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_48_reg_919 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_119_1_reg_924 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_119_2_reg_929 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_119_3_reg_934 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_119_4_reg_939 : STD_LOGIC_VECTOR (31 downto 0);
    signal S4_d_load_4_reg_944 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_120_2_reg_949 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_120_3_reg_954 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_195 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_reg_206 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond4_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal q_reg_217 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten5_phi_fu_232_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_1_phi_fu_243_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_phi_fu_254_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_phi_fu_265_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_phi_fu_276_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_107_fu_397_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_524_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_96_fu_575_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_98_fu_625_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_99_fu_640_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_100_fu_650_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_101_fu_660_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_102_fu_670_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_104_fu_680_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_106_fu_690_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_103_fu_700_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_105_fu_710_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_283_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_283_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_287_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_287_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_315_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_trn_cast_fu_311_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_cast_fu_323_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_69_trn_cast_fu_345_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal S4_d_addr9_fu_349_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_86_fu_358_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal S4_d_addr9_cast_fu_354_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl15_fu_366_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_71_trn_fu_388_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal S4_d_addr11_fu_392_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_flatten_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_s_fu_446_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_mid_fu_420_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond1_mid_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_94_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_9_fu_460_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_95_fu_492_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_trn_cast_34_fu_488_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal C5_mapData_addr7_cast_fu_500_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_flatten_op_fu_510_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_83_fu_540_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl_fu_547_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal C5_mapData_addr8_cast_fu_531_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_72_trn_fu_534_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal C5_mapData_addr9_fu_551_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C5_mapData_addr1_fu_557_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_84_fu_563_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_97_fu_580_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl38_cast_fu_587_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_trn_cast1_fu_528_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_72_trn_cast_fu_537_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal S4_d_addr2_fu_591_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal S4_d_addr3_fu_597_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_85_fu_607_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl14_fu_615_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal S4_d_addr3_cast_fu_603_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal C5_mapData_addr3_fu_635_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal S4_d_addr5_fu_645_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C5_mapData_addr4_fu_655_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal S4_d_addr6_fu_665_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal S4_d_addr7_fu_675_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal S4_d_addr8_fu_685_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C5_mapData_addr5_fu_695_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal C5_mapData_addr6_fu_705_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_283_ce : STD_LOGIC;
    signal grp_fu_287_ce : STD_LOGIC;
    signal ap_sig_cseq_ST_st21_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_625 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);

    component dateport_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dateport_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    dateport_fadd_32ns_32ns_32_5_full_dsp_U49 : component dateport_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_283_p0,
        din1 => grp_fu_283_p1,
        ce => grp_fu_283_ce,
        dout => grp_fu_283_p2);

    dateport_fmul_32ns_32ns_32_4_max_dsp_U50 : component dateport_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_287_p0,
        din1 => grp_fu_287_p1,
        ce => grp_fu_287_ce,
        dout => grp_fu_287_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and not((ap_const_lv1_0 = exitcond_flatten5_fu_402_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond6_fu_299_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_8) and (exitcond_flatten5_reg_750 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond6_fu_299_p2))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_8) and not((exitcond_flatten5_reg_750 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_8)) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_8)) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond6_fu_299_p2)))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_1_reg_239 assign process. --
    i_1_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond6_fu_299_p2)))) then 
                i_1_reg_239 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten5_reg_750 = ap_const_lv1_0))) then 
                i_1_reg_239 <= i_1_mid2_reg_759;
            end if; 
        end if;
    end process;

    -- i_reg_195 assign process. --
    i_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond5_fu_333_p2)))) then 
                i_reg_195 <= i_12_reg_719;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_195 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- indvar_flatten5_reg_228 assign process. --
    indvar_flatten5_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond6_fu_299_p2)))) then 
                indvar_flatten5_reg_228 <= ap_const_lv12_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten5_reg_750 = ap_const_lv1_0))) then 
                indvar_flatten5_reg_228 <= indvar_flatten_next5_reg_754;
            end if; 
        end if;
    end process;

    -- indvar_flatten_reg_250 assign process. --
    indvar_flatten_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond6_fu_299_p2)))) then 
                indvar_flatten_reg_250 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten5_reg_750 = ap_const_lv1_0))) then 
                indvar_flatten_reg_250 <= indvar_flatten_next_reg_785;
            end if; 
        end if;
    end process;

    -- j_reg_261 assign process. --
    j_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond6_fu_299_p2)))) then 
                j_reg_261 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten5_reg_750 = ap_const_lv1_0))) then 
                j_reg_261 <= j_mid2_reg_773;
            end if; 
        end if;
    end process;

    -- k_reg_272 assign process. --
    k_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond6_fu_299_p2)))) then 
                k_reg_272 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten5_reg_750 = ap_const_lv1_0))) then 
                k_reg_272 <= k_8_reg_822;
            end if; 
        end if;
    end process;

    -- p_reg_206 assign process. --
    p_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond4_fu_376_p2)))) then 
                p_reg_206 <= p_1_reg_732;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond6_fu_299_p2))) then 
                p_reg_206 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- q_reg_217 assign process. --
    q_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond5_fu_333_p2))) then 
                q_reg_217 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond4_fu_376_p2))) then 
                q_reg_217 <= q_1_fu_382_p2;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten5_reg_750 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_6))) then
                C5_d_load_reg_827 <= C5_d_q0;
                S4_d_addr_2_reg_847 <= tmp_100_fu_650_p1(9 - 1 downto 0);
                S4_d_addr_3_reg_857 <= tmp_102_fu_670_p1(9 - 1 downto 0);
                S4_d_addr_4_reg_862 <= tmp_104_fu_680_p1(9 - 1 downto 0);
                S4_d_addr_5_reg_868 <= tmp_106_fu_690_p1(9 - 1 downto 0);
                S4_d_load_reg_837 <= S4_d_q1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5) and (exitcond_flatten5_reg_750 = ap_const_lv1_0))) then
                C5_mapData_addr2_reg_795 <= C5_mapData_addr2_fu_569_p2;
                S4_d_addr4_reg_808 <= S4_d_addr4_fu_619_p2;
                S4_d_addr_1_reg_816 <= tmp_98_fu_625_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_lv1_0 = exitcond_flatten5_fu_402_p2))) then
                C5_mapData_addr8_reg_779 <= C5_mapData_addr8_fu_504_p2;
                k_mid2_reg_766 <= k_mid2_fu_472_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten5_reg_750 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_7))) then
                C5_mapData_load_2_reg_884 <= C5_mapData_q1;
                S4_d_load_1_reg_879 <= S4_d_q1;
                S4_d_load_2_reg_889 <= S4_d_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_8) and (exitcond_flatten5_reg_750 = ap_const_lv1_0))) then
                C5_mapData_load_3_reg_904 <= C5_mapData_q1;
                C5_mapData_load_4_reg_914 <= C5_mapData_q0;
                S4_d_load_3_reg_909 <= S4_d_q1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond5_fu_333_p2))) then
                S4_d_addr10_reg_737 <= S4_d_addr10_fu_370_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond6_fu_299_p2))) then
                S4_d_addr1_reg_724 <= S4_d_addr1_fu_327_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_ppstg_exitcond_flatten5_reg_750_pp0_it1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_8))) then
                S4_d_load_4_reg_944 <= S4_d_q0;
                tmp_119_4_reg_939 <= grp_fu_287_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5)) then
                ap_reg_ppstg_S4_d_addr_1_reg_816_pp0_it1 <= S4_d_addr_1_reg_816;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_6)) then
                ap_reg_ppstg_S4_d_addr_2_reg_847_pp0_it1 <= S4_d_addr_2_reg_847;
                ap_reg_ppstg_S4_d_addr_2_reg_847_pp0_it2 <= ap_reg_ppstg_S4_d_addr_2_reg_847_pp0_it1;
                ap_reg_ppstg_S4_d_addr_3_reg_857_pp0_it1 <= S4_d_addr_3_reg_857;
                ap_reg_ppstg_S4_d_addr_3_reg_857_pp0_it2 <= ap_reg_ppstg_S4_d_addr_3_reg_857_pp0_it1;
                ap_reg_ppstg_S4_d_addr_4_reg_862_pp0_it1 <= S4_d_addr_4_reg_862;
                ap_reg_ppstg_S4_d_addr_4_reg_862_pp0_it2 <= ap_reg_ppstg_S4_d_addr_4_reg_862_pp0_it1;
                ap_reg_ppstg_S4_d_addr_5_reg_868_pp0_it1 <= S4_d_addr_5_reg_868;
                ap_reg_ppstg_S4_d_addr_5_reg_868_pp0_it2 <= ap_reg_ppstg_S4_d_addr_5_reg_868_pp0_it1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4)) then
                ap_reg_ppstg_exitcond_flatten5_reg_750_pp0_it1 <= exitcond_flatten5_reg_750;
                ap_reg_ppstg_exitcond_flatten5_reg_750_pp0_it2 <= ap_reg_ppstg_exitcond_flatten5_reg_750_pp0_it1;
                exitcond_flatten5_reg_750 <= exitcond_flatten5_fu_402_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_12_reg_719 <= i_12_fu_305_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_lv1_0 = exitcond_flatten5_fu_402_p2))) then
                i_1_mid2_reg_759 <= i_1_mid2_fu_452_p3;
                indvar_flatten_next_reg_785 <= indvar_flatten_next_fu_516_p3;
                j_mid2_reg_773 <= j_mid2_fu_480_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then
                indvar_flatten_next5_reg_754 <= indvar_flatten_next5_fu_408_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5) and (exitcond_flatten5_reg_750 = ap_const_lv1_0))) then
                k_8_reg_822 <= k_8_fu_630_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                p_1_reg_732 <= p_1_fu_339_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_reg_ppstg_exitcond_flatten5_reg_750_pp0_it1 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten5_reg_750_pp0_it2)) or ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten5_reg_750_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_8)))) then
                reg_293 <= grp_fu_283_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_ppstg_exitcond_flatten5_reg_750_pp0_it1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5))) then
                tmp_119_1_reg_924 <= grp_fu_287_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_ppstg_exitcond_flatten5_reg_750_pp0_it1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_6))) then
                tmp_119_2_reg_929 <= grp_fu_287_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_ppstg_exitcond_flatten5_reg_750_pp0_it1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_7))) then
                tmp_119_3_reg_934 <= grp_fu_287_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten5_reg_750_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_6))) then
                tmp_120_2_reg_949 <= grp_fu_283_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten5_reg_750_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_7))) then
                tmp_120_3_reg_954 <= grp_fu_283_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (exitcond_flatten5_reg_750 = ap_const_lv1_0))) then
                tmp_48_reg_919 <= grp_fu_287_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_sig_cseq_ST_pp0_stg0_fsm_4, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp0_it3, exitcond6_fu_299_p2, exitcond5_fu_333_p2, exitcond_flatten5_fu_402_p2, exitcond4_fu_376_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((ap_const_lv1_0 = exitcond6_fu_299_p2)) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_4;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((ap_const_lv1_0 = exitcond5_fu_333_p2)) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st4_fsm_3 => 
                if ((ap_const_lv1_0 = exitcond4_fu_376_p2)) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_pp0_stg0_fsm_4 => 
                if ((not(((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond_flatten5_fu_402_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_5;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond_flatten5_fu_402_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then
                    ap_NS_fsm <= ap_ST_st21_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_st21_fsm_9;
                end if;
            when ap_ST_pp0_stg1_fsm_5 => 
                ap_NS_fsm <= ap_ST_pp0_stg2_fsm_6;
            when ap_ST_pp0_stg2_fsm_6 => 
                ap_NS_fsm <= ap_ST_pp0_stg3_fsm_7;
            when ap_ST_pp0_stg3_fsm_7 => 
                ap_NS_fsm <= ap_ST_pp0_stg4_fsm_8;
            when ap_ST_pp0_stg4_fsm_8 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_4;
            when ap_ST_st21_fsm_9 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    C5_d_address0 <= tmp_s_fu_524_p1(5 - 1 downto 0);

    -- C5_d_ce0 assign process. --
    C5_d_ce0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5))) then 
            C5_d_ce0 <= ap_const_logic_1;
        else 
            C5_d_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C5_mapData_addr1_fu_557_p2 <= std_logic_vector(unsigned(tmp_72_trn_fu_534_p1) + unsigned(C5_mapData_addr9_fu_551_p2));
    C5_mapData_addr2_fu_569_p2 <= std_logic_vector(unsigned(tmp_84_fu_563_p2) + unsigned(C5_mapData_addr1_fu_557_p2));
    C5_mapData_addr3_fu_635_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(C5_mapData_addr2_reg_795));
    C5_mapData_addr4_fu_655_p2 <= std_logic_vector(unsigned(ap_const_lv32_2) + unsigned(C5_mapData_addr2_reg_795));
    C5_mapData_addr5_fu_695_p2 <= std_logic_vector(unsigned(ap_const_lv32_3) + unsigned(C5_mapData_addr2_reg_795));
    C5_mapData_addr6_fu_705_p2 <= std_logic_vector(unsigned(ap_const_lv32_4) + unsigned(C5_mapData_addr2_reg_795));
    C5_mapData_addr7_cast_fu_500_p1 <= std_logic_vector(resize(unsigned(tmp_95_fu_492_p3),10));
    C5_mapData_addr8_cast_fu_531_p1 <= std_logic_vector(resize(unsigned(C5_mapData_addr8_reg_779),32));
    C5_mapData_addr8_fu_504_p2 <= std_logic_vector(unsigned(tmp_trn_cast_34_fu_488_p1) + unsigned(C5_mapData_addr7_cast_fu_500_p1));
    C5_mapData_addr9_fu_551_p2 <= std_logic_vector(unsigned(p_shl_fu_547_p1) + unsigned(C5_mapData_addr8_cast_fu_531_p1));

    -- C5_mapData_address0 assign process. --
    C5_mapData_address0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_5, ap_sig_cseq_ST_pp0_stg2_fsm_6, ap_sig_cseq_ST_pp0_stg3_fsm_7, tmp_96_fu_575_p1, tmp_99_fu_640_p1, tmp_105_fu_710_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_7)) then 
                C5_mapData_address0 <= tmp_105_fu_710_p1(14 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_6)) then 
                C5_mapData_address0 <= tmp_99_fu_640_p1(14 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5)) then 
                C5_mapData_address0 <= tmp_96_fu_575_p1(14 - 1 downto 0);
            else 
                C5_mapData_address0 <= "XXXXXXXXXXXXXX";
            end if;
        else 
            C5_mapData_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    -- C5_mapData_address1 assign process. --
    C5_mapData_address1_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_6, ap_sig_cseq_ST_pp0_stg3_fsm_7, tmp_101_fu_660_p1, tmp_103_fu_700_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_7)) then 
                C5_mapData_address1 <= tmp_103_fu_700_p1(14 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_6)) then 
                C5_mapData_address1 <= tmp_101_fu_660_p1(14 - 1 downto 0);
            else 
                C5_mapData_address1 <= "XXXXXXXXXXXXXX";
            end if;
        else 
            C5_mapData_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    -- C5_mapData_ce0 assign process. --
    C5_mapData_ce0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_5, ap_sig_cseq_ST_pp0_stg2_fsm_6, ap_sig_cseq_ST_pp0_stg3_fsm_7)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_6)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_7)))) then 
            C5_mapData_ce0 <= ap_const_logic_1;
        else 
            C5_mapData_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- C5_mapData_ce1 assign process. --
    C5_mapData_ce1_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_6, ap_sig_cseq_ST_pp0_stg3_fsm_7)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_6)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_7)))) then 
            C5_mapData_ce1 <= ap_const_logic_1;
        else 
            C5_mapData_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    S4_d_addr10_fu_370_p2 <= std_logic_vector(unsigned(S4_d_addr9_cast_fu_354_p1) + unsigned(p_shl15_fu_366_p1));
    S4_d_addr11_fu_392_p2 <= std_logic_vector(unsigned(S4_d_addr10_reg_737) + unsigned(tmp_71_trn_fu_388_p1));
    S4_d_addr1_fu_327_p2 <= std_logic_vector(unsigned(tmp_trn_cast_fu_311_p1) + unsigned(p_shl_cast_fu_323_p1));
    S4_d_addr2_fu_591_p2 <= std_logic_vector(unsigned(p_shl38_cast_fu_587_p1) + unsigned(tmp_trn_cast1_fu_528_p1));
    S4_d_addr3_cast_fu_603_p1 <= std_logic_vector(resize(unsigned(S4_d_addr3_fu_597_p2),32));
    S4_d_addr3_fu_597_p2 <= std_logic_vector(unsigned(tmp_72_trn_cast_fu_537_p1) + unsigned(S4_d_addr2_fu_591_p2));
    S4_d_addr4_fu_619_p2 <= std_logic_vector(unsigned(p_shl14_fu_615_p1) + unsigned(S4_d_addr3_cast_fu_603_p1));
    S4_d_addr5_fu_645_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(S4_d_addr4_reg_808));
    S4_d_addr6_fu_665_p2 <= std_logic_vector(unsigned(ap_const_lv32_2) + unsigned(S4_d_addr4_reg_808));
    S4_d_addr7_fu_675_p2 <= std_logic_vector(unsigned(ap_const_lv32_3) + unsigned(S4_d_addr4_reg_808));
    S4_d_addr8_fu_685_p2 <= std_logic_vector(unsigned(ap_const_lv32_4) + unsigned(S4_d_addr4_reg_808));
    S4_d_addr9_cast_fu_354_p1 <= std_logic_vector(resize(unsigned(S4_d_addr9_fu_349_p2),32));
    S4_d_addr9_fu_349_p2 <= std_logic_vector(unsigned(S4_d_addr1_reg_724) + unsigned(tmp_69_trn_cast_fu_345_p1));

    -- S4_d_address0 assign process. --
    S4_d_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_4, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp0_it3, ap_sig_cseq_ST_pp0_stg1_fsm_5, ap_sig_cseq_ST_pp0_stg4_fsm_8, ap_sig_cseq_ST_st4_fsm_3, ap_reg_ppstg_S4_d_addr_1_reg_816_pp0_it1, ap_sig_cseq_ST_pp0_stg2_fsm_6, ap_reg_ppstg_S4_d_addr_3_reg_857_pp0_it2, ap_reg_ppstg_S4_d_addr_4_reg_862_pp0_it2, ap_reg_ppstg_S4_d_addr_5_reg_868_pp0_it1, ap_sig_cseq_ST_pp0_stg3_fsm_7, tmp_107_fu_397_p1, tmp_102_fu_670_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3))) then 
            S4_d_address0 <= ap_reg_ppstg_S4_d_addr_4_reg_862_pp0_it2;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_8))) then 
            S4_d_address0 <= ap_reg_ppstg_S4_d_addr_3_reg_857_pp0_it2;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5))) then 
            S4_d_address0 <= ap_reg_ppstg_S4_d_addr_1_reg_816_pp0_it1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            S4_d_address0 <= tmp_107_fu_397_p1(9 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_7))) then 
            S4_d_address0 <= ap_reg_ppstg_S4_d_addr_5_reg_868_pp0_it1;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_6))) then 
            S4_d_address0 <= tmp_102_fu_670_p1(9 - 1 downto 0);
        else 
            S4_d_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    -- S4_d_address1 assign process. --
    S4_d_address1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_4, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp0_it3, ap_sig_cseq_ST_pp0_stg1_fsm_5, ap_sig_cseq_ST_pp0_stg4_fsm_8, ap_sig_cseq_ST_pp0_stg2_fsm_6, ap_reg_ppstg_S4_d_addr_2_reg_847_pp0_it2, S4_d_addr_4_reg_862, ap_reg_ppstg_S4_d_addr_5_reg_868_pp0_it2, ap_sig_cseq_ST_pp0_stg3_fsm_7, tmp_98_fu_625_p1, tmp_100_fu_650_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3))) then 
            S4_d_address1 <= ap_reg_ppstg_S4_d_addr_5_reg_868_pp0_it2;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_8))) then 
            S4_d_address1 <= ap_reg_ppstg_S4_d_addr_2_reg_847_pp0_it2;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_7))) then 
            S4_d_address1 <= S4_d_addr_4_reg_862;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_6))) then 
            S4_d_address1 <= tmp_100_fu_650_p1(9 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5))) then 
            S4_d_address1 <= tmp_98_fu_625_p1(9 - 1 downto 0);
        else 
            S4_d_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    -- S4_d_ce0 assign process. --
    S4_d_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_4, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp0_it3, ap_sig_cseq_ST_pp0_stg1_fsm_5, ap_sig_cseq_ST_pp0_stg4_fsm_8, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_pp0_stg2_fsm_6, ap_sig_cseq_ST_pp0_stg3_fsm_7)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_6)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_7)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_8)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) then 
            S4_d_ce0 <= ap_const_logic_1;
        else 
            S4_d_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- S4_d_ce1 assign process. --
    S4_d_ce1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_4, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp0_it3, ap_sig_cseq_ST_pp0_stg1_fsm_5, ap_sig_cseq_ST_pp0_stg4_fsm_8, ap_sig_cseq_ST_pp0_stg2_fsm_6, ap_sig_cseq_ST_pp0_stg3_fsm_7)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_6)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_7)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_8)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) then 
            S4_d_ce1 <= ap_const_logic_1;
        else 
            S4_d_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- S4_d_d0 assign process. --
    S4_d_d0_assign_proc : process(reg_293, ap_sig_cseq_ST_pp0_stg0_fsm_4, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp0_it3, ap_sig_cseq_ST_pp0_stg1_fsm_5, ap_sig_cseq_ST_pp0_stg4_fsm_8, ap_sig_cseq_ST_st4_fsm_3, tmp_120_2_reg_949, tmp_120_3_reg_954)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3))) then 
            S4_d_d0 <= tmp_120_3_reg_954;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_8))) then 
            S4_d_d0 <= tmp_120_2_reg_949;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5))) then 
            S4_d_d0 <= reg_293;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            S4_d_d0 <= ap_const_lv32_0;
        else 
            S4_d_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    S4_d_d1 <= reg_293;

    -- S4_d_we0 assign process. --
    S4_d_we0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_4, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp0_it3, ap_sig_cseq_ST_pp0_stg1_fsm_5, ap_reg_ppstg_exitcond_flatten5_reg_750_pp0_it2, ap_sig_cseq_ST_pp0_stg4_fsm_8, ap_sig_cseq_ST_st4_fsm_3, exitcond4_fu_376_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond4_fu_376_p2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten5_reg_750_pp0_it2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten5_reg_750_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_8)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten5_reg_750_pp0_it2)))) then 
            S4_d_we0 <= ap_const_logic_1;
        else 
            S4_d_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- S4_d_we1 assign process. --
    S4_d_we1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_4, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp0_it3, ap_reg_ppstg_exitcond_flatten5_reg_750_pp0_it2, ap_sig_cseq_ST_pp0_stg4_fsm_8)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten5_reg_750_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_8)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_flatten5_reg_750_pp0_it2)))) then 
            S4_d_we1 <= ap_const_logic_1;
        else 
            S4_d_we1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st21_fsm_9)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_9))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st21_fsm_9)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_9)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_109 assign process. --
    ap_sig_bdd_109_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_109 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_120 assign process. --
    ap_sig_bdd_120_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_120 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_135 assign process. --
    ap_sig_bdd_135_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_135 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_149 assign process. --
    ap_sig_bdd_149_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_149 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_193 assign process. --
    ap_sig_bdd_193_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_193 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_232 assign process. --
    ap_sig_bdd_232_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_232 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_28 assign process. --
    ap_sig_bdd_28_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_28 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_625 assign process. --
    ap_sig_bdd_625_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_625 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_78 assign process. --
    ap_sig_bdd_78_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_78 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_98 assign process. --
    ap_sig_bdd_98_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_98 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_4 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_4_assign_proc : process(ap_sig_bdd_78)
    begin
        if (ap_sig_bdd_78) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg1_fsm_5 assign process. --
    ap_sig_cseq_ST_pp0_stg1_fsm_5_assign_proc : process(ap_sig_bdd_98)
    begin
        if (ap_sig_bdd_98) then 
            ap_sig_cseq_ST_pp0_stg1_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg1_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg2_fsm_6 assign process. --
    ap_sig_cseq_ST_pp0_stg2_fsm_6_assign_proc : process(ap_sig_bdd_193)
    begin
        if (ap_sig_bdd_193) then 
            ap_sig_cseq_ST_pp0_stg2_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg2_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg3_fsm_7 assign process. --
    ap_sig_cseq_ST_pp0_stg3_fsm_7_assign_proc : process(ap_sig_bdd_232)
    begin
        if (ap_sig_bdd_232) then 
            ap_sig_cseq_ST_pp0_stg3_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg3_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg4_fsm_8 assign process. --
    ap_sig_cseq_ST_pp0_stg4_fsm_8_assign_proc : process(ap_sig_bdd_109)
    begin
        if (ap_sig_bdd_109) then 
            ap_sig_cseq_ST_pp0_stg4_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg4_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_28)
    begin
        if (ap_sig_bdd_28) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st21_fsm_9 assign process. --
    ap_sig_cseq_ST_st21_fsm_9_assign_proc : process(ap_sig_bdd_625)
    begin
        if (ap_sig_bdd_625) then 
            ap_sig_cseq_ST_st21_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_120)
    begin
        if (ap_sig_bdd_120) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_135)
    begin
        if (ap_sig_bdd_135) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_149)
    begin
        if (ap_sig_bdd_149) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_mid_fu_440_p2 <= (exitcond_fu_434_p2 and not_exitcond_flatten_fu_428_p2);
    exitcond4_fu_376_p2 <= "1" when (q_reg_217 = ap_const_lv3_5) else "0";
    exitcond5_fu_333_p2 <= "1" when (p_reg_206 = ap_const_lv3_5) else "0";
    exitcond6_fu_299_p2 <= "1" when (i_reg_195 = ap_const_lv5_10) else "0";
    exitcond_flatten5_fu_402_p2 <= "1" when (indvar_flatten5_phi_fu_232_p4 = ap_const_lv12_960) else "0";
    exitcond_flatten_fu_414_p2 <= "1" when (indvar_flatten_phi_fu_254_p4 = ap_const_lv8_96) else "0";
    exitcond_fu_434_p2 <= "1" when (k_phi_fu_276_p4 = ap_const_lv3_5) else "0";
    grp_fu_283_ce <= ap_const_logic_1;

    -- grp_fu_283_p0 assign process. --
    grp_fu_283_p0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_4, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_pp0_stg1_fsm_5, ap_sig_cseq_ST_pp0_stg4_fsm_8, ap_sig_cseq_ST_pp0_stg2_fsm_6, S4_d_load_reg_837, ap_sig_cseq_ST_pp0_stg3_fsm_7, S4_d_load_1_reg_879, S4_d_load_2_reg_889, S4_d_load_3_reg_909, S4_d_load_4_reg_944)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) then 
            grp_fu_283_p0 <= S4_d_load_4_reg_944;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_8))) then 
            grp_fu_283_p0 <= S4_d_load_3_reg_909;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_7))) then 
            grp_fu_283_p0 <= S4_d_load_2_reg_889;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_6))) then 
            grp_fu_283_p0 <= S4_d_load_1_reg_879;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5))) then 
            grp_fu_283_p0 <= S4_d_load_reg_837;
        else 
            grp_fu_283_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_283_p1 assign process. --
    grp_fu_283_p1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_4, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_pp0_stg1_fsm_5, ap_sig_cseq_ST_pp0_stg4_fsm_8, ap_sig_cseq_ST_pp0_stg2_fsm_6, ap_sig_cseq_ST_pp0_stg3_fsm_7, tmp_48_reg_919, tmp_119_1_reg_924, tmp_119_2_reg_929, tmp_119_3_reg_934, tmp_119_4_reg_939)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) then 
            grp_fu_283_p1 <= tmp_119_4_reg_939;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_8))) then 
            grp_fu_283_p1 <= tmp_119_3_reg_934;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_7))) then 
            grp_fu_283_p1 <= tmp_119_2_reg_929;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_6))) then 
            grp_fu_283_p1 <= tmp_119_1_reg_924;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5))) then 
            grp_fu_283_p1 <= tmp_48_reg_919;
        else 
            grp_fu_283_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_287_ce <= ap_const_logic_1;

    -- grp_fu_287_p0 assign process. --
    grp_fu_287_p0_assign_proc : process(C5_d_q0, ap_sig_cseq_ST_pp0_stg0_fsm_4, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_5, ap_sig_cseq_ST_pp0_stg4_fsm_8, C5_d_load_reg_827, ap_sig_cseq_ST_pp0_stg2_fsm_6, ap_sig_cseq_ST_pp0_stg3_fsm_7)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_7)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_8)))) then 
            grp_fu_287_p0 <= C5_d_load_reg_827;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_6))) then 
            grp_fu_287_p0 <= C5_d_q0;
        else 
            grp_fu_287_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_287_p1 assign process. --
    grp_fu_287_p1_assign_proc : process(C5_mapData_q0, ap_sig_cseq_ST_pp0_stg0_fsm_4, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_5, ap_sig_cseq_ST_pp0_stg4_fsm_8, ap_sig_cseq_ST_pp0_stg2_fsm_6, ap_sig_cseq_ST_pp0_stg3_fsm_7, C5_mapData_load_2_reg_884, C5_mapData_load_3_reg_904, C5_mapData_load_4_reg_914)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_5))) then 
            grp_fu_287_p1 <= C5_mapData_load_4_reg_914;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            grp_fu_287_p1 <= C5_mapData_load_3_reg_904;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_8))) then 
            grp_fu_287_p1 <= C5_mapData_load_2_reg_884;
        elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_6)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_7)))) then 
            grp_fu_287_p1 <= C5_mapData_q0;
        else 
            grp_fu_287_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_12_fu_305_p2 <= std_logic_vector(unsigned(i_reg_195) + unsigned(ap_const_lv5_1));
    i_1_mid2_fu_452_p3 <= 
        i_s_fu_446_p2 when (exitcond_flatten_fu_414_p2(0) = '1') else 
        i_1_phi_fu_243_p4;

    -- i_1_phi_fu_243_p4 assign process. --
    i_1_phi_fu_243_p4_assign_proc : process(i_1_reg_239, ap_sig_cseq_ST_pp0_stg0_fsm_4, ap_reg_ppiten_pp0_it1, exitcond_flatten5_reg_750, i_1_mid2_reg_759)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten5_reg_750 = ap_const_lv1_0))) then 
            i_1_phi_fu_243_p4 <= i_1_mid2_reg_759;
        else 
            i_1_phi_fu_243_p4 <= i_1_reg_239;
        end if; 
    end process;

    i_s_fu_446_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(i_1_phi_fu_243_p4));

    -- indvar_flatten5_phi_fu_232_p4 assign process. --
    indvar_flatten5_phi_fu_232_p4_assign_proc : process(indvar_flatten5_reg_228, ap_sig_cseq_ST_pp0_stg0_fsm_4, ap_reg_ppiten_pp0_it1, exitcond_flatten5_reg_750, indvar_flatten_next5_reg_754)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten5_reg_750 = ap_const_lv1_0))) then 
            indvar_flatten5_phi_fu_232_p4 <= indvar_flatten_next5_reg_754;
        else 
            indvar_flatten5_phi_fu_232_p4 <= indvar_flatten5_reg_228;
        end if; 
    end process;

    indvar_flatten_next5_fu_408_p2 <= std_logic_vector(unsigned(indvar_flatten5_phi_fu_232_p4) + unsigned(ap_const_lv12_1));
    indvar_flatten_next_fu_516_p3 <= 
        ap_const_lv8_1 when (exitcond_flatten_fu_414_p2(0) = '1') else 
        indvar_flatten_op_fu_510_p2;
    indvar_flatten_op_fu_510_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(indvar_flatten_phi_fu_254_p4));

    -- indvar_flatten_phi_fu_254_p4 assign process. --
    indvar_flatten_phi_fu_254_p4_assign_proc : process(indvar_flatten_reg_250, ap_sig_cseq_ST_pp0_stg0_fsm_4, ap_reg_ppiten_pp0_it1, exitcond_flatten5_reg_750, indvar_flatten_next_reg_785)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten5_reg_750 = ap_const_lv1_0))) then 
            indvar_flatten_phi_fu_254_p4 <= indvar_flatten_next_reg_785;
        else 
            indvar_flatten_phi_fu_254_p4 <= indvar_flatten_reg_250;
        end if; 
    end process;

    j_9_fu_460_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(j_mid_fu_420_p3));
    j_mid2_fu_480_p3 <= 
        j_9_fu_460_p2 when (exitcond1_mid_fu_440_p2(0) = '1') else 
        j_mid_fu_420_p3;
    j_mid_fu_420_p3 <= 
        ap_const_lv5_0 when (exitcond_flatten_fu_414_p2(0) = '1') else 
        j_phi_fu_265_p4;

    -- j_phi_fu_265_p4 assign process. --
    j_phi_fu_265_p4_assign_proc : process(j_reg_261, ap_sig_cseq_ST_pp0_stg0_fsm_4, ap_reg_ppiten_pp0_it1, exitcond_flatten5_reg_750, j_mid2_reg_773)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten5_reg_750 = ap_const_lv1_0))) then 
            j_phi_fu_265_p4 <= j_mid2_reg_773;
        else 
            j_phi_fu_265_p4 <= j_reg_261;
        end if; 
    end process;

    k_8_fu_630_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(k_mid2_reg_766));
    k_mid2_fu_472_p3 <= 
        ap_const_lv3_0 when (tmp_94_fu_466_p2(0) = '1') else 
        k_phi_fu_276_p4;

    -- k_phi_fu_276_p4 assign process. --
    k_phi_fu_276_p4_assign_proc : process(k_reg_272, ap_sig_cseq_ST_pp0_stg0_fsm_4, ap_reg_ppiten_pp0_it1, exitcond_flatten5_reg_750, k_8_reg_822)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten5_reg_750 = ap_const_lv1_0))) then 
            k_phi_fu_276_p4 <= k_8_reg_822;
        else 
            k_phi_fu_276_p4 <= k_reg_272;
        end if; 
    end process;

    not_exitcond_flatten_fu_428_p2 <= (exitcond_flatten_fu_414_p2 xor ap_const_lv1_1);
    p_1_fu_339_p2 <= std_logic_vector(unsigned(p_reg_206) + unsigned(ap_const_lv3_1));
    p_shl14_fu_615_p1 <= std_logic_vector(resize(unsigned(tmp_85_fu_607_p3),32));
    p_shl15_fu_366_p1 <= std_logic_vector(resize(unsigned(tmp_86_fu_358_p3),32));
    p_shl38_cast_fu_587_p1 <= std_logic_vector(resize(unsigned(tmp_97_fu_580_p3),8));
    p_shl_cast_fu_323_p1 <= std_logic_vector(resize(unsigned(tmp_fu_315_p3),8));
    p_shl_fu_547_p1 <= std_logic_vector(resize(unsigned(tmp_83_fu_540_p3),32));
    q_1_fu_382_p2 <= std_logic_vector(unsigned(q_reg_217) + unsigned(ap_const_lv3_1));
    tmp_100_fu_650_p1 <= std_logic_vector(resize(unsigned(S4_d_addr5_fu_645_p2),64));
    tmp_101_fu_660_p1 <= std_logic_vector(resize(unsigned(C5_mapData_addr4_fu_655_p2),64));
    tmp_102_fu_670_p1 <= std_logic_vector(resize(unsigned(S4_d_addr6_fu_665_p2),64));
    tmp_103_fu_700_p1 <= std_logic_vector(resize(unsigned(C5_mapData_addr5_fu_695_p2),64));
    tmp_104_fu_680_p1 <= std_logic_vector(resize(unsigned(S4_d_addr7_fu_675_p2),64));
    tmp_105_fu_710_p1 <= std_logic_vector(resize(unsigned(C5_mapData_addr6_fu_705_p2),64));
    tmp_106_fu_690_p1 <= std_logic_vector(resize(unsigned(S4_d_addr8_fu_685_p2),64));
    tmp_107_fu_397_p1 <= std_logic_vector(resize(unsigned(S4_d_addr11_fu_392_p2),64));
    tmp_69_trn_cast_fu_345_p1 <= std_logic_vector(resize(unsigned(p_reg_206),8));
    tmp_71_trn_fu_388_p1 <= std_logic_vector(resize(unsigned(q_reg_217),32));
    tmp_72_trn_cast_fu_537_p1 <= std_logic_vector(resize(unsigned(k_mid2_reg_766),8));
    tmp_72_trn_fu_534_p1 <= std_logic_vector(resize(unsigned(k_mid2_reg_766),32));
    tmp_83_fu_540_p3 <= (C5_mapData_addr8_reg_779 & ap_const_lv2_0);
    tmp_84_fu_563_p2 <= std_logic_vector(shift_left(unsigned(C5_mapData_addr1_fu_557_p2),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    tmp_85_fu_607_p3 <= (S4_d_addr3_fu_597_p2 & ap_const_lv2_0);
    tmp_86_fu_358_p3 <= (S4_d_addr9_fu_349_p2 & ap_const_lv2_0);
    tmp_94_fu_466_p2 <= (exitcond1_mid_fu_440_p2 or exitcond_flatten_fu_414_p2);
    tmp_95_fu_492_p3 <= (j_mid2_fu_480_p3 & ap_const_lv4_0);
    tmp_96_fu_575_p1 <= std_logic_vector(resize(unsigned(C5_mapData_addr2_fu_569_p2),64));
    tmp_97_fu_580_p3 <= (i_1_mid2_reg_759 & ap_const_lv2_0);
    tmp_98_fu_625_p1 <= std_logic_vector(resize(unsigned(S4_d_addr4_fu_619_p2),64));
    tmp_99_fu_640_p1 <= std_logic_vector(resize(unsigned(C5_mapData_addr3_fu_635_p2),64));
    tmp_fu_315_p3 <= (i_reg_195 & ap_const_lv2_0);
    tmp_s_fu_524_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_773),64));
    tmp_trn_cast1_fu_528_p1 <= std_logic_vector(resize(unsigned(i_1_mid2_reg_759),8));
    tmp_trn_cast_34_fu_488_p1 <= std_logic_vector(resize(unsigned(i_1_mid2_fu_452_p3),10));
    tmp_trn_cast_fu_311_p1 <= std_logic_vector(resize(unsigned(i_reg_195),8));
end behav;
