// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dateport_S2_pool (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        C1_y_address0,
        C1_y_ce0,
        C1_y_q0,
        C1_y_address1,
        C1_y_ce1,
        C1_y_q1,
        S2_y_address0,
        S2_y_ce0,
        S2_y_we0,
        S2_y_d0
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 24'b1;
parameter    ap_ST_st2_fsm_1 = 24'b10;
parameter    ap_ST_st3_fsm_2 = 24'b100;
parameter    ap_ST_st4_fsm_3 = 24'b1000;
parameter    ap_ST_st5_fsm_4 = 24'b10000;
parameter    ap_ST_st6_fsm_5 = 24'b100000;
parameter    ap_ST_st7_fsm_6 = 24'b1000000;
parameter    ap_ST_st8_fsm_7 = 24'b10000000;
parameter    ap_ST_st9_fsm_8 = 24'b100000000;
parameter    ap_ST_st10_fsm_9 = 24'b1000000000;
parameter    ap_ST_st11_fsm_10 = 24'b10000000000;
parameter    ap_ST_st12_fsm_11 = 24'b100000000000;
parameter    ap_ST_st13_fsm_12 = 24'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 24'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 24'b100000000000000;
parameter    ap_ST_st16_fsm_15 = 24'b1000000000000000;
parameter    ap_ST_st17_fsm_16 = 24'b10000000000000000;
parameter    ap_ST_st18_fsm_17 = 24'b100000000000000000;
parameter    ap_ST_st19_fsm_18 = 24'b1000000000000000000;
parameter    ap_ST_st20_fsm_19 = 24'b10000000000000000000;
parameter    ap_ST_st21_fsm_20 = 24'b100000000000000000000;
parameter    ap_ST_st22_fsm_21 = 24'b1000000000000000000000;
parameter    ap_ST_st23_fsm_22 = 24'b10000000000000000000000;
parameter    ap_ST_st24_fsm_23 = 24'b100000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_3E800000 = 32'b111110100000000000000000000000;
parameter    ap_const_lv32_14 = 32'b10100;
parameter    ap_const_lv3_6 = 3'b110;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv5_1C = 5'b11100;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv5_2 = 5'b10;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] C1_y_address0;
output   C1_y_ce0;
input  [31:0] C1_y_q0;
output  [12:0] C1_y_address1;
output   C1_y_ce1;
input  [31:0] C1_y_q1;
output  [10:0] S2_y_address0;
output   S2_y_ce0;
output   S2_y_we0;
output  [31:0] S2_y_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[12:0] C1_y_address0;
reg C1_y_ce0;
reg[12:0] C1_y_address1;
reg C1_y_ce1;
reg S2_y_ce0;
reg S2_y_we0;
(* fsm_encoding = "none" *) reg   [23:0] ap_CS_fsm = 24'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_42;
reg   [31:0] reg_151;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_69;
reg    ap_sig_cseq_ST_st10_fsm_9;
reg    ap_sig_bdd_76;
reg    ap_sig_cseq_ST_st15_fsm_14;
reg    ap_sig_bdd_84;
wire   [31:0] grp_fu_141_p2;
reg   [31:0] reg_158;
reg    ap_sig_cseq_ST_st20_fsm_19;
reg    ap_sig_bdd_94;
wire   [2:0] i_1_fu_170_p2;
reg   [2:0] i_1_reg_479;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_104;
wire  signed [9:0] C1_y_addr1_cast_fu_206_p1;
reg  signed [9:0] C1_y_addr1_cast_reg_484;
wire   [0:0] exitcond_fu_164_p2;
wire  signed [8:0] S2_y_addr1_cast_fu_240_p1;
reg  signed [8:0] S2_y_addr1_cast_reg_490;
wire  signed [31:0] C1_y_addr3_fu_289_p2;
reg  signed [31:0] C1_y_addr3_reg_498;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_121;
wire   [0:0] tmp_s_fu_244_p2;
wire  signed [31:0] C1_y_addr9_fu_328_p2;
reg  signed [31:0] C1_y_addr9_reg_504;
wire  signed [31:0] S2_y_addr3_fu_377_p2;
reg  signed [31:0] S2_y_addr3_reg_510;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_138;
wire   [0:0] tmp_9_fu_383_p2;
wire  signed [31:0] C1_y_addr7_fu_423_p2;
reg  signed [31:0] C1_y_addr7_reg_528;
wire  signed [31:0] C1_y_addr4_fu_428_p2;
reg  signed [31:0] C1_y_addr4_reg_533;
wire  signed [31:0] S2_y_addr4_fu_447_p2;
reg  signed [31:0] S2_y_addr4_reg_538;
wire   [4:0] k_1_fu_452_p2;
reg   [4:0] k_1_reg_543;
wire   [4:0] j_1_fu_458_p2;
reg   [31:0] C1_y_load_1_reg_553;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_bdd_165;
reg    ap_sig_cseq_ST_st14_fsm_13;
reg    ap_sig_bdd_174;
reg   [2:0] i_reg_107;
reg   [4:0] j_reg_118;
reg   [4:0] k_reg_130;
reg    ap_sig_cseq_ST_st24_fsm_23;
reg    ap_sig_bdd_193;
wire   [63:0] tmp_30_fu_398_p1;
wire   [63:0] tmp_31_fu_418_p1;
wire   [63:0] tmp_32_fu_464_p1;
wire   [63:0] tmp_33_fu_468_p1;
wire   [63:0] tmp_34_fu_472_p1;
wire   [31:0] grp_fu_145_p2;
reg   [31:0] grp_fu_141_p0;
reg   [31:0] grp_fu_141_p1;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_212;
reg    ap_sig_cseq_ST_st11_fsm_10;
reg    ap_sig_bdd_219;
reg    ap_sig_cseq_ST_st16_fsm_15;
reg    ap_sig_bdd_226;
wire   [31:0] grp_fu_145_p0;
wire   [31:0] grp_fu_145_p1;
reg    ap_sig_cseq_ST_st21_fsm_20;
reg    ap_sig_bdd_237;
wire   [7:0] tmp_fu_176_p3;
wire   [4:0] tmp_21_fu_188_p3;
wire   [8:0] p_shl1_cast_fu_184_p1;
wire   [8:0] p_shl2_cast_fu_196_p1;
wire   [8:0] C1_y_addr1_fu_200_p2;
wire   [6:0] tmp_22_fu_210_p3;
wire   [3:0] tmp_23_fu_222_p3;
wire   [7:0] p_shl_cast_fu_218_p1;
wire   [7:0] p_shl3_cast_fu_230_p1;
wire   [7:0] S2_y_addr1_fu_234_p2;
wire   [9:0] tmp_4_trn_cast_fu_256_p1;
wire  signed [9:0] C1_y_addr2_fu_260_p2;
wire   [14:0] tmp_24_fu_265_p3;
wire   [11:0] tmp_25_fu_277_p3;
wire  signed [31:0] p_shl4_fu_273_p1;
wire  signed [31:0] p_shl5_fu_285_p1;
wire   [4:0] tmp_5_fu_250_p2;
wire   [9:0] tmp_6_trn6_cast_fu_295_p1;
wire  signed [9:0] C1_y_addr8_fu_299_p2;
wire   [14:0] tmp_26_fu_304_p3;
wire   [11:0] tmp_27_fu_316_p3;
wire  signed [31:0] p_shl6_fu_312_p1;
wire  signed [31:0] p_shl7_fu_324_p1;
wire   [3:0] tmp_28_fu_334_p4;
wire   [8:0] tmp_8_trn_cast_fu_344_p1;
wire  signed [8:0] S2_y_addr2_fu_348_p2;
wire   [12:0] tmp_29_fu_353_p3;
wire   [9:0] tmp_35_fu_365_p3;
wire  signed [31:0] p_shl8_fu_361_p1;
wire  signed [31:0] p_shl9_fu_373_p1;
wire   [31:0] tmp_10_trn_fu_389_p1;
wire  signed [31:0] C1_y_addr5_fu_393_p2;
wire   [4:0] tmp_11_fu_403_p2;
wire   [31:0] tmp_12_trn_fu_409_p1;
wire  signed [31:0] C1_y_addr6_fu_413_p2;
wire   [3:0] tmp_17_fu_433_p4;
wire   [31:0] tmp_18_trn_fu_443_p1;
wire    grp_fu_141_ce;
wire    grp_fu_145_ce;
reg   [23:0] ap_NS_fsm;


dateport_fadd_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dateport_fadd_32ns_32ns_32_5_full_dsp_U8(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_141_p0 ),
    .din1( grp_fu_141_p1 ),
    .ce( grp_fu_141_ce ),
    .dout( grp_fu_141_p2 )
);

dateport_fmul_32ns_32ns_32_4_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dateport_fmul_32ns_32ns_32_4_max_dsp_U9(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_145_p0 ),
    .din1( grp_fu_145_p1 ),
    .ce( grp_fu_145_ce ),
    .dout( grp_fu_145_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == tmp_s_fu_244_p2))) begin
        i_reg_107 <= i_1_reg_479;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_107 <= ap_const_lv3_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_164_p2 == ap_const_lv1_0))) begin
        j_reg_118 <= ap_const_lv5_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == tmp_9_fu_383_p2))) begin
        j_reg_118 <= j_1_fu_458_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == tmp_s_fu_244_p2))) begin
        k_reg_130 <= ap_const_lv5_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        k_reg_130 <= k_1_reg_543;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14)) begin
        reg_151 <= C1_y_q1;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) | (ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9))) begin
        reg_151 <= C1_y_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_164_p2 == ap_const_lv1_0))) begin
        C1_y_addr1_cast_reg_484[9 : 2] <= C1_y_addr1_cast_fu_206_p1[9 : 2];
        S2_y_addr1_cast_reg_490[8 : 1] <= S2_y_addr1_cast_fu_240_p1[8 : 1];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == tmp_s_fu_244_p2))) begin
        C1_y_addr3_reg_498[31 : 2] <= C1_y_addr3_fu_289_p2[31 : 2];
        C1_y_addr9_reg_504[31 : 3] <= C1_y_addr9_fu_328_p2[31 : 3];
        S2_y_addr3_reg_510[31 : 1] <= S2_y_addr3_fu_377_p2[31 : 1];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_lv1_0 == tmp_9_fu_383_p2))) begin
        C1_y_addr4_reg_533[31 : 1] <= C1_y_addr4_fu_428_p2[31 : 1];
        C1_y_addr7_reg_528 <= C1_y_addr7_fu_423_p2;
        S2_y_addr4_reg_538 <= S2_y_addr4_fu_447_p2;
        k_1_reg_543 <= k_1_fu_452_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        C1_y_load_1_reg_553 <= C1_y_q1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        i_1_reg_479 <= i_1_fu_170_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9) | (ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14) | (ap_const_logic_1 == ap_sig_cseq_ST_st20_fsm_19))) begin
        reg_158 <= grp_fu_141_p2;
    end
end

/// C1_y_address0 assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3 or ap_sig_cseq_ST_st9_fsm_8 or tmp_30_fu_398_p1 or tmp_32_fu_464_p1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        C1_y_address0 = tmp_32_fu_464_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        C1_y_address0 = tmp_30_fu_398_p1;
    end else begin
        C1_y_address0 = 'bx;
    end
end

/// C1_y_address1 assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3 or ap_sig_cseq_ST_st14_fsm_13 or tmp_31_fu_418_p1 or tmp_33_fu_468_p1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13)) begin
        C1_y_address1 = tmp_33_fu_468_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        C1_y_address1 = tmp_31_fu_418_p1;
    end else begin
        C1_y_address1 = 'bx;
    end
end

/// C1_y_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3 or ap_sig_cseq_ST_st9_fsm_8)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) | (ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8))) begin
        C1_y_ce0 = ap_const_logic_1;
    end else begin
        C1_y_ce0 = ap_const_logic_0;
    end
end

/// C1_y_ce1 assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3 or ap_sig_cseq_ST_st14_fsm_13)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) | (ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13))) begin
        C1_y_ce1 = ap_const_logic_1;
    end else begin
        C1_y_ce1 = ap_const_logic_0;
    end
end

/// S2_y_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st24_fsm_23)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        S2_y_ce0 = ap_const_logic_1;
    end else begin
        S2_y_ce0 = ap_const_logic_0;
    end
end

/// S2_y_we0 assign process. ///
always @ (ap_sig_cseq_ST_st24_fsm_23)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st24_fsm_23)) begin
        S2_y_we0 = ap_const_logic_1;
    end else begin
        S2_y_we0 = ap_const_logic_0;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st2_fsm_1 or exitcond_fu_164_p2)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond_fu_164_p2 == ap_const_lv1_0)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond_fu_164_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond_fu_164_p2 == ap_const_lv1_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st10_fsm_9 assign process. ///
always @ (ap_sig_bdd_76)
begin
    if (ap_sig_bdd_76) begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st11_fsm_10 assign process. ///
always @ (ap_sig_bdd_219)
begin
    if (ap_sig_bdd_219) begin
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st14_fsm_13 assign process. ///
always @ (ap_sig_bdd_174)
begin
    if (ap_sig_bdd_174) begin
        ap_sig_cseq_ST_st14_fsm_13 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st14_fsm_13 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st15_fsm_14 assign process. ///
always @ (ap_sig_bdd_84)
begin
    if (ap_sig_bdd_84) begin
        ap_sig_cseq_ST_st15_fsm_14 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st15_fsm_14 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st16_fsm_15 assign process. ///
always @ (ap_sig_bdd_226)
begin
    if (ap_sig_bdd_226) begin
        ap_sig_cseq_ST_st16_fsm_15 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st16_fsm_15 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_42)
begin
    if (ap_sig_bdd_42) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st20_fsm_19 assign process. ///
always @ (ap_sig_bdd_94)
begin
    if (ap_sig_bdd_94) begin
        ap_sig_cseq_ST_st20_fsm_19 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st20_fsm_19 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st21_fsm_20 assign process. ///
always @ (ap_sig_bdd_237)
begin
    if (ap_sig_bdd_237) begin
        ap_sig_cseq_ST_st21_fsm_20 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st21_fsm_20 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st24_fsm_23 assign process. ///
always @ (ap_sig_bdd_193)
begin
    if (ap_sig_bdd_193) begin
        ap_sig_cseq_ST_st24_fsm_23 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st24_fsm_23 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_104)
begin
    if (ap_sig_bdd_104) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_121)
begin
    if (ap_sig_bdd_121) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_138)
begin
    if (ap_sig_bdd_138) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st5_fsm_4 assign process. ///
always @ (ap_sig_bdd_69)
begin
    if (ap_sig_bdd_69) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st6_fsm_5 assign process. ///
always @ (ap_sig_bdd_212)
begin
    if (ap_sig_bdd_212) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st9_fsm_8 assign process. ///
always @ (ap_sig_bdd_165)
begin
    if (ap_sig_bdd_165) begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_0;
    end
end

/// grp_fu_141_p0 assign process. ///
always @ (reg_151 or reg_158 or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st11_fsm_10 or ap_sig_cseq_ST_st16_fsm_15)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10) | (ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15))) begin
        grp_fu_141_p0 = reg_158;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        grp_fu_141_p0 = reg_151;
    end else begin
        grp_fu_141_p0 = 'bx;
    end
end

/// grp_fu_141_p1 assign process. ///
always @ (reg_151 or C1_y_load_1_reg_553 or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st11_fsm_10 or ap_sig_cseq_ST_st16_fsm_15)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10) | (ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15))) begin
        grp_fu_141_p1 = reg_151;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        grp_fu_141_p1 = C1_y_load_1_reg_553;
    end else begin
        grp_fu_141_p1 = 'bx;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or exitcond_fu_164_p2 or tmp_s_fu_244_p2 or tmp_9_fu_383_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(exitcond_fu_164_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if (~(ap_const_lv1_0 == tmp_s_fu_244_p2)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        ap_ST_st4_fsm_3 : 
        begin
            if ((ap_const_lv1_0 == tmp_9_fu_383_p2)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : 
        begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : 
        begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : 
        begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : 
        begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : 
        begin
            ap_NS_fsm = ap_ST_st15_fsm_14;
        end
        ap_ST_st15_fsm_14 : 
        begin
            ap_NS_fsm = ap_ST_st16_fsm_15;
        end
        ap_ST_st16_fsm_15 : 
        begin
            ap_NS_fsm = ap_ST_st17_fsm_16;
        end
        ap_ST_st17_fsm_16 : 
        begin
            ap_NS_fsm = ap_ST_st18_fsm_17;
        end
        ap_ST_st18_fsm_17 : 
        begin
            ap_NS_fsm = ap_ST_st19_fsm_18;
        end
        ap_ST_st19_fsm_18 : 
        begin
            ap_NS_fsm = ap_ST_st20_fsm_19;
        end
        ap_ST_st20_fsm_19 : 
        begin
            ap_NS_fsm = ap_ST_st21_fsm_20;
        end
        ap_ST_st21_fsm_20 : 
        begin
            ap_NS_fsm = ap_ST_st22_fsm_21;
        end
        ap_ST_st22_fsm_21 : 
        begin
            ap_NS_fsm = ap_ST_st23_fsm_22;
        end
        ap_ST_st23_fsm_22 : 
        begin
            ap_NS_fsm = ap_ST_st24_fsm_23;
        end
        ap_ST_st24_fsm_23 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign C1_y_addr1_cast_fu_206_p1 = $signed(C1_y_addr1_fu_200_p2);
assign C1_y_addr1_fu_200_p2 = (p_shl1_cast_fu_184_p1 - p_shl2_cast_fu_196_p1);
assign C1_y_addr2_fu_260_p2 = ($signed(tmp_4_trn_cast_fu_256_p1) + $signed(C1_y_addr1_cast_reg_484));
assign C1_y_addr3_fu_289_p2 = ($signed(p_shl4_fu_273_p1) - $signed(p_shl5_fu_285_p1));
assign C1_y_addr4_fu_428_p2 = ($signed(C1_y_addr9_reg_504) + $signed(tmp_12_trn_fu_409_p1));
assign C1_y_addr5_fu_393_p2 = ($signed(C1_y_addr3_reg_498) + $signed(tmp_10_trn_fu_389_p1));
assign C1_y_addr6_fu_413_p2 = ($signed(C1_y_addr3_reg_498) + $signed(tmp_12_trn_fu_409_p1));
assign C1_y_addr7_fu_423_p2 = ($signed(C1_y_addr9_reg_504) + $signed(tmp_10_trn_fu_389_p1));
assign C1_y_addr8_fu_299_p2 = ($signed(tmp_6_trn6_cast_fu_295_p1) + $signed(C1_y_addr1_cast_reg_484));
assign C1_y_addr9_fu_328_p2 = ($signed(p_shl6_fu_312_p1) - $signed(p_shl7_fu_324_p1));
assign S2_y_addr1_cast_fu_240_p1 = $signed(S2_y_addr1_fu_234_p2);
assign S2_y_addr1_fu_234_p2 = (p_shl_cast_fu_218_p1 - p_shl3_cast_fu_230_p1);
assign S2_y_addr2_fu_348_p2 = ($signed(tmp_8_trn_cast_fu_344_p1) + $signed(S2_y_addr1_cast_reg_490));
assign S2_y_addr3_fu_377_p2 = ($signed(p_shl8_fu_361_p1) - $signed(p_shl9_fu_373_p1));
assign S2_y_addr4_fu_447_p2 = ($signed(S2_y_addr3_reg_510) + $signed(tmp_18_trn_fu_443_p1));
assign S2_y_address0 = tmp_34_fu_472_p1;
assign S2_y_d0 = grp_fu_145_p2;

/// ap_sig_bdd_104 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_104 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_121 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_121 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_138 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_138 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_165 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_165 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end

/// ap_sig_bdd_174 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_174 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_D]);
end

/// ap_sig_bdd_193 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_193 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_17]);
end

/// ap_sig_bdd_212 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_212 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end

/// ap_sig_bdd_219 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_219 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_A]);
end

/// ap_sig_bdd_226 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_226 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_F]);
end

/// ap_sig_bdd_237 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_237 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_14]);
end

/// ap_sig_bdd_42 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_42 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_69 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_69 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

/// ap_sig_bdd_76 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_76 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_9]);
end

/// ap_sig_bdd_84 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_84 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_E]);
end

/// ap_sig_bdd_94 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_94 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_13]);
end
assign exitcond_fu_164_p2 = (i_reg_107 == ap_const_lv3_6? 1'b1: 1'b0);
assign grp_fu_141_ce = ap_const_logic_1;
assign grp_fu_145_ce = ap_const_logic_1;
assign grp_fu_145_p0 = reg_158;
assign grp_fu_145_p1 = ap_const_lv32_3E800000;
assign i_1_fu_170_p2 = (i_reg_107 + ap_const_lv3_1);
assign j_1_fu_458_p2 = (j_reg_118 + ap_const_lv5_2);
assign k_1_fu_452_p2 = (k_reg_130 + ap_const_lv5_2);
assign p_shl1_cast_fu_184_p1 = tmp_fu_176_p3;
assign p_shl2_cast_fu_196_p1 = tmp_21_fu_188_p3;
assign p_shl3_cast_fu_230_p1 = tmp_23_fu_222_p3;
assign p_shl4_fu_273_p1 = $signed(tmp_24_fu_265_p3);
assign p_shl5_fu_285_p1 = $signed(tmp_25_fu_277_p3);
assign p_shl6_fu_312_p1 = $signed(tmp_26_fu_304_p3);
assign p_shl7_fu_324_p1 = $signed(tmp_27_fu_316_p3);
assign p_shl8_fu_361_p1 = $signed(tmp_29_fu_353_p3);
assign p_shl9_fu_373_p1 = $signed(tmp_35_fu_365_p3);
assign p_shl_cast_fu_218_p1 = tmp_22_fu_210_p3;
assign tmp_10_trn_fu_389_p1 = k_reg_130;
assign tmp_11_fu_403_p2 = (k_reg_130 | ap_const_lv5_1);
assign tmp_12_trn_fu_409_p1 = tmp_11_fu_403_p2;
assign tmp_17_fu_433_p4 = {{k_reg_130[ap_const_lv32_4 : ap_const_lv32_1]}};
assign tmp_18_trn_fu_443_p1 = tmp_17_fu_433_p4;
assign tmp_21_fu_188_p3 = {{i_reg_107}, {ap_const_lv2_0}};
assign tmp_22_fu_210_p3 = {{i_reg_107}, {ap_const_lv4_0}};
assign tmp_23_fu_222_p3 = {{i_reg_107}, {ap_const_lv1_0}};
assign tmp_24_fu_265_p3 = {{C1_y_addr2_fu_260_p2}, {ap_const_lv5_0}};
assign tmp_25_fu_277_p3 = {{C1_y_addr2_fu_260_p2}, {ap_const_lv2_0}};
assign tmp_26_fu_304_p3 = {{C1_y_addr8_fu_299_p2}, {ap_const_lv5_0}};
assign tmp_27_fu_316_p3 = {{C1_y_addr8_fu_299_p2}, {ap_const_lv2_0}};
assign tmp_28_fu_334_p4 = {{j_reg_118[ap_const_lv32_4 : ap_const_lv32_1]}};
assign tmp_29_fu_353_p3 = {{S2_y_addr2_fu_348_p2}, {ap_const_lv4_0}};
assign tmp_30_fu_398_p1 = $unsigned(C1_y_addr5_fu_393_p2);
assign tmp_31_fu_418_p1 = $unsigned(C1_y_addr6_fu_413_p2);
assign tmp_32_fu_464_p1 = $unsigned(C1_y_addr7_reg_528);
assign tmp_33_fu_468_p1 = $unsigned(C1_y_addr4_reg_533);
assign tmp_34_fu_472_p1 = $unsigned(S2_y_addr4_reg_538);
assign tmp_35_fu_365_p3 = {{S2_y_addr2_fu_348_p2}, {ap_const_lv1_0}};
assign tmp_4_trn_cast_fu_256_p1 = j_reg_118;
assign tmp_5_fu_250_p2 = (j_reg_118 | ap_const_lv5_1);
assign tmp_6_trn6_cast_fu_295_p1 = tmp_5_fu_250_p2;
assign tmp_8_trn_cast_fu_344_p1 = tmp_28_fu_334_p4;
assign tmp_9_fu_383_p2 = (k_reg_130 < ap_const_lv5_1C? 1'b1: 1'b0);
assign tmp_fu_176_p3 = {{i_reg_107}, {ap_const_lv5_0}};
assign tmp_s_fu_244_p2 = (j_reg_118 < ap_const_lv5_1C? 1'b1: 1'b0);
always @ (posedge ap_clk)
begin
    C1_y_addr1_cast_reg_484[1:0] <= 2'b00;
    S2_y_addr1_cast_reg_490[0] <= 1'b0;
    C1_y_addr3_reg_498[1:0] <= 2'b00;
    C1_y_addr9_reg_504[2:0] <= 3'b100;
    S2_y_addr3_reg_510[0] <= 1'b0;
    C1_y_addr4_reg_533[0] <= 1'b1;
end



endmodule //dateport_S2_pool

