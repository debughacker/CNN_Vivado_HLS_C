// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dateport_O_layer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        C5_y_address0,
        C5_y_ce0,
        C5_y_q0,
        output_wei_address0,
        output_wei_ce0,
        output_wei_q0,
        output_bias_address0,
        output_bias_ce0,
        output_bias_q0,
        output_y_address0,
        output_y_ce0,
        output_y_we0,
        output_y_d0
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 51'b1;
parameter    ap_ST_st2_fsm_1 = 51'b10;
parameter    ap_ST_st3_fsm_2 = 51'b100;
parameter    ap_ST_st4_fsm_3 = 51'b1000;
parameter    ap_ST_st5_fsm_4 = 51'b10000;
parameter    ap_ST_st6_fsm_5 = 51'b100000;
parameter    ap_ST_st7_fsm_6 = 51'b1000000;
parameter    ap_ST_st8_fsm_7 = 51'b10000000;
parameter    ap_ST_st9_fsm_8 = 51'b100000000;
parameter    ap_ST_st10_fsm_9 = 51'b1000000000;
parameter    ap_ST_st11_fsm_10 = 51'b10000000000;
parameter    ap_ST_st12_fsm_11 = 51'b100000000000;
parameter    ap_ST_st13_fsm_12 = 51'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 51'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 51'b100000000000000;
parameter    ap_ST_st16_fsm_15 = 51'b1000000000000000;
parameter    ap_ST_st17_fsm_16 = 51'b10000000000000000;
parameter    ap_ST_st18_fsm_17 = 51'b100000000000000000;
parameter    ap_ST_st19_fsm_18 = 51'b1000000000000000000;
parameter    ap_ST_st20_fsm_19 = 51'b10000000000000000000;
parameter    ap_ST_st21_fsm_20 = 51'b100000000000000000000;
parameter    ap_ST_st22_fsm_21 = 51'b1000000000000000000000;
parameter    ap_ST_st23_fsm_22 = 51'b10000000000000000000000;
parameter    ap_ST_st24_fsm_23 = 51'b100000000000000000000000;
parameter    ap_ST_st25_fsm_24 = 51'b1000000000000000000000000;
parameter    ap_ST_st26_fsm_25 = 51'b10000000000000000000000000;
parameter    ap_ST_st27_fsm_26 = 51'b100000000000000000000000000;
parameter    ap_ST_st28_fsm_27 = 51'b1000000000000000000000000000;
parameter    ap_ST_st29_fsm_28 = 51'b10000000000000000000000000000;
parameter    ap_ST_st30_fsm_29 = 51'b100000000000000000000000000000;
parameter    ap_ST_st31_fsm_30 = 51'b1000000000000000000000000000000;
parameter    ap_ST_st32_fsm_31 = 51'b10000000000000000000000000000000;
parameter    ap_ST_st33_fsm_32 = 51'b100000000000000000000000000000000;
parameter    ap_ST_st34_fsm_33 = 51'b1000000000000000000000000000000000;
parameter    ap_ST_st35_fsm_34 = 51'b10000000000000000000000000000000000;
parameter    ap_ST_st36_fsm_35 = 51'b100000000000000000000000000000000000;
parameter    ap_ST_st37_fsm_36 = 51'b1000000000000000000000000000000000000;
parameter    ap_ST_st38_fsm_37 = 51'b10000000000000000000000000000000000000;
parameter    ap_ST_st39_fsm_38 = 51'b100000000000000000000000000000000000000;
parameter    ap_ST_st40_fsm_39 = 51'b1000000000000000000000000000000000000000;
parameter    ap_ST_st41_fsm_40 = 51'b10000000000000000000000000000000000000000;
parameter    ap_ST_st42_fsm_41 = 51'b100000000000000000000000000000000000000000;
parameter    ap_ST_st43_fsm_42 = 51'b1000000000000000000000000000000000000000000;
parameter    ap_ST_st44_fsm_43 = 51'b10000000000000000000000000000000000000000000;
parameter    ap_ST_st45_fsm_44 = 51'b100000000000000000000000000000000000000000000;
parameter    ap_ST_st46_fsm_45 = 51'b1000000000000000000000000000000000000000000000;
parameter    ap_ST_st47_fsm_46 = 51'b10000000000000000000000000000000000000000000000;
parameter    ap_ST_st48_fsm_47 = 51'b100000000000000000000000000000000000000000000000;
parameter    ap_ST_st49_fsm_48 = 51'b1000000000000000000000000000000000000000000000000;
parameter    ap_ST_st50_fsm_49 = 51'b10000000000000000000000000000000000000000000000000;
parameter    ap_ST_st51_fsm_50 = 51'b100000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_22 = 32'b100010;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_14 = 32'b10100;
parameter    ap_const_lv32_15 = 32'b10101;
parameter    ap_const_lv32_1D = 32'b11101;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv32_32 = 32'b110010;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_3F800000 = 32'b111111100000000000000000000000;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv32_23 = 32'b100011;
parameter    ap_const_lv4_A = 4'b1010;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv5_1E = 5'b11110;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv32_80000000 = 32'b10000000000000000000000000000000;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] C5_y_address0;
output   C5_y_ce0;
input  [31:0] C5_y_q0;
output  [8:0] output_wei_address0;
output   output_wei_ce0;
input  [31:0] output_wei_q0;
output  [3:0] output_bias_address0;
output   output_bias_ce0;
input  [31:0] output_bias_q0;
output  [3:0] output_y_address0;
output   output_y_ce0;
output   output_y_we0;
output  [31:0] output_y_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg C5_y_ce0;
reg output_wei_ce0;
reg output_bias_ce0;
reg output_y_ce0;
reg output_y_we0;
(* fsm_encoding = "none" *) reg   [50:0] ap_CS_fsm = 51'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_69;
reg   [3:0] output_v_address0;
reg    output_v_ce0;
reg    output_v_we0;
reg   [31:0] output_v_d0;
wire   [31:0] output_v_q0;
reg   [31:0] reg_188;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_bdd_115;
reg    ap_sig_cseq_ST_st16_fsm_15;
reg    ap_sig_bdd_122;
wire   [31:0] grp_fu_166_p2;
reg   [31:0] reg_193;
reg    ap_sig_cseq_ST_st13_fsm_12;
reg    ap_sig_bdd_132;
reg    ap_sig_cseq_ST_st35_fsm_34;
reg    ap_sig_bdd_139;
wire   [3:0] i_9_fu_205_p2;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_149;
wire   [3:0] i_8_fu_222_p2;
reg   [3:0] i_8_reg_337;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_158;
reg   [3:0] output_v_addr_1_reg_342;
wire   [0:0] exitcond2_fu_216_p2;
wire   [8:0] tmp_trn_cast_fu_233_p1;
reg   [8:0] tmp_trn_cast_reg_347;
wire   [4:0] j_7_fu_243_p2;
reg   [4:0] j_7_reg_355;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_175;
wire   [0:0] exitcond1_fu_237_p2;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_190;
wire   [31:0] grp_fu_171_p2;
reg   [31:0] tmp_42_reg_380;
wire   [3:0] i_10_fu_300_p2;
reg   [3:0] i_10_reg_388;
reg    ap_sig_cseq_ST_st15_fsm_14;
reg    ap_sig_bdd_202;
wire   [63:0] tmp_40_fu_306_p1;
reg   [63:0] tmp_40_reg_393;
wire   [0:0] exitcond_fu_294_p2;
reg   [31:0] output_bias_load_reg_408;
wire   [31:0] dtemp_neg_i_fu_316_p2;
reg   [31:0] dtemp_neg_i_reg_413;
reg    ap_sig_cseq_ST_st21_fsm_20;
reg    ap_sig_bdd_221;
reg    ap_sig_cseq_ST_st22_fsm_21;
reg    ap_sig_bdd_230;
wire   [31:0] grp_fu_183_p2;
reg   [31:0] tmp_i_reg_423;
reg    ap_sig_cseq_ST_st30_fsm_29;
reg    ap_sig_bdd_239;
reg   [3:0] i_reg_122;
wire   [0:0] exitcond3_fu_199_p2;
reg   [3:0] i_1_reg_133;
reg   [4:0] j_reg_144;
reg    ap_sig_cseq_ST_st14_fsm_13;
reg    ap_sig_bdd_263;
reg   [3:0] i_2_reg_155;
reg    ap_sig_cseq_ST_st51_fsm_50;
reg    ap_sig_bdd_273;
wire   [63:0] tmp_fu_211_p1;
wire   [63:0] tmp_s_fu_228_p1;
wire   [63:0] tmp_41_fu_249_p1;
wire   [63:0] tmp_90_fu_289_p1;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_bdd_288;
wire   [31:0] grp_fu_177_p2;
reg   [31:0] grp_fu_166_p0;
reg   [31:0] grp_fu_166_p1;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_bdd_305;
reg    ap_sig_cseq_ST_st17_fsm_16;
reg    ap_sig_bdd_312;
reg    ap_sig_cseq_ST_st31_fsm_30;
reg    ap_sig_bdd_320;
wire   [31:0] grp_fu_171_p0;
wire   [31:0] grp_fu_171_p1;
wire   [31:0] grp_fu_177_p0;
wire   [31:0] grp_fu_177_p1;
reg    ap_sig_cseq_ST_st36_fsm_35;
reg    ap_sig_bdd_331;
wire   [31:0] grp_fu_183_p1;
wire   [7:0] tmp_88_fu_254_p3;
wire   [5:0] tmp_89_fu_266_p3;
wire   [8:0] p_shl3_cast_fu_274_p1;
wire   [8:0] p_shl_cast_fu_262_p1;
wire   [8:0] output_wei_addr1_fu_278_p2;
wire   [8:0] output_wei_addr2_fu_284_p2;
wire   [31:0] dtemp_to_int_i_fu_312_p1;
wire    grp_fu_166_ce;
wire    grp_fu_171_ce;
wire    grp_fu_177_ce;
wire   [31:0] grp_fu_183_p0;
wire    grp_fu_183_ce;
reg   [50:0] ap_NS_fsm;


dateport_O_layer_output_v #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
output_v_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( output_v_address0 ),
    .ce0( output_v_ce0 ),
    .we0( output_v_we0 ),
    .d0( output_v_d0 ),
    .q0( output_v_q0 )
);

dateport_fadd_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dateport_fadd_32ns_32ns_32_5_full_dsp_U32(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_166_p0 ),
    .din1( grp_fu_166_p1 ),
    .ce( grp_fu_166_ce ),
    .dout( grp_fu_166_p2 )
);

dateport_fmul_32ns_32ns_32_4_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dateport_fmul_32ns_32ns_32_4_max_dsp_U33(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_171_p0 ),
    .din1( grp_fu_171_p1 ),
    .ce( grp_fu_171_ce ),
    .dout( grp_fu_171_p2 )
);

dateport_fdiv_32ns_32ns_32_16 #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dateport_fdiv_32ns_32ns_32_16_U34(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_177_p0 ),
    .din1( grp_fu_177_p1 ),
    .ce( grp_fu_177_ce ),
    .dout( grp_fu_177_p2 )
);

dateport_fexp_32ns_32ns_32_9_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dateport_fexp_32ns_32ns_32_9_full_dsp_U35(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_183_p0 ),
    .din1( grp_fu_183_p1 ),
    .ce( grp_fu_183_ce ),
    .dout( grp_fu_183_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_lv1_0 == exitcond1_fu_237_p2))) begin
        i_1_reg_133 <= i_8_reg_337;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_lv1_0 == exitcond3_fu_199_p2))) begin
        i_1_reg_133 <= ap_const_lv4_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(exitcond2_fu_216_p2 == ap_const_lv1_0))) begin
        i_2_reg_155 <= ap_const_lv4_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st51_fsm_50)) begin
        i_2_reg_155 <= i_10_reg_388;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (ap_const_lv1_0 == exitcond3_fu_199_p2))) begin
        i_reg_122 <= i_9_fu_205_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_122 <= ap_const_lv4_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (exitcond2_fu_216_p2 == ap_const_lv1_0))) begin
        j_reg_144 <= ap_const_lv5_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13)) begin
        j_reg_144 <= j_7_reg_355;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st21_fsm_20)) begin
        dtemp_neg_i_reg_413 <= dtemp_neg_i_fu_316_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14)) begin
        i_10_reg_388 <= i_10_fu_300_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        i_8_reg_337 <= i_8_fu_222_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        j_7_reg_355 <= j_7_fu_243_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15)) begin
        output_bias_load_reg_408 <= output_bias_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (exitcond2_fu_216_p2 == ap_const_lv1_0))) begin
        output_v_addr_1_reg_342 <= tmp_s_fu_228_p1;
        tmp_trn_cast_reg_347[3 : 0] <= tmp_trn_cast_fu_233_p1[3 : 0];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) | (ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15))) begin
        reg_188 <= output_v_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12) | (ap_const_logic_1 == ap_sig_cseq_ST_st35_fsm_34))) begin
        reg_193 <= grp_fu_166_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14) & (ap_const_lv1_0 == exitcond_fu_294_p2))) begin
        tmp_40_reg_393[3 : 0] <= tmp_40_fu_306_p1[3 : 0];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        tmp_42_reg_380 <= grp_fu_171_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st30_fsm_29)) begin
        tmp_i_reg_423 <= grp_fu_183_p2;
    end
end

/// C5_y_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        C5_y_ce0 = ap_const_logic_1;
    end else begin
        C5_y_ce0 = ap_const_logic_0;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st15_fsm_14 or exitcond_fu_294_p2)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14) & ~(ap_const_lv1_0 == exitcond_fu_294_p2)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st15_fsm_14 or exitcond_fu_294_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14) & ~(ap_const_lv1_0 == exitcond_fu_294_p2))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st13_fsm_12 assign process. ///
always @ (ap_sig_bdd_132)
begin
    if (ap_sig_bdd_132) begin
        ap_sig_cseq_ST_st13_fsm_12 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st13_fsm_12 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st14_fsm_13 assign process. ///
always @ (ap_sig_bdd_263)
begin
    if (ap_sig_bdd_263) begin
        ap_sig_cseq_ST_st14_fsm_13 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st14_fsm_13 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st15_fsm_14 assign process. ///
always @ (ap_sig_bdd_202)
begin
    if (ap_sig_bdd_202) begin
        ap_sig_cseq_ST_st15_fsm_14 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st15_fsm_14 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st16_fsm_15 assign process. ///
always @ (ap_sig_bdd_122)
begin
    if (ap_sig_bdd_122) begin
        ap_sig_cseq_ST_st16_fsm_15 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st16_fsm_15 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st17_fsm_16 assign process. ///
always @ (ap_sig_bdd_312)
begin
    if (ap_sig_bdd_312) begin
        ap_sig_cseq_ST_st17_fsm_16 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st17_fsm_16 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_69)
begin
    if (ap_sig_bdd_69) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st21_fsm_20 assign process. ///
always @ (ap_sig_bdd_221)
begin
    if (ap_sig_bdd_221) begin
        ap_sig_cseq_ST_st21_fsm_20 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st21_fsm_20 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st22_fsm_21 assign process. ///
always @ (ap_sig_bdd_230)
begin
    if (ap_sig_bdd_230) begin
        ap_sig_cseq_ST_st22_fsm_21 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st22_fsm_21 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_149)
begin
    if (ap_sig_bdd_149) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st30_fsm_29 assign process. ///
always @ (ap_sig_bdd_239)
begin
    if (ap_sig_bdd_239) begin
        ap_sig_cseq_ST_st30_fsm_29 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st30_fsm_29 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st31_fsm_30 assign process. ///
always @ (ap_sig_bdd_320)
begin
    if (ap_sig_bdd_320) begin
        ap_sig_cseq_ST_st31_fsm_30 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st31_fsm_30 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st35_fsm_34 assign process. ///
always @ (ap_sig_bdd_139)
begin
    if (ap_sig_bdd_139) begin
        ap_sig_cseq_ST_st35_fsm_34 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st35_fsm_34 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st36_fsm_35 assign process. ///
always @ (ap_sig_bdd_331)
begin
    if (ap_sig_bdd_331) begin
        ap_sig_cseq_ST_st36_fsm_35 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st36_fsm_35 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_158)
begin
    if (ap_sig_bdd_158) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_175)
begin
    if (ap_sig_bdd_175) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st51_fsm_50 assign process. ///
always @ (ap_sig_bdd_273)
begin
    if (ap_sig_bdd_273) begin
        ap_sig_cseq_ST_st51_fsm_50 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st51_fsm_50 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st5_fsm_4 assign process. ///
always @ (ap_sig_bdd_190)
begin
    if (ap_sig_bdd_190) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st7_fsm_6 assign process. ///
always @ (ap_sig_bdd_288)
begin
    if (ap_sig_bdd_288) begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st8_fsm_7 assign process. ///
always @ (ap_sig_bdd_115)
begin
    if (ap_sig_bdd_115) begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st9_fsm_8 assign process. ///
always @ (ap_sig_bdd_305)
begin
    if (ap_sig_bdd_305) begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_0;
    end
end

/// grp_fu_166_p0 assign process. ///
always @ (reg_188 or tmp_i_reg_423 or ap_sig_cseq_ST_st9_fsm_8 or ap_sig_cseq_ST_st17_fsm_16 or ap_sig_cseq_ST_st31_fsm_30)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st31_fsm_30)) begin
        grp_fu_166_p0 = tmp_i_reg_423;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8) | (ap_const_logic_1 == ap_sig_cseq_ST_st17_fsm_16))) begin
        grp_fu_166_p0 = reg_188;
    end else begin
        grp_fu_166_p0 = 'bx;
    end
end

/// grp_fu_166_p1 assign process. ///
always @ (tmp_42_reg_380 or output_bias_load_reg_408 or ap_sig_cseq_ST_st9_fsm_8 or ap_sig_cseq_ST_st17_fsm_16 or ap_sig_cseq_ST_st31_fsm_30)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st31_fsm_30)) begin
        grp_fu_166_p1 = ap_const_lv32_3F800000;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st17_fsm_16)) begin
        grp_fu_166_p1 = output_bias_load_reg_408;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        grp_fu_166_p1 = tmp_42_reg_380;
    end else begin
        grp_fu_166_p1 = 'bx;
    end
end

/// output_bias_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st15_fsm_14)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14)) begin
        output_bias_ce0 = ap_const_logic_1;
    end else begin
        output_bias_ce0 = ap_const_logic_0;
    end
end

/// output_v_address0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or output_v_addr_1_reg_342 or ap_sig_cseq_ST_st15_fsm_14 or tmp_40_fu_306_p1 or ap_sig_cseq_ST_st14_fsm_13 or tmp_fu_211_p1 or ap_sig_cseq_ST_st7_fsm_6)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_v_address0 = tmp_fu_211_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14)) begin
        output_v_address0 = tmp_40_fu_306_p1;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13) | (ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6))) begin
        output_v_address0 = output_v_addr_1_reg_342;
    end else begin
        output_v_address0 = 'bx;
    end
end

/// output_v_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st15_fsm_14 or ap_sig_cseq_ST_st14_fsm_13 or ap_sig_cseq_ST_st7_fsm_6)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) | (ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14) | (ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13) | (ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6))) begin
        output_v_ce0 = ap_const_logic_1;
    end else begin
        output_v_ce0 = ap_const_logic_0;
    end
end

/// output_v_d0 assign process. ///
always @ (reg_193 or ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st14_fsm_13)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13)) begin
        output_v_d0 = reg_193;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        output_v_d0 = ap_const_lv32_0;
    end else begin
        output_v_d0 = 'bx;
    end
end

/// output_v_we0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond3_fu_199_p2 or ap_sig_cseq_ST_st14_fsm_13)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (ap_const_lv1_0 == exitcond3_fu_199_p2)) | (ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13))) begin
        output_v_we0 = ap_const_logic_1;
    end else begin
        output_v_we0 = ap_const_logic_0;
    end
end

/// output_wei_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        output_wei_ce0 = ap_const_logic_1;
    end else begin
        output_wei_ce0 = ap_const_logic_0;
    end
end

/// output_y_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st51_fsm_50)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st51_fsm_50)) begin
        output_y_ce0 = ap_const_logic_1;
    end else begin
        output_y_ce0 = ap_const_logic_0;
    end
end

/// output_y_we0 assign process. ///
always @ (ap_sig_cseq_ST_st51_fsm_50)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st51_fsm_50)) begin
        output_y_we0 = ap_const_logic_1;
    end else begin
        output_y_we0 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or exitcond2_fu_216_p2 or exitcond1_fu_237_p2 or exitcond_fu_294_p2 or exitcond3_fu_199_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if ((ap_const_lv1_0 == exitcond3_fu_199_p2)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if ((exitcond2_fu_216_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st15_fsm_14;
            end
        end
        ap_ST_st4_fsm_3 : 
        begin
            if ((ap_const_lv1_0 == exitcond1_fu_237_p2)) begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : 
        begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : 
        begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : 
        begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : 
        begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st15_fsm_14 : 
        begin
            if (~(ap_const_lv1_0 == exitcond_fu_294_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st16_fsm_15;
            end
        end
        ap_ST_st16_fsm_15 : 
        begin
            ap_NS_fsm = ap_ST_st17_fsm_16;
        end
        ap_ST_st17_fsm_16 : 
        begin
            ap_NS_fsm = ap_ST_st18_fsm_17;
        end
        ap_ST_st18_fsm_17 : 
        begin
            ap_NS_fsm = ap_ST_st19_fsm_18;
        end
        ap_ST_st19_fsm_18 : 
        begin
            ap_NS_fsm = ap_ST_st20_fsm_19;
        end
        ap_ST_st20_fsm_19 : 
        begin
            ap_NS_fsm = ap_ST_st21_fsm_20;
        end
        ap_ST_st21_fsm_20 : 
        begin
            ap_NS_fsm = ap_ST_st22_fsm_21;
        end
        ap_ST_st22_fsm_21 : 
        begin
            ap_NS_fsm = ap_ST_st23_fsm_22;
        end
        ap_ST_st23_fsm_22 : 
        begin
            ap_NS_fsm = ap_ST_st24_fsm_23;
        end
        ap_ST_st24_fsm_23 : 
        begin
            ap_NS_fsm = ap_ST_st25_fsm_24;
        end
        ap_ST_st25_fsm_24 : 
        begin
            ap_NS_fsm = ap_ST_st26_fsm_25;
        end
        ap_ST_st26_fsm_25 : 
        begin
            ap_NS_fsm = ap_ST_st27_fsm_26;
        end
        ap_ST_st27_fsm_26 : 
        begin
            ap_NS_fsm = ap_ST_st28_fsm_27;
        end
        ap_ST_st28_fsm_27 : 
        begin
            ap_NS_fsm = ap_ST_st29_fsm_28;
        end
        ap_ST_st29_fsm_28 : 
        begin
            ap_NS_fsm = ap_ST_st30_fsm_29;
        end
        ap_ST_st30_fsm_29 : 
        begin
            ap_NS_fsm = ap_ST_st31_fsm_30;
        end
        ap_ST_st31_fsm_30 : 
        begin
            ap_NS_fsm = ap_ST_st32_fsm_31;
        end
        ap_ST_st32_fsm_31 : 
        begin
            ap_NS_fsm = ap_ST_st33_fsm_32;
        end
        ap_ST_st33_fsm_32 : 
        begin
            ap_NS_fsm = ap_ST_st34_fsm_33;
        end
        ap_ST_st34_fsm_33 : 
        begin
            ap_NS_fsm = ap_ST_st35_fsm_34;
        end
        ap_ST_st35_fsm_34 : 
        begin
            ap_NS_fsm = ap_ST_st36_fsm_35;
        end
        ap_ST_st36_fsm_35 : 
        begin
            ap_NS_fsm = ap_ST_st37_fsm_36;
        end
        ap_ST_st37_fsm_36 : 
        begin
            ap_NS_fsm = ap_ST_st38_fsm_37;
        end
        ap_ST_st38_fsm_37 : 
        begin
            ap_NS_fsm = ap_ST_st39_fsm_38;
        end
        ap_ST_st39_fsm_38 : 
        begin
            ap_NS_fsm = ap_ST_st40_fsm_39;
        end
        ap_ST_st40_fsm_39 : 
        begin
            ap_NS_fsm = ap_ST_st41_fsm_40;
        end
        ap_ST_st41_fsm_40 : 
        begin
            ap_NS_fsm = ap_ST_st42_fsm_41;
        end
        ap_ST_st42_fsm_41 : 
        begin
            ap_NS_fsm = ap_ST_st43_fsm_42;
        end
        ap_ST_st43_fsm_42 : 
        begin
            ap_NS_fsm = ap_ST_st44_fsm_43;
        end
        ap_ST_st44_fsm_43 : 
        begin
            ap_NS_fsm = ap_ST_st45_fsm_44;
        end
        ap_ST_st45_fsm_44 : 
        begin
            ap_NS_fsm = ap_ST_st46_fsm_45;
        end
        ap_ST_st46_fsm_45 : 
        begin
            ap_NS_fsm = ap_ST_st47_fsm_46;
        end
        ap_ST_st47_fsm_46 : 
        begin
            ap_NS_fsm = ap_ST_st48_fsm_47;
        end
        ap_ST_st48_fsm_47 : 
        begin
            ap_NS_fsm = ap_ST_st49_fsm_48;
        end
        ap_ST_st49_fsm_48 : 
        begin
            ap_NS_fsm = ap_ST_st50_fsm_49;
        end
        ap_ST_st50_fsm_49 : 
        begin
            ap_NS_fsm = ap_ST_st51_fsm_50;
        end
        ap_ST_st51_fsm_50 : 
        begin
            ap_NS_fsm = ap_ST_st15_fsm_14;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign C5_y_address0 = tmp_41_fu_249_p1;

/// ap_sig_bdd_115 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_115 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end

/// ap_sig_bdd_122 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_122 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_F]);
end

/// ap_sig_bdd_132 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_132 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_C]);
end

/// ap_sig_bdd_139 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_139 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_22]);
end

/// ap_sig_bdd_149 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_149 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_158 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_158 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_175 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_175 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_190 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_190 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

/// ap_sig_bdd_202 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_202 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_E]);
end

/// ap_sig_bdd_221 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_221 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_14]);
end

/// ap_sig_bdd_230 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_230 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_15]);
end

/// ap_sig_bdd_239 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_239 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1D]);
end

/// ap_sig_bdd_263 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_263 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_D]);
end

/// ap_sig_bdd_273 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_273 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_32]);
end

/// ap_sig_bdd_288 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_288 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end

/// ap_sig_bdd_305 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_305 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end

/// ap_sig_bdd_312 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_312 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_10]);
end

/// ap_sig_bdd_320 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_320 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1E]);
end

/// ap_sig_bdd_331 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_331 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_23]);
end

/// ap_sig_bdd_69 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_69 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end
assign dtemp_neg_i_fu_316_p2 = (dtemp_to_int_i_fu_312_p1 ^ ap_const_lv32_80000000);
assign dtemp_to_int_i_fu_312_p1 = grp_fu_166_p2;
assign exitcond1_fu_237_p2 = (j_reg_144 == ap_const_lv5_1E? 1'b1: 1'b0);
assign exitcond2_fu_216_p2 = (i_1_reg_133 == ap_const_lv4_A? 1'b1: 1'b0);
assign exitcond3_fu_199_p2 = (i_reg_122 == ap_const_lv4_A? 1'b1: 1'b0);
assign exitcond_fu_294_p2 = (i_2_reg_155 == ap_const_lv4_A? 1'b1: 1'b0);
assign grp_fu_166_ce = ap_const_logic_1;
assign grp_fu_171_ce = ap_const_logic_1;
assign grp_fu_171_p0 = C5_y_q0;
assign grp_fu_171_p1 = output_wei_q0;
assign grp_fu_177_ce = ap_const_logic_1;
assign grp_fu_177_p0 = ap_const_lv32_3F800000;
assign grp_fu_177_p1 = reg_193;
assign grp_fu_183_ce = ap_const_logic_1;
assign grp_fu_183_p0 = ap_const_lv32_0;
assign grp_fu_183_p1 = dtemp_neg_i_reg_413;
assign i_10_fu_300_p2 = (i_2_reg_155 + ap_const_lv4_1);
assign i_8_fu_222_p2 = (i_1_reg_133 + ap_const_lv4_1);
assign i_9_fu_205_p2 = (i_reg_122 + ap_const_lv4_1);
assign j_7_fu_243_p2 = (j_reg_144 + ap_const_lv5_1);
assign output_bias_address0 = tmp_40_fu_306_p1;
assign output_wei_addr1_fu_278_p2 = (p_shl3_cast_fu_274_p1 + p_shl_cast_fu_262_p1);
assign output_wei_addr2_fu_284_p2 = (output_wei_addr1_fu_278_p2 + tmp_trn_cast_reg_347);
assign output_wei_address0 = tmp_90_fu_289_p1;
assign output_y_address0 = tmp_40_reg_393;
assign output_y_d0 = grp_fu_177_p2;
assign p_shl3_cast_fu_274_p1 = tmp_89_fu_266_p3;
assign p_shl_cast_fu_262_p1 = tmp_88_fu_254_p3;
assign tmp_40_fu_306_p1 = i_2_reg_155;
assign tmp_41_fu_249_p1 = j_reg_144;
assign tmp_88_fu_254_p3 = {{j_reg_144}, {ap_const_lv3_0}};
assign tmp_89_fu_266_p3 = {{j_reg_144}, {ap_const_lv1_0}};
assign tmp_90_fu_289_p1 = output_wei_addr2_fu_284_p2;
assign tmp_fu_211_p1 = i_reg_122;
assign tmp_s_fu_228_p1 = i_1_reg_133;
assign tmp_trn_cast_fu_233_p1 = i_1_reg_133;
always @ (posedge ap_clk)
begin
    tmp_trn_cast_reg_347[8:4] <= 5'b00000;
    tmp_40_reg_393[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end



endmodule //dateport_O_layer

