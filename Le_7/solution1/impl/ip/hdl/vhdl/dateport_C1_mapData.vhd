-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

--
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity dateport_C1_mapData_ram is 
    generic(
            mem_type    : string := "block"; 
            dwidth     : integer := 32; 
            awidth     : integer := 8; 
            mem_size    : integer := 150
    ); 
    port (
          addr0     : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          d0        : in std_logic_vector(dwidth-1 downto 0); 
          we0       : in std_logic; 
          q0        : out std_logic_vector(dwidth-1 downto 0);
          addr1     : in std_logic_vector(awidth-1 downto 0); 
          ce1       : in std_logic; 
          q1        : out std_logic_vector(dwidth-1 downto 0);
          clk        : in std_logic 
    ); 
end entity; 


architecture rtl of dateport_C1_mapData_ram is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr1_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
shared variable ram : mem_array := (
    0 => "00111011101110000000100110101101", 
    1 => "00111010101101001000111010110000", 
    2 => "00111100000100110011000100001101", 
    3 => "10111011110100000011010110110111", 
    4 => "00111011110010010000101100110001", 
    5 => "00111100000011001100001011110100", 
    6 => "00111100001110110110001011000010", 
    7 => "00111011000000010100010101111001", 
    8 => "00111011110001000001011100000001", 
    9 => "10111100111110011001011000100000", 
    10 => "00111001111111100111101111110100", 
    11 => "10111011011011101110110110001100", 
    12 => "00111011100110000001111100100110", 
    13 => "00111100001111010001110101110010", 
    14 => "00111100101000101000000011010100", 
    15 => "10111100000000011010010110000110", 
    16 => "00111011101110010000101110110000", 
    17 => "00111100001010110010000100000101", 
    18 => "00111100101101001001011110111001", 
    19 => "00111011111011110010110011011010", 
    20 => "00111100100001111100000101001101", 
    21 => "00111010111111100100001010000001", 
    22 => "10111100000001101011101111101011", 
    23 => "10111011101110011101011110111011", 
    24 => "00111100100011001100100110100000", 
    25 => "10111011001100100010010001011111", 
    26 => "00111100010000100000111000001110", 
    27 => "10111010101000011111000010001010", 
    28 => "00111100101011011010100001101111", 
    29 => "00111011010000001101101110100000", 
    30 => "10111001010001011111111000000010", 
    31 => "00111100101001001000111110001011", 
    32 => "10111011010110011111100110110000", 
    33 => "10111010000101010100011011101110", 
    34 => "10111011111110010111000111010110", 
    35 => "10111011001101011111111001111011", 
    36 => "10111001001110000101011110110101", 
    37 => "10111010111110100111001101110000", 
    38 => "10111010111010111011111000101101", 
    39 => "10111100001101110111111000011100", 
    40 => "00111100001100110001111101011100", 
    41 => "10111100100000110000000111000011", 
    42 => "00111100001100011010000010111110", 
    43 => "10111010111011101000100100111111", 
    44 => "00111100000000000101011101111110", 
    45 => "10111011011010000011110110111111", 
    46 => "00111011101010011000111001110111", 
    47 => "10111011001100101110000001111100", 
    48 => "10111011101000001001101001101001", 
    49 => "10111011110111001100001000100001", 
    50 => "00111011111101010010010010110110", 
    51 => "00111010100010000110010111100011", 
    52 => "10111011000111110000001001110010", 
    53 => "10111011110100111000101000000101", 
    54 => "10111100011011010011010000000100", 
    55 => "00111011110111101000001001111001", 
    56 => "10111100100100111011111011010001", 
    57 => "10111100100010000010011111001110", 
    58 => "00111010100011100110011101010111", 
    59 => "10111010000110000101001111001111", 
    60 => "10111100010000010110111001111111", 
    61 => "10111011010101001011110011100100", 
    62 => "00111100101001110110011101111110", 
    63 => "00111011011101110000001100000010", 
    64 => "00111100110110101100101001000000", 
    65 => "00111100000101101000001101101000", 
    66 => "00111010101110100011000100011011", 
    67 => "00111011110001110000011111000101", 
    68 => "10111011101000001001111010000000", 
    69 => "10111010000111010101001101111101", 
    70 => "00111100011010001001100111011111", 
    71 => "00111010101110001011111100001101", 
    72 => "10111100011001100111111111101111", 
    73 => "10111011111001001001000110111011", 
    74 => "00111100010001001100001001011001", 
    75 => "00111001101110101000111110011010", 
    76 => "10111011101011110011001110001101", 
    77 => "10111011111101101010100100100110", 
    78 => "10111011001001000011110001000110", 
    79 => "00111011011101101010111111110111", 
    80 => "10111011001100010010011000000110", 
    81 => "00111011011011110111110001011000", 
    82 => "10111100100110110110100110010011", 
    83 => "10111100001111111111011111010110", 
    84 => "00111100011111110111110110110110", 
    85 => "10111011010001000111101010000101", 
    86 => "00111011110100011110100100010100", 
    87 => "10111100000001111010000001011011", 
    88 => "10111100001000100111110010100011", 
    89 => "00111100010001101100100100100110", 
    90 => "10111100001111111110001011100110", 
    91 => "10111001110000100001011100100111", 
    92 => "10111011100111000001101100011110", 
    93 => "10111011000001101000100111010111", 
    94 => "00111100000110101100001110110110", 
    95 => "00111011101110100011000101010011", 
    96 => "00111100100000110001111001111000", 
    97 => "00111100001010011010000100111011", 
    98 => "10111100000111011100111100010011", 
    99 => "00111011110111011001011100010001", 
    100 => "10111100100000101000101010000100", 
    101 => "10111011110110111010101001100111", 
    102 => "00111100100100000011100001001110", 
    103 => "10111100000011100011100100100100", 
    104 => "00111000101001111010010100010000", 
    105 => "10111010110011010111000110110100", 
    106 => "10111011101100011001101010110100", 
    107 => "00111011010001110001100110011100", 
    108 => "00111100001000001100110100110000", 
    109 => "10111100010110011011011100101010", 
    110 => "10111100000000000110100011111010", 
    111 => "00111100101110110101100001000001", 
    112 => "10111100110010010011111111011010", 
    113 => "10111100100000010010100100100001", 
    114 => "10111010111100111111000010110111", 
    115 => "10111011110001100101101010001011", 
    116 => "10111100010101111001010011001111", 
    117 => "10111100010011100011111101001101", 
    118 => "00111011111011111011110001100010", 
    119 => "00111011001101110111100100011010", 
    120 => "10111100011000101001000010010101", 
    121 => "00111010111001101000000001110101", 
    122 => "10111100010101010111100010011110", 
    123 => "10111001110011000000101000101111", 
    124 => "00111100001000000110011101010000", 
    125 => "00111100001100110011001010101111", 
    126 => "10111100011101111110111000011111", 
    127 => "10111011111111100101110101110011", 
    128 => "00111011110111101000000000110110", 
    129 => "10111100001000101000011101101001", 
    130 => "10111100100010011000001000100010", 
    131 => "00111100001001000010000001011010", 
    132 => "00111100000111010110101101111101", 
    133 => "00111100101010101110110010100010", 
    134 => "00111011100110101100010010011010", 
    135 => "00111100000010011110001011110010", 
    136 => "10111100100100101001000001000010", 
    137 => "10111100011011010111011111001110", 
    138 => "00111011000000000111110000010011", 
    139 => "00111100000010010011111010011111", 
    140 => "00111100110001010110110110011000", 
    141 => "00111011010111111001000011101110", 
    142 => "10111100011111011000100010011001", 
    143 => "00111011010111110101111000101111", 
    144 => "00111011101001100110100110100100", 
    145 => "10111100001110001010110001101100", 
    146 => "10111010100011110000101111010101", 
    147 => "00111100011000100000011010001001", 
    148 => "00111011101101100011100100111100", 
    149 => "00111010111100001011000111110110" );

attribute syn_ramstyle : string; 
attribute syn_ramstyle of ram : variable is "block_ram";
attribute ram_style : string;
attribute ram_style of ram : variable is mem_type;
attribute EQUIVALENT_REGISTER_REMOVAL : string;

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_memory_access_0: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            if (we0 = '1') then 
                ram(CONV_INTEGER(addr0_tmp)) := d0; 
            end if;
            q0 <= ram(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

p_memory_access_1: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce1 = '1') then 
            q1 <= ram(CONV_INTEGER(addr1_tmp)); 
        end if;
    end if;
end process;


end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity dateport_C1_mapData is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 150;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of dateport_C1_mapData is
    component dateport_C1_mapData_ram is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            d0 : IN STD_LOGIC_VECTOR;
            we0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    dateport_C1_mapData_ram_U :  component dateport_C1_mapData_ram
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        d0 => d0,
        we0 => we0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1);

end architecture;


